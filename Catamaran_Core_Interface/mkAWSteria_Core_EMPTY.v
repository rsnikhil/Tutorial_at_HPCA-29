//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// mem_M_awvalid                  O     1 const
// mem_M_awid                     O    16 const
// mem_M_awaddr                   O    64 const
// mem_M_awlen                    O     8 const
// mem_M_awsize                   O     3 const
// mem_M_awburst                  O     2 const
// mem_M_awlock                   O     1 const
// mem_M_awcache                  O     4 const
// mem_M_awprot                   O     3 const
// mem_M_awqos                    O     4 const
// mem_M_awregion                 O     4 const
// mem_M_wvalid                   O     1 const
// mem_M_wdata                    O   512 const
// mem_M_wstrb                    O    64 const
// mem_M_wlast                    O     1 const
// mem_M_bready                   O     1 const
// mem_M_arvalid                  O     1 const
// mem_M_arid                     O    16 const
// mem_M_araddr                   O    64 const
// mem_M_arlen                    O     8 const
// mem_M_arsize                   O     3 const
// mem_M_arburst                  O     2 const
// mem_M_arlock                   O     1 const
// mem_M_arcache                  O     4 const
// mem_M_arprot                   O     3 const
// mem_M_arqos                    O     4 const
// mem_M_arregion                 O     4 const
// mem_M_rready                   O     1 const
// mmio_M_awvalid                 O     1 const
// mmio_M_awid                    O    16 const
// mmio_M_awaddr                  O    64 const
// mmio_M_awlen                   O     8 const
// mmio_M_awsize                  O     3 const
// mmio_M_awburst                 O     2 const
// mmio_M_awlock                  O     1 const
// mmio_M_awcache                 O     4 const
// mmio_M_awprot                  O     3 const
// mmio_M_awqos                   O     4 const
// mmio_M_awregion                O     4 const
// mmio_M_wvalid                  O     1 const
// mmio_M_wdata                   O    64 const
// mmio_M_wstrb                   O     8 const
// mmio_M_wlast                   O     1 const
// mmio_M_bready                  O     1 const
// mmio_M_arvalid                 O     1 const
// mmio_M_arid                    O    16 const
// mmio_M_araddr                  O    64 const
// mmio_M_arlen                   O     8 const
// mmio_M_arsize                  O     3 const
// mmio_M_arburst                 O     2 const
// mmio_M_arlock                  O     1 const
// mmio_M_arcache                 O     4 const
// mmio_M_arprot                  O     3 const
// mmio_M_arqos                   O     4 const
// mmio_M_arregion                O     4 const
// mmio_M_rready                  O     1 const
// dma_S_awready                  O     1 const
// dma_S_wready                   O     1 const
// dma_S_bvalid                   O     1 const
// dma_S_bid                      O    16 const
// dma_S_bresp                    O     2 const
// dma_S_arready                  O     1 const
// dma_S_rvalid                   O     1 const
// dma_S_rid                      O    16 const
// dma_S_rdata                    O   512 const
// dma_S_rresp                    O     2 const
// dma_S_rlast                    O     1 const
// RDY_ext_interrupts             O     1 const
// RDY_fi_nmi_enq                 O     1 const
// fi_nmi_notFull                 O     1 const
// RDY_fi_nmi_notFull             O     1 const
// fo_misc_first                  O    32 const
// RDY_fo_misc_first              O     1 const
// RDY_fo_misc_deq                O     1 const
// fo_misc_notEmpty               O     1 const
// RDY_fo_misc_notEmpty           O     1 const
// RDY_fi_misc_enq                O     1 const
// fi_misc_notFull                O     1 const
// RDY_fi_misc_notFull            O     1 const
// fo_tv_info_first               O   608 const
// RDY_fo_tv_info_first           O     1 const
// RDY_fo_tv_info_deq             O     1 const
// fo_tv_info_notEmpty            O     1 const
// RDY_fo_tv_info_notEmpty        O     1 const
// RDY_se_dmi_request_enq         O     1 const
// se_dmi_request_notFull         O     1 const
// RDY_se_dmi_request_notFull     O     1 const
// se_dmi_response_first          O    32 const
// RDY_se_dmi_response_first      O     1 const
// RDY_se_dmi_response_deq        O     1 const
// se_dmi_response_notEmpty       O     1 const
// RDY_se_dmi_response_notEmpty   O     1 const
// RDY_cl_ndm_reset_request_first  O     1 const
// RDY_cl_ndm_reset_request_deq   O     1 const
// cl_ndm_reset_request_notEmpty  O     1 const
// RDY_cl_ndm_reset_request_notEmpty  O     1 const
// RDY_cl_ndm_reset_response_enq  O     1 const
// cl_ndm_reset_response_notFull  O     1 const
// RDY_cl_ndm_reset_response_notFull  O     1 const
// RDY_se_control_status_request_enq  O     1 const
// se_control_status_request_notFull  O     1 const
// RDY_se_control_status_request_notFull  O     1 const
// se_control_status_response_first  O    32 const
// RDY_se_control_status_response_first  O     1 const
// RDY_se_control_status_response_deq  O     1 const
// se_control_status_response_notEmpty  O     1 const
// RDY_se_control_status_response_notEmpty  O     1 const
// CLK_clk1                       I     1 unused
// CLK_clk2                       I     1 unused
// CLK_clk3                       I     1 unused
// CLK_clk4                       I     1 unused
// CLK_clk5                       I     1 unused
// CLK                            I     1 unused
// RST_N                          I     1 unused
// mem_M_awready                  I     1 unused
// mem_M_wready                   I     1 unused
// mem_M_bvalid                   I     1 unused
// mem_M_bid                      I    16 unused
// mem_M_bresp                    I     2 unused
// mem_M_arready                  I     1 unused
// mem_M_rvalid                   I     1 unused
// mem_M_rid                      I    16 unused
// mem_M_rdata                    I   512 unused
// mem_M_rresp                    I     2 unused
// mem_M_rlast                    I     1 unused
// mmio_M_awready                 I     1 unused
// mmio_M_wready                  I     1 unused
// mmio_M_bvalid                  I     1 unused
// mmio_M_bid                     I    16 unused
// mmio_M_bresp                   I     2 unused
// mmio_M_arready                 I     1 unused
// mmio_M_rvalid                  I     1 unused
// mmio_M_rid                     I    16 unused
// mmio_M_rdata                   I    64 unused
// mmio_M_rresp                   I     2 unused
// mmio_M_rlast                   I     1 unused
// dma_S_awvalid                  I     1 unused
// dma_S_awid                     I    16 unused
// dma_S_awaddr                   I    64 unused
// dma_S_awlen                    I     8 unused
// dma_S_awsize                   I     3 unused
// dma_S_awburst                  I     2 unused
// dma_S_awlock                   I     1 unused
// dma_S_awcache                  I     4 unused
// dma_S_awprot                   I     3 unused
// dma_S_awqos                    I     4 unused
// dma_S_awregion                 I     4 unused
// dma_S_wvalid                   I     1 unused
// dma_S_wdata                    I   512 unused
// dma_S_wstrb                    I    64 unused
// dma_S_wlast                    I     1 unused
// dma_S_bready                   I     1 unused
// dma_S_arvalid                  I     1 unused
// dma_S_arid                     I    16 unused
// dma_S_araddr                   I    64 unused
// dma_S_arlen                    I     8 unused
// dma_S_arsize                   I     3 unused
// dma_S_arburst                  I     2 unused
// dma_S_arlock                   I     1 unused
// dma_S_arcache                  I     4 unused
// dma_S_arprot                   I     3 unused
// dma_S_arqos                    I     4 unused
// dma_S_arregion                 I     4 unused
// dma_S_rready                   I     1 unused
// ext_interrupts_x               I     5 unused
// fi_nmi_enq_x                   I     1 unused
// fi_misc_enq_x                  I    32 unused
// se_dmi_request_enq_x           I    40 unused
// se_control_status_request_enq_x  I    32 unused
// EN_ext_interrupts              I     1 unused
// EN_fi_nmi_enq                  I     1 unused
// EN_fo_misc_deq                 I     1 unused
// EN_fi_misc_enq                 I     1 unused
// EN_fo_tv_info_deq              I     1 unused
// EN_se_dmi_request_enq          I     1 unused
// EN_se_dmi_response_deq         I     1 unused
// EN_cl_ndm_reset_request_deq    I     1 unused
// EN_cl_ndm_reset_response_enq   I     1 unused
// EN_se_control_status_request_enq  I     1 unused
// EN_se_control_status_response_deq  I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWSteria_Core(CLK_clk1,
		       CLK_clk2,
		       CLK_clk3,
		       CLK_clk4,
		       CLK_clk5,
		       CLK,
		       RST_N,

		       mem_M_awvalid,

		       mem_M_awid,

		       mem_M_awaddr,

		       mem_M_awlen,

		       mem_M_awsize,

		       mem_M_awburst,

		       mem_M_awlock,

		       mem_M_awcache,

		       mem_M_awprot,

		       mem_M_awqos,

		       mem_M_awregion,

		       mem_M_awready,

		       mem_M_wvalid,

		       mem_M_wdata,

		       mem_M_wstrb,

		       mem_M_wlast,

		       mem_M_wready,

		       mem_M_bvalid,
		       mem_M_bid,
		       mem_M_bresp,

		       mem_M_bready,

		       mem_M_arvalid,

		       mem_M_arid,

		       mem_M_araddr,

		       mem_M_arlen,

		       mem_M_arsize,

		       mem_M_arburst,

		       mem_M_arlock,

		       mem_M_arcache,

		       mem_M_arprot,

		       mem_M_arqos,

		       mem_M_arregion,

		       mem_M_arready,

		       mem_M_rvalid,
		       mem_M_rid,
		       mem_M_rdata,
		       mem_M_rresp,
		       mem_M_rlast,

		       mem_M_rready,

		       mmio_M_awvalid,

		       mmio_M_awid,

		       mmio_M_awaddr,

		       mmio_M_awlen,

		       mmio_M_awsize,

		       mmio_M_awburst,

		       mmio_M_awlock,

		       mmio_M_awcache,

		       mmio_M_awprot,

		       mmio_M_awqos,

		       mmio_M_awregion,

		       mmio_M_awready,

		       mmio_M_wvalid,

		       mmio_M_wdata,

		       mmio_M_wstrb,

		       mmio_M_wlast,

		       mmio_M_wready,

		       mmio_M_bvalid,
		       mmio_M_bid,
		       mmio_M_bresp,

		       mmio_M_bready,

		       mmio_M_arvalid,

		       mmio_M_arid,

		       mmio_M_araddr,

		       mmio_M_arlen,

		       mmio_M_arsize,

		       mmio_M_arburst,

		       mmio_M_arlock,

		       mmio_M_arcache,

		       mmio_M_arprot,

		       mmio_M_arqos,

		       mmio_M_arregion,

		       mmio_M_arready,

		       mmio_M_rvalid,
		       mmio_M_rid,
		       mmio_M_rdata,
		       mmio_M_rresp,
		       mmio_M_rlast,

		       mmio_M_rready,

		       dma_S_awvalid,
		       dma_S_awid,
		       dma_S_awaddr,
		       dma_S_awlen,
		       dma_S_awsize,
		       dma_S_awburst,
		       dma_S_awlock,
		       dma_S_awcache,
		       dma_S_awprot,
		       dma_S_awqos,
		       dma_S_awregion,

		       dma_S_awready,

		       dma_S_wvalid,
		       dma_S_wdata,
		       dma_S_wstrb,
		       dma_S_wlast,

		       dma_S_wready,

		       dma_S_bvalid,

		       dma_S_bid,

		       dma_S_bresp,

		       dma_S_bready,

		       dma_S_arvalid,
		       dma_S_arid,
		       dma_S_araddr,
		       dma_S_arlen,
		       dma_S_arsize,
		       dma_S_arburst,
		       dma_S_arlock,
		       dma_S_arcache,
		       dma_S_arprot,
		       dma_S_arqos,
		       dma_S_arregion,

		       dma_S_arready,

		       dma_S_rvalid,

		       dma_S_rid,

		       dma_S_rdata,

		       dma_S_rresp,

		       dma_S_rlast,

		       dma_S_rready,

		       ext_interrupts_x,
		       EN_ext_interrupts,
		       RDY_ext_interrupts,

		       fi_nmi_enq_x,
		       EN_fi_nmi_enq,
		       RDY_fi_nmi_enq,

		       fi_nmi_notFull,
		       RDY_fi_nmi_notFull,

		       fo_misc_first,
		       RDY_fo_misc_first,

		       EN_fo_misc_deq,
		       RDY_fo_misc_deq,

		       fo_misc_notEmpty,
		       RDY_fo_misc_notEmpty,

		       fi_misc_enq_x,
		       EN_fi_misc_enq,
		       RDY_fi_misc_enq,

		       fi_misc_notFull,
		       RDY_fi_misc_notFull,

		       fo_tv_info_first,
		       RDY_fo_tv_info_first,

		       EN_fo_tv_info_deq,
		       RDY_fo_tv_info_deq,

		       fo_tv_info_notEmpty,
		       RDY_fo_tv_info_notEmpty,

		       se_dmi_request_enq_x,
		       EN_se_dmi_request_enq,
		       RDY_se_dmi_request_enq,

		       se_dmi_request_notFull,
		       RDY_se_dmi_request_notFull,

		       se_dmi_response_first,
		       RDY_se_dmi_response_first,

		       EN_se_dmi_response_deq,
		       RDY_se_dmi_response_deq,

		       se_dmi_response_notEmpty,
		       RDY_se_dmi_response_notEmpty,

		       RDY_cl_ndm_reset_request_first,

		       EN_cl_ndm_reset_request_deq,
		       RDY_cl_ndm_reset_request_deq,

		       cl_ndm_reset_request_notEmpty,
		       RDY_cl_ndm_reset_request_notEmpty,

		       EN_cl_ndm_reset_response_enq,
		       RDY_cl_ndm_reset_response_enq,

		       cl_ndm_reset_response_notFull,
		       RDY_cl_ndm_reset_response_notFull,

		       se_control_status_request_enq_x,
		       EN_se_control_status_request_enq,
		       RDY_se_control_status_request_enq,

		       se_control_status_request_notFull,
		       RDY_se_control_status_request_notFull,

		       se_control_status_response_first,
		       RDY_se_control_status_response_first,

		       EN_se_control_status_response_deq,
		       RDY_se_control_status_response_deq,

		       se_control_status_response_notEmpty,
		       RDY_se_control_status_response_notEmpty);
  input  CLK_clk1;
  input  CLK_clk2;
  input  CLK_clk3;
  input  CLK_clk4;
  input  CLK_clk5;
  input  CLK;
  input  RST_N;

  // value method mem_M_m_awvalid
  output mem_M_awvalid;

  // value method mem_M_m_awid
  output [15 : 0] mem_M_awid;

  // value method mem_M_m_awaddr
  output [63 : 0] mem_M_awaddr;

  // value method mem_M_m_awlen
  output [7 : 0] mem_M_awlen;

  // value method mem_M_m_awsize
  output [2 : 0] mem_M_awsize;

  // value method mem_M_m_awburst
  output [1 : 0] mem_M_awburst;

  // value method mem_M_m_awlock
  output mem_M_awlock;

  // value method mem_M_m_awcache
  output [3 : 0] mem_M_awcache;

  // value method mem_M_m_awprot
  output [2 : 0] mem_M_awprot;

  // value method mem_M_m_awqos
  output [3 : 0] mem_M_awqos;

  // value method mem_M_m_awregion
  output [3 : 0] mem_M_awregion;

  // value method mem_M_m_awuser

  // action method mem_M_m_awready
  input  mem_M_awready;

  // value method mem_M_m_wvalid
  output mem_M_wvalid;

  // value method mem_M_m_wdata
  output [511 : 0] mem_M_wdata;

  // value method mem_M_m_wstrb
  output [63 : 0] mem_M_wstrb;

  // value method mem_M_m_wlast
  output mem_M_wlast;

  // value method mem_M_m_wuser

  // action method mem_M_m_wready
  input  mem_M_wready;

  // action method mem_M_m_bvalid
  input  mem_M_bvalid;
  input  [15 : 0] mem_M_bid;
  input  [1 : 0] mem_M_bresp;

  // value method mem_M_m_bready
  output mem_M_bready;

  // value method mem_M_m_arvalid
  output mem_M_arvalid;

  // value method mem_M_m_arid
  output [15 : 0] mem_M_arid;

  // value method mem_M_m_araddr
  output [63 : 0] mem_M_araddr;

  // value method mem_M_m_arlen
  output [7 : 0] mem_M_arlen;

  // value method mem_M_m_arsize
  output [2 : 0] mem_M_arsize;

  // value method mem_M_m_arburst
  output [1 : 0] mem_M_arburst;

  // value method mem_M_m_arlock
  output mem_M_arlock;

  // value method mem_M_m_arcache
  output [3 : 0] mem_M_arcache;

  // value method mem_M_m_arprot
  output [2 : 0] mem_M_arprot;

  // value method mem_M_m_arqos
  output [3 : 0] mem_M_arqos;

  // value method mem_M_m_arregion
  output [3 : 0] mem_M_arregion;

  // value method mem_M_m_aruser

  // action method mem_M_m_arready
  input  mem_M_arready;

  // action method mem_M_m_rvalid
  input  mem_M_rvalid;
  input  [15 : 0] mem_M_rid;
  input  [511 : 0] mem_M_rdata;
  input  [1 : 0] mem_M_rresp;
  input  mem_M_rlast;

  // value method mem_M_m_rready
  output mem_M_rready;

  // value method mmio_M_m_awvalid
  output mmio_M_awvalid;

  // value method mmio_M_m_awid
  output [15 : 0] mmio_M_awid;

  // value method mmio_M_m_awaddr
  output [63 : 0] mmio_M_awaddr;

  // value method mmio_M_m_awlen
  output [7 : 0] mmio_M_awlen;

  // value method mmio_M_m_awsize
  output [2 : 0] mmio_M_awsize;

  // value method mmio_M_m_awburst
  output [1 : 0] mmio_M_awburst;

  // value method mmio_M_m_awlock
  output mmio_M_awlock;

  // value method mmio_M_m_awcache
  output [3 : 0] mmio_M_awcache;

  // value method mmio_M_m_awprot
  output [2 : 0] mmio_M_awprot;

  // value method mmio_M_m_awqos
  output [3 : 0] mmio_M_awqos;

  // value method mmio_M_m_awregion
  output [3 : 0] mmio_M_awregion;

  // value method mmio_M_m_awuser

  // action method mmio_M_m_awready
  input  mmio_M_awready;

  // value method mmio_M_m_wvalid
  output mmio_M_wvalid;

  // value method mmio_M_m_wdata
  output [63 : 0] mmio_M_wdata;

  // value method mmio_M_m_wstrb
  output [7 : 0] mmio_M_wstrb;

  // value method mmio_M_m_wlast
  output mmio_M_wlast;

  // value method mmio_M_m_wuser

  // action method mmio_M_m_wready
  input  mmio_M_wready;

  // action method mmio_M_m_bvalid
  input  mmio_M_bvalid;
  input  [15 : 0] mmio_M_bid;
  input  [1 : 0] mmio_M_bresp;

  // value method mmio_M_m_bready
  output mmio_M_bready;

  // value method mmio_M_m_arvalid
  output mmio_M_arvalid;

  // value method mmio_M_m_arid
  output [15 : 0] mmio_M_arid;

  // value method mmio_M_m_araddr
  output [63 : 0] mmio_M_araddr;

  // value method mmio_M_m_arlen
  output [7 : 0] mmio_M_arlen;

  // value method mmio_M_m_arsize
  output [2 : 0] mmio_M_arsize;

  // value method mmio_M_m_arburst
  output [1 : 0] mmio_M_arburst;

  // value method mmio_M_m_arlock
  output mmio_M_arlock;

  // value method mmio_M_m_arcache
  output [3 : 0] mmio_M_arcache;

  // value method mmio_M_m_arprot
  output [2 : 0] mmio_M_arprot;

  // value method mmio_M_m_arqos
  output [3 : 0] mmio_M_arqos;

  // value method mmio_M_m_arregion
  output [3 : 0] mmio_M_arregion;

  // value method mmio_M_m_aruser

  // action method mmio_M_m_arready
  input  mmio_M_arready;

  // action method mmio_M_m_rvalid
  input  mmio_M_rvalid;
  input  [15 : 0] mmio_M_rid;
  input  [63 : 0] mmio_M_rdata;
  input  [1 : 0] mmio_M_rresp;
  input  mmio_M_rlast;

  // value method mmio_M_m_rready
  output mmio_M_rready;

  // action method dma_S_m_awvalid
  input  dma_S_awvalid;
  input  [15 : 0] dma_S_awid;
  input  [63 : 0] dma_S_awaddr;
  input  [7 : 0] dma_S_awlen;
  input  [2 : 0] dma_S_awsize;
  input  [1 : 0] dma_S_awburst;
  input  dma_S_awlock;
  input  [3 : 0] dma_S_awcache;
  input  [2 : 0] dma_S_awprot;
  input  [3 : 0] dma_S_awqos;
  input  [3 : 0] dma_S_awregion;

  // value method dma_S_m_awready
  output dma_S_awready;

  // action method dma_S_m_wvalid
  input  dma_S_wvalid;
  input  [511 : 0] dma_S_wdata;
  input  [63 : 0] dma_S_wstrb;
  input  dma_S_wlast;

  // value method dma_S_m_wready
  output dma_S_wready;

  // value method dma_S_m_bvalid
  output dma_S_bvalid;

  // value method dma_S_m_bid
  output [15 : 0] dma_S_bid;

  // value method dma_S_m_bresp
  output [1 : 0] dma_S_bresp;

  // value method dma_S_m_buser

  // action method dma_S_m_bready
  input  dma_S_bready;

  // action method dma_S_m_arvalid
  input  dma_S_arvalid;
  input  [15 : 0] dma_S_arid;
  input  [63 : 0] dma_S_araddr;
  input  [7 : 0] dma_S_arlen;
  input  [2 : 0] dma_S_arsize;
  input  [1 : 0] dma_S_arburst;
  input  dma_S_arlock;
  input  [3 : 0] dma_S_arcache;
  input  [2 : 0] dma_S_arprot;
  input  [3 : 0] dma_S_arqos;
  input  [3 : 0] dma_S_arregion;

  // value method dma_S_m_arready
  output dma_S_arready;

  // value method dma_S_m_rvalid
  output dma_S_rvalid;

  // value method dma_S_m_rid
  output [15 : 0] dma_S_rid;

  // value method dma_S_m_rdata
  output [511 : 0] dma_S_rdata;

  // value method dma_S_m_rresp
  output [1 : 0] dma_S_rresp;

  // value method dma_S_m_rlast
  output dma_S_rlast;

  // value method dma_S_m_ruser

  // action method dma_S_m_rready
  input  dma_S_rready;

  // action method ext_interrupts
  input  [4 : 0] ext_interrupts_x;
  input  EN_ext_interrupts;
  output RDY_ext_interrupts;

  // action method fi_nmi_enq
  input  fi_nmi_enq_x;
  input  EN_fi_nmi_enq;
  output RDY_fi_nmi_enq;

  // value method fi_nmi_notFull
  output fi_nmi_notFull;
  output RDY_fi_nmi_notFull;

  // value method fo_misc_first
  output [31 : 0] fo_misc_first;
  output RDY_fo_misc_first;

  // action method fo_misc_deq
  input  EN_fo_misc_deq;
  output RDY_fo_misc_deq;

  // value method fo_misc_notEmpty
  output fo_misc_notEmpty;
  output RDY_fo_misc_notEmpty;

  // action method fi_misc_enq
  input  [31 : 0] fi_misc_enq_x;
  input  EN_fi_misc_enq;
  output RDY_fi_misc_enq;

  // value method fi_misc_notFull
  output fi_misc_notFull;
  output RDY_fi_misc_notFull;

  // value method fo_tv_info_first
  output [607 : 0] fo_tv_info_first;
  output RDY_fo_tv_info_first;

  // action method fo_tv_info_deq
  input  EN_fo_tv_info_deq;
  output RDY_fo_tv_info_deq;

  // value method fo_tv_info_notEmpty
  output fo_tv_info_notEmpty;
  output RDY_fo_tv_info_notEmpty;

  // action method se_dmi_request_enq
  input  [39 : 0] se_dmi_request_enq_x;
  input  EN_se_dmi_request_enq;
  output RDY_se_dmi_request_enq;

  // value method se_dmi_request_notFull
  output se_dmi_request_notFull;
  output RDY_se_dmi_request_notFull;

  // value method se_dmi_response_first
  output [31 : 0] se_dmi_response_first;
  output RDY_se_dmi_response_first;

  // action method se_dmi_response_deq
  input  EN_se_dmi_response_deq;
  output RDY_se_dmi_response_deq;

  // value method se_dmi_response_notEmpty
  output se_dmi_response_notEmpty;
  output RDY_se_dmi_response_notEmpty;

  // value method cl_ndm_reset_request_first
  output RDY_cl_ndm_reset_request_first;

  // action method cl_ndm_reset_request_deq
  input  EN_cl_ndm_reset_request_deq;
  output RDY_cl_ndm_reset_request_deq;

  // value method cl_ndm_reset_request_notEmpty
  output cl_ndm_reset_request_notEmpty;
  output RDY_cl_ndm_reset_request_notEmpty;

  // action method cl_ndm_reset_response_enq
  input  EN_cl_ndm_reset_response_enq;
  output RDY_cl_ndm_reset_response_enq;

  // value method cl_ndm_reset_response_notFull
  output cl_ndm_reset_response_notFull;
  output RDY_cl_ndm_reset_response_notFull;

  // action method se_control_status_request_enq
  input  [31 : 0] se_control_status_request_enq_x;
  input  EN_se_control_status_request_enq;
  output RDY_se_control_status_request_enq;

  // value method se_control_status_request_notFull
  output se_control_status_request_notFull;
  output RDY_se_control_status_request_notFull;

  // value method se_control_status_response_first
  output [31 : 0] se_control_status_response_first;
  output RDY_se_control_status_response_first;

  // action method se_control_status_response_deq
  input  EN_se_control_status_response_deq;
  output RDY_se_control_status_response_deq;

  // value method se_control_status_response_notEmpty
  output se_control_status_response_notEmpty;
  output RDY_se_control_status_response_notEmpty;

  // signals for module outputs
  wire [607 : 0] fo_tv_info_first;
  wire [511 : 0] dma_S_rdata, mem_M_wdata;
  wire [63 : 0] mem_M_araddr,
		mem_M_awaddr,
		mem_M_wstrb,
		mmio_M_araddr,
		mmio_M_awaddr,
		mmio_M_wdata;
  wire [31 : 0] fo_misc_first,
		se_control_status_response_first,
		se_dmi_response_first;
  wire [15 : 0] dma_S_bid,
		dma_S_rid,
		mem_M_arid,
		mem_M_awid,
		mmio_M_arid,
		mmio_M_awid;
  wire [7 : 0] mem_M_arlen,
	       mem_M_awlen,
	       mmio_M_arlen,
	       mmio_M_awlen,
	       mmio_M_wstrb;
  wire [3 : 0] mem_M_arcache,
	       mem_M_arqos,
	       mem_M_arregion,
	       mem_M_awcache,
	       mem_M_awqos,
	       mem_M_awregion,
	       mmio_M_arcache,
	       mmio_M_arqos,
	       mmio_M_arregion,
	       mmio_M_awcache,
	       mmio_M_awqos,
	       mmio_M_awregion;
  wire [2 : 0] mem_M_arprot,
	       mem_M_arsize,
	       mem_M_awprot,
	       mem_M_awsize,
	       mmio_M_arprot,
	       mmio_M_arsize,
	       mmio_M_awprot,
	       mmio_M_awsize;
  wire [1 : 0] dma_S_bresp,
	       dma_S_rresp,
	       mem_M_arburst,
	       mem_M_awburst,
	       mmio_M_arburst,
	       mmio_M_awburst;
  wire RDY_cl_ndm_reset_request_deq,
       RDY_cl_ndm_reset_request_first,
       RDY_cl_ndm_reset_request_notEmpty,
       RDY_cl_ndm_reset_response_enq,
       RDY_cl_ndm_reset_response_notFull,
       RDY_ext_interrupts,
       RDY_fi_misc_enq,
       RDY_fi_misc_notFull,
       RDY_fi_nmi_enq,
       RDY_fi_nmi_notFull,
       RDY_fo_misc_deq,
       RDY_fo_misc_first,
       RDY_fo_misc_notEmpty,
       RDY_fo_tv_info_deq,
       RDY_fo_tv_info_first,
       RDY_fo_tv_info_notEmpty,
       RDY_se_control_status_request_enq,
       RDY_se_control_status_request_notFull,
       RDY_se_control_status_response_deq,
       RDY_se_control_status_response_first,
       RDY_se_control_status_response_notEmpty,
       RDY_se_dmi_request_enq,
       RDY_se_dmi_request_notFull,
       RDY_se_dmi_response_deq,
       RDY_se_dmi_response_first,
       RDY_se_dmi_response_notEmpty,
       cl_ndm_reset_request_notEmpty,
       cl_ndm_reset_response_notFull,
       dma_S_arready,
       dma_S_awready,
       dma_S_bvalid,
       dma_S_rlast,
       dma_S_rvalid,
       dma_S_wready,
       fi_misc_notFull,
       fi_nmi_notFull,
       fo_misc_notEmpty,
       fo_tv_info_notEmpty,
       mem_M_arlock,
       mem_M_arvalid,
       mem_M_awlock,
       mem_M_awvalid,
       mem_M_bready,
       mem_M_rready,
       mem_M_wlast,
       mem_M_wvalid,
       mmio_M_arlock,
       mmio_M_arvalid,
       mmio_M_awlock,
       mmio_M_awvalid,
       mmio_M_bready,
       mmio_M_rready,
       mmio_M_wlast,
       mmio_M_wvalid,
       se_control_status_request_notFull,
       se_control_status_response_notEmpty,
       se_dmi_request_notFull,
       se_dmi_response_notEmpty;

   // ================================================================
   // ================================================================

   // Architecture Researcher plugs in their own RISC-V Core HERE.
   // Simplest cores contain just a CPU.
   // More complex cores can contain any or all of the following:
   //     Clock-crossing logic (to run core at slower speeds)
   //     Caches and MMUs
   //     CLINT (MMIO gadget for MTIME, MTIMECMP, MSIP, and generating timer and SW interrupts)
   //     PLIC    (Platform Level Interrupt Controller)
   //     CLIC    (Core Local Interrupt Controller)
   //     Boot ROM
   //     Debug Module
   //     ...

   // ================================================================
   // ================================================================

endmodule  // mkAWSteria_Core
