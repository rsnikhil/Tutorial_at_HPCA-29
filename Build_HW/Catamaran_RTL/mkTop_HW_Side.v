// Copyright (c) 2018-2022 Bluespec, Inc. All Rights Reserved

// Flags for verilator

`verilator_config
lint_off -rule WIDTH
lint_off -rule CASEINCOMPLETE
lint_off -rule STMTDLY
lint_off -rule INITIALDLY
lint_off -rule UNSIGNED
lint_off -rule CMPCONST
lint_off -rule MULTIDRIVEN
`verilog
// Copyright (c) 2018-2022 Bluespec, Inc. All Rights Reserved

// Hand-written System Verilog import statements for imported C functions

// ****************************************************************
// ****************************************************************
// ****************************************************************

// Functions to measure simulation speed

// ================================================================
// c_start_timing()
// Start the timing interval; argument is current cycle number.

import "DPI-C"
function void c_start_timing (longint unsigned  cycle_num);

// ================================================================
// c_end_timing()
// End the timing interval; argument is current cycle number,
// and print delta cycles, delta time and simulation speed.

import "DPI-C"
function void c_end_timing (longint unsigned  cycle_num);

// ****************************************************************
// ****************************************************************
// ****************************************************************

// Functions for console I/O

// ================================================================

import "DPI-C"
function  byte unsigned  c_trygetchar (byte unsigned  dummy);

// ****************************************************************
// ****************************************************************
// ****************************************************************

// Functions for Tandem Verification trace file output.

import "DPI-C"
function  int unsigned  c_trace_file_open (byte unsigned dummy);

import "DPI-C"
function  int unsigned  c_trace_file_load_byte_in_buffer (int unsigned  j, byte unsigned  data);

import "DPI-C"
function  int unsigned  c_trace_file_load_word64_in_buffer (int unsigned  byte_offset, longint unsigned  data);

import "DPI-C"
function  int unsigned  c_trace_file_write_buffer (int unsigned  n);

import "DPI-C"
function  int unsigned  c_trace_file_close (byte unsigned dummy);

// ****************************************************************
// ****************************************************************
// ****************************************************************

import "DPI-C"
function  void  c_host_listen (shortint  tcp_port);

import "DPI-C"
function  byte unsigned  c_host_try_accept (shortint  tcp_port);

import "DPI-C"
function  void  c_host_disconnect (byte unsigned  dummy);

// import "DPI-C"
// function  void  c_host_recv (int unsigned  data, byte unsigned  bytevec_size);

import "DPI-C"
function  byte unsigned  c_host_recv2 (byte unsigned  dummy);

import "DPI-C"
function  byte unsigned  c_host_recv_get_byte_j (int unsigned  j);

import "DPI-C"
function  byte unsigned  c_host_send_put_byte_j (int unsigned  j, byte unsigned x);

import "DPI-C"
function  void  c_host_send2 (byte unsigned  dummy);

// import "DPI-C"
// function  void  c_host_send (int unsigned  data, byte unsigned  bytevec_size);

// ****************************************************************
// ****************************************************************
// ****************************************************************
//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTop_HW_Side(CLK,
		     RST_N);
  input  CLK;
  input  RST_N;

  // register rg_counter
  reg [63 : 0] rg_counter;
  wire [63 : 0] rg_counter$D_IN;
  wire rg_counter$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule awsteria_hw
  wire [511 : 0] awsteria_hw$ddr_A_M_rdata,
		 awsteria_hw$ddr_A_M_wdata,
		 awsteria_hw$ddr_B_M_rdata,
		 awsteria_hw$ddr_B_M_wdata,
		 awsteria_hw$ddr_C_M_rdata,
		 awsteria_hw$ddr_C_M_wdata,
		 awsteria_hw$ddr_D_M_rdata,
		 awsteria_hw$ddr_D_M_wdata,
		 awsteria_hw$host_AXI4_S_rdata,
		 awsteria_hw$host_AXI4_S_wdata;
  wire [63 : 0] awsteria_hw$ddr_A_M_araddr,
		awsteria_hw$ddr_A_M_awaddr,
		awsteria_hw$ddr_A_M_wstrb,
		awsteria_hw$ddr_B_M_araddr,
		awsteria_hw$ddr_B_M_awaddr,
		awsteria_hw$ddr_B_M_wstrb,
		awsteria_hw$ddr_C_M_araddr,
		awsteria_hw$ddr_C_M_awaddr,
		awsteria_hw$ddr_C_M_wstrb,
		awsteria_hw$ddr_D_M_araddr,
		awsteria_hw$ddr_D_M_awaddr,
		awsteria_hw$ddr_D_M_wstrb,
		awsteria_hw$host_AXI4_S_araddr,
		awsteria_hw$host_AXI4_S_awaddr,
		awsteria_hw$host_AXI4_S_wstrb,
		awsteria_hw$m_glcount_glcount;
  wire [31 : 0] awsteria_hw$host_AXI4L_S_araddr,
		awsteria_hw$host_AXI4L_S_awaddr,
		awsteria_hw$host_AXI4L_S_rdata,
		awsteria_hw$host_AXI4L_S_wdata;
  wire [15 : 0] awsteria_hw$ddr_A_M_arid,
		awsteria_hw$ddr_A_M_awid,
		awsteria_hw$ddr_A_M_bid,
		awsteria_hw$ddr_A_M_rid,
		awsteria_hw$ddr_B_M_arid,
		awsteria_hw$ddr_B_M_awid,
		awsteria_hw$ddr_B_M_bid,
		awsteria_hw$ddr_B_M_rid,
		awsteria_hw$ddr_C_M_arid,
		awsteria_hw$ddr_C_M_awid,
		awsteria_hw$ddr_C_M_bid,
		awsteria_hw$ddr_C_M_rid,
		awsteria_hw$ddr_D_M_arid,
		awsteria_hw$ddr_D_M_awid,
		awsteria_hw$ddr_D_M_bid,
		awsteria_hw$ddr_D_M_rid,
		awsteria_hw$host_AXI4_S_arid,
		awsteria_hw$host_AXI4_S_awid,
		awsteria_hw$host_AXI4_S_bid,
		awsteria_hw$host_AXI4_S_rid;
  wire [7 : 0] awsteria_hw$ddr_A_M_arlen,
	       awsteria_hw$ddr_A_M_awlen,
	       awsteria_hw$ddr_B_M_arlen,
	       awsteria_hw$ddr_B_M_awlen,
	       awsteria_hw$ddr_C_M_arlen,
	       awsteria_hw$ddr_C_M_awlen,
	       awsteria_hw$ddr_D_M_arlen,
	       awsteria_hw$ddr_D_M_awlen,
	       awsteria_hw$host_AXI4_S_arlen,
	       awsteria_hw$host_AXI4_S_awlen;
  wire [3 : 0] awsteria_hw$ddr_A_M_arcache,
	       awsteria_hw$ddr_A_M_arqos,
	       awsteria_hw$ddr_A_M_arregion,
	       awsteria_hw$ddr_A_M_awcache,
	       awsteria_hw$ddr_A_M_awqos,
	       awsteria_hw$ddr_A_M_awregion,
	       awsteria_hw$ddr_B_M_arcache,
	       awsteria_hw$ddr_B_M_arqos,
	       awsteria_hw$ddr_B_M_arregion,
	       awsteria_hw$ddr_B_M_awcache,
	       awsteria_hw$ddr_B_M_awqos,
	       awsteria_hw$ddr_B_M_awregion,
	       awsteria_hw$ddr_C_M_arcache,
	       awsteria_hw$ddr_C_M_arqos,
	       awsteria_hw$ddr_C_M_arregion,
	       awsteria_hw$ddr_C_M_awcache,
	       awsteria_hw$ddr_C_M_awqos,
	       awsteria_hw$ddr_C_M_awregion,
	       awsteria_hw$ddr_D_M_arcache,
	       awsteria_hw$ddr_D_M_arqos,
	       awsteria_hw$ddr_D_M_arregion,
	       awsteria_hw$ddr_D_M_awcache,
	       awsteria_hw$ddr_D_M_awqos,
	       awsteria_hw$ddr_D_M_awregion,
	       awsteria_hw$host_AXI4L_S_wstrb,
	       awsteria_hw$host_AXI4_S_arcache,
	       awsteria_hw$host_AXI4_S_arqos,
	       awsteria_hw$host_AXI4_S_arregion,
	       awsteria_hw$host_AXI4_S_awcache,
	       awsteria_hw$host_AXI4_S_awqos,
	       awsteria_hw$host_AXI4_S_awregion;
  wire [2 : 0] awsteria_hw$ddr_A_M_arprot,
	       awsteria_hw$ddr_A_M_arsize,
	       awsteria_hw$ddr_A_M_awprot,
	       awsteria_hw$ddr_A_M_awsize,
	       awsteria_hw$ddr_B_M_arprot,
	       awsteria_hw$ddr_B_M_arsize,
	       awsteria_hw$ddr_B_M_awprot,
	       awsteria_hw$ddr_B_M_awsize,
	       awsteria_hw$ddr_C_M_arprot,
	       awsteria_hw$ddr_C_M_arsize,
	       awsteria_hw$ddr_C_M_awprot,
	       awsteria_hw$ddr_C_M_awsize,
	       awsteria_hw$ddr_D_M_arprot,
	       awsteria_hw$ddr_D_M_arsize,
	       awsteria_hw$ddr_D_M_awprot,
	       awsteria_hw$ddr_D_M_awsize,
	       awsteria_hw$host_AXI4L_S_arprot,
	       awsteria_hw$host_AXI4L_S_awprot,
	       awsteria_hw$host_AXI4_S_arprot,
	       awsteria_hw$host_AXI4_S_arsize,
	       awsteria_hw$host_AXI4_S_awprot,
	       awsteria_hw$host_AXI4_S_awsize;
  wire [1 : 0] awsteria_hw$ddr_A_M_arburst,
	       awsteria_hw$ddr_A_M_awburst,
	       awsteria_hw$ddr_A_M_bresp,
	       awsteria_hw$ddr_A_M_rresp,
	       awsteria_hw$ddr_B_M_arburst,
	       awsteria_hw$ddr_B_M_awburst,
	       awsteria_hw$ddr_B_M_bresp,
	       awsteria_hw$ddr_B_M_rresp,
	       awsteria_hw$ddr_C_M_arburst,
	       awsteria_hw$ddr_C_M_awburst,
	       awsteria_hw$ddr_C_M_bresp,
	       awsteria_hw$ddr_C_M_rresp,
	       awsteria_hw$ddr_D_M_arburst,
	       awsteria_hw$ddr_D_M_awburst,
	       awsteria_hw$ddr_D_M_bresp,
	       awsteria_hw$ddr_D_M_rresp,
	       awsteria_hw$host_AXI4L_S_bresp,
	       awsteria_hw$host_AXI4L_S_rresp,
	       awsteria_hw$host_AXI4_S_arburst,
	       awsteria_hw$host_AXI4_S_awburst,
	       awsteria_hw$host_AXI4_S_bresp,
	       awsteria_hw$host_AXI4_S_rresp;
  wire awsteria_hw$ddr_A_M_arlock,
       awsteria_hw$ddr_A_M_arready,
       awsteria_hw$ddr_A_M_arvalid,
       awsteria_hw$ddr_A_M_awlock,
       awsteria_hw$ddr_A_M_awready,
       awsteria_hw$ddr_A_M_awvalid,
       awsteria_hw$ddr_A_M_bready,
       awsteria_hw$ddr_A_M_bvalid,
       awsteria_hw$ddr_A_M_rlast,
       awsteria_hw$ddr_A_M_rready,
       awsteria_hw$ddr_A_M_rvalid,
       awsteria_hw$ddr_A_M_wlast,
       awsteria_hw$ddr_A_M_wready,
       awsteria_hw$ddr_A_M_wvalid,
       awsteria_hw$ddr_B_M_arlock,
       awsteria_hw$ddr_B_M_arready,
       awsteria_hw$ddr_B_M_arvalid,
       awsteria_hw$ddr_B_M_awlock,
       awsteria_hw$ddr_B_M_awready,
       awsteria_hw$ddr_B_M_awvalid,
       awsteria_hw$ddr_B_M_bready,
       awsteria_hw$ddr_B_M_bvalid,
       awsteria_hw$ddr_B_M_rlast,
       awsteria_hw$ddr_B_M_rready,
       awsteria_hw$ddr_B_M_rvalid,
       awsteria_hw$ddr_B_M_wlast,
       awsteria_hw$ddr_B_M_wready,
       awsteria_hw$ddr_B_M_wvalid,
       awsteria_hw$ddr_C_M_arlock,
       awsteria_hw$ddr_C_M_arready,
       awsteria_hw$ddr_C_M_arvalid,
       awsteria_hw$ddr_C_M_awlock,
       awsteria_hw$ddr_C_M_awready,
       awsteria_hw$ddr_C_M_awvalid,
       awsteria_hw$ddr_C_M_bready,
       awsteria_hw$ddr_C_M_bvalid,
       awsteria_hw$ddr_C_M_rlast,
       awsteria_hw$ddr_C_M_rready,
       awsteria_hw$ddr_C_M_rvalid,
       awsteria_hw$ddr_C_M_wlast,
       awsteria_hw$ddr_C_M_wready,
       awsteria_hw$ddr_C_M_wvalid,
       awsteria_hw$ddr_D_M_arlock,
       awsteria_hw$ddr_D_M_arready,
       awsteria_hw$ddr_D_M_arvalid,
       awsteria_hw$ddr_D_M_awlock,
       awsteria_hw$ddr_D_M_awready,
       awsteria_hw$ddr_D_M_awvalid,
       awsteria_hw$ddr_D_M_bready,
       awsteria_hw$ddr_D_M_bvalid,
       awsteria_hw$ddr_D_M_rlast,
       awsteria_hw$ddr_D_M_rready,
       awsteria_hw$ddr_D_M_rvalid,
       awsteria_hw$ddr_D_M_wlast,
       awsteria_hw$ddr_D_M_wready,
       awsteria_hw$ddr_D_M_wvalid,
       awsteria_hw$host_AXI4L_S_arready,
       awsteria_hw$host_AXI4L_S_arvalid,
       awsteria_hw$host_AXI4L_S_awready,
       awsteria_hw$host_AXI4L_S_awvalid,
       awsteria_hw$host_AXI4L_S_bready,
       awsteria_hw$host_AXI4L_S_bvalid,
       awsteria_hw$host_AXI4L_S_rready,
       awsteria_hw$host_AXI4L_S_rvalid,
       awsteria_hw$host_AXI4L_S_wready,
       awsteria_hw$host_AXI4L_S_wvalid,
       awsteria_hw$host_AXI4_S_arlock,
       awsteria_hw$host_AXI4_S_arready,
       awsteria_hw$host_AXI4_S_arvalid,
       awsteria_hw$host_AXI4_S_awlock,
       awsteria_hw$host_AXI4_S_awready,
       awsteria_hw$host_AXI4_S_awvalid,
       awsteria_hw$host_AXI4_S_bready,
       awsteria_hw$host_AXI4_S_bvalid,
       awsteria_hw$host_AXI4_S_rlast,
       awsteria_hw$host_AXI4_S_rready,
       awsteria_hw$host_AXI4_S_rvalid,
       awsteria_hw$host_AXI4_S_wlast,
       awsteria_hw$host_AXI4_S_wready,
       awsteria_hw$host_AXI4_S_wvalid,
       awsteria_hw$m_env_ready_env_ready,
       awsteria_hw$m_halted;

  // ports of submodule clkdiv1
  wire clkdiv1$CLK_OUT;

  // ports of submodule clkdiv2
  wire clkdiv2$CLK_OUT;

  // ports of submodule clkdiv3
  wire clkdiv3$CLK_OUT;

  // ports of submodule clkdiv4
  wire clkdiv4$CLK_OUT;

  // ports of submodule clkdiv5
  wire clkdiv5$CLK_OUT;

  // ports of submodule comms
  wire [631 : 0] comms$fi_C_to_BSV_bytevec_enq_x;
  wire [607 : 0] comms$fo_BSV_to_C_bytevec_first;
  wire [576 : 0] comms$fo_AXI4_Wr_Data_d512_u0_first;
  wire [530 : 0] comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x;
  wire [108 : 0] comms$fo_AXI4_Rd_Addr_i16_a64_u0_first,
		 comms$fo_AXI4_Wr_Addr_i16_a64_u0_first;
  wire [35 : 0] comms$fo_AXI4L_Wr_Data_d32_first;
  wire [34 : 0] comms$fo_AXI4L_Rd_Addr_a32_u0_first,
		comms$fo_AXI4L_Wr_Addr_a32_u0_first;
  wire [33 : 0] comms$fi_AXI4L_Rd_Data_d32_u0_enq_x;
  wire [17 : 0] comms$fi_AXI4_Wr_Resp_i16_u0_enq_x;
  wire [1 : 0] comms$fi_AXI4L_Wr_Resp_u0_enq_x;
  wire comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq,
       comms$EN_fi_AXI4L_Wr_Resp_u0_enq,
       comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq,
       comms$EN_fi_C_to_BSV_bytevec_enq,
       comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq,
       comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq,
       comms$EN_fo_AXI4L_Wr_Data_d32_deq,
       comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       comms$EN_fo_AXI4_Wr_Data_d512_u0_deq,
       comms$EN_fo_BSV_to_C_bytevec_deq,
       comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq,
       comms$RDY_fi_AXI4L_Wr_Resp_u0_enq,
       comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq,
       comms$RDY_fi_C_to_BSV_bytevec_enq,
       comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq,
       comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first,
       comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq,
       comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first,
       comms$RDY_fo_AXI4L_Wr_Data_d32_deq,
       comms$RDY_fo_AXI4L_Wr_Data_d32_first,
       comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first,
       comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first,
       comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq,
       comms$RDY_fo_AXI4_Wr_Data_d512_u0_first,
       comms$RDY_fo_BSV_to_C_bytevec_deq,
       comms$RDY_fo_BSV_to_C_bytevec_first;

  // ports of submodule ddr_A
  wire [511 : 0] ddr_A$rdata, ddr_A$wdata;
  wire [63 : 0] ddr_A$araddr, ddr_A$awaddr, ddr_A$wstrb;
  wire [15 : 0] ddr_A$arid, ddr_A$awid, ddr_A$bid, ddr_A$rid;
  wire [7 : 0] ddr_A$arlen, ddr_A$awlen;
  wire [3 : 0] ddr_A$arcache,
	       ddr_A$arqos,
	       ddr_A$arregion,
	       ddr_A$awcache,
	       ddr_A$awqos,
	       ddr_A$awregion;
  wire [2 : 0] ddr_A$arprot, ddr_A$arsize, ddr_A$awprot, ddr_A$awsize;
  wire [1 : 0] ddr_A$arburst, ddr_A$awburst, ddr_A$bresp, ddr_A$rresp;
  wire ddr_A$arlock,
       ddr_A$arready,
       ddr_A$arvalid,
       ddr_A$awlock,
       ddr_A$awready,
       ddr_A$awvalid,
       ddr_A$bready,
       ddr_A$bvalid,
       ddr_A$rlast,
       ddr_A$rready,
       ddr_A$rvalid,
       ddr_A$wlast,
       ddr_A$wready,
       ddr_A$wvalid;

  // ports of submodule ddr_B
  wire [511 : 0] ddr_B$rdata, ddr_B$wdata;
  wire [63 : 0] ddr_B$araddr, ddr_B$awaddr, ddr_B$wstrb;
  wire [15 : 0] ddr_B$arid, ddr_B$awid, ddr_B$bid, ddr_B$rid;
  wire [7 : 0] ddr_B$arlen, ddr_B$awlen;
  wire [3 : 0] ddr_B$arcache,
	       ddr_B$arqos,
	       ddr_B$arregion,
	       ddr_B$awcache,
	       ddr_B$awqos,
	       ddr_B$awregion;
  wire [2 : 0] ddr_B$arprot, ddr_B$arsize, ddr_B$awprot, ddr_B$awsize;
  wire [1 : 0] ddr_B$arburst, ddr_B$awburst, ddr_B$bresp, ddr_B$rresp;
  wire ddr_B$arlock,
       ddr_B$arready,
       ddr_B$arvalid,
       ddr_B$awlock,
       ddr_B$awready,
       ddr_B$awvalid,
       ddr_B$bready,
       ddr_B$bvalid,
       ddr_B$rlast,
       ddr_B$rready,
       ddr_B$rvalid,
       ddr_B$wlast,
       ddr_B$wready,
       ddr_B$wvalid;

  // ports of submodule ddr_C
  wire [511 : 0] ddr_C$rdata, ddr_C$wdata;
  wire [63 : 0] ddr_C$araddr, ddr_C$awaddr, ddr_C$wstrb;
  wire [15 : 0] ddr_C$arid, ddr_C$awid, ddr_C$bid, ddr_C$rid;
  wire [7 : 0] ddr_C$arlen, ddr_C$awlen;
  wire [3 : 0] ddr_C$arcache,
	       ddr_C$arqos,
	       ddr_C$arregion,
	       ddr_C$awcache,
	       ddr_C$awqos,
	       ddr_C$awregion;
  wire [2 : 0] ddr_C$arprot, ddr_C$arsize, ddr_C$awprot, ddr_C$awsize;
  wire [1 : 0] ddr_C$arburst, ddr_C$awburst, ddr_C$bresp, ddr_C$rresp;
  wire ddr_C$arlock,
       ddr_C$arready,
       ddr_C$arvalid,
       ddr_C$awlock,
       ddr_C$awready,
       ddr_C$awvalid,
       ddr_C$bready,
       ddr_C$bvalid,
       ddr_C$rlast,
       ddr_C$rready,
       ddr_C$rvalid,
       ddr_C$wlast,
       ddr_C$wready,
       ddr_C$wvalid;

  // ports of submodule ddr_D
  wire [511 : 0] ddr_D$rdata, ddr_D$wdata;
  wire [63 : 0] ddr_D$araddr, ddr_D$awaddr, ddr_D$wstrb;
  wire [15 : 0] ddr_D$arid, ddr_D$awid, ddr_D$bid, ddr_D$rid;
  wire [7 : 0] ddr_D$arlen, ddr_D$awlen;
  wire [3 : 0] ddr_D$arcache,
	       ddr_D$arqos,
	       ddr_D$arregion,
	       ddr_D$awcache,
	       ddr_D$awqos,
	       ddr_D$awregion;
  wire [2 : 0] ddr_D$arprot, ddr_D$arsize, ddr_D$awprot, ddr_D$awsize;
  wire [1 : 0] ddr_D$arburst, ddr_D$awburst, ddr_D$bresp, ddr_D$rresp;
  wire ddr_D$arlock,
       ddr_D$arready,
       ddr_D$arvalid,
       ddr_D$awlock,
       ddr_D$awready,
       ddr_D$awvalid,
       ddr_D$bready,
       ddr_D$bvalid,
       ddr_D$rlast,
       ddr_D$rready,
       ddr_D$rvalid,
       ddr_D$wlast,
       ddr_D$wready,
       ddr_D$wvalid;

  // ports of submodule host_AXI4L_xactor_f_rd_addr
  wire [34 : 0] host_AXI4L_xactor_f_rd_addr$D_IN,
		host_AXI4L_xactor_f_rd_addr$D_OUT;
  wire host_AXI4L_xactor_f_rd_addr$CLR,
       host_AXI4L_xactor_f_rd_addr$DEQ,
       host_AXI4L_xactor_f_rd_addr$EMPTY_N,
       host_AXI4L_xactor_f_rd_addr$ENQ,
       host_AXI4L_xactor_f_rd_addr$FULL_N;

  // ports of submodule host_AXI4L_xactor_f_rd_data
  wire [33 : 0] host_AXI4L_xactor_f_rd_data$D_IN,
		host_AXI4L_xactor_f_rd_data$D_OUT;
  wire host_AXI4L_xactor_f_rd_data$CLR,
       host_AXI4L_xactor_f_rd_data$DEQ,
       host_AXI4L_xactor_f_rd_data$EMPTY_N,
       host_AXI4L_xactor_f_rd_data$ENQ,
       host_AXI4L_xactor_f_rd_data$FULL_N;

  // ports of submodule host_AXI4L_xactor_f_wr_addr
  wire [34 : 0] host_AXI4L_xactor_f_wr_addr$D_IN,
		host_AXI4L_xactor_f_wr_addr$D_OUT;
  wire host_AXI4L_xactor_f_wr_addr$CLR,
       host_AXI4L_xactor_f_wr_addr$DEQ,
       host_AXI4L_xactor_f_wr_addr$EMPTY_N,
       host_AXI4L_xactor_f_wr_addr$ENQ,
       host_AXI4L_xactor_f_wr_addr$FULL_N;

  // ports of submodule host_AXI4L_xactor_f_wr_data
  wire [35 : 0] host_AXI4L_xactor_f_wr_data$D_IN,
		host_AXI4L_xactor_f_wr_data$D_OUT;
  wire host_AXI4L_xactor_f_wr_data$CLR,
       host_AXI4L_xactor_f_wr_data$DEQ,
       host_AXI4L_xactor_f_wr_data$EMPTY_N,
       host_AXI4L_xactor_f_wr_data$ENQ,
       host_AXI4L_xactor_f_wr_data$FULL_N;

  // ports of submodule host_AXI4L_xactor_f_wr_resp
  wire [1 : 0] host_AXI4L_xactor_f_wr_resp$D_IN,
	       host_AXI4L_xactor_f_wr_resp$D_OUT;
  wire host_AXI4L_xactor_f_wr_resp$CLR,
       host_AXI4L_xactor_f_wr_resp$DEQ,
       host_AXI4L_xactor_f_wr_resp$EMPTY_N,
       host_AXI4L_xactor_f_wr_resp$ENQ,
       host_AXI4L_xactor_f_wr_resp$FULL_N;

  // ports of submodule host_AXI4_xactor_f_rd_addr
  wire [108 : 0] host_AXI4_xactor_f_rd_addr$D_IN,
		 host_AXI4_xactor_f_rd_addr$D_OUT;
  wire host_AXI4_xactor_f_rd_addr$CLR,
       host_AXI4_xactor_f_rd_addr$DEQ,
       host_AXI4_xactor_f_rd_addr$EMPTY_N,
       host_AXI4_xactor_f_rd_addr$ENQ,
       host_AXI4_xactor_f_rd_addr$FULL_N;

  // ports of submodule host_AXI4_xactor_f_rd_data
  wire [530 : 0] host_AXI4_xactor_f_rd_data$D_IN,
		 host_AXI4_xactor_f_rd_data$D_OUT;
  wire host_AXI4_xactor_f_rd_data$CLR,
       host_AXI4_xactor_f_rd_data$DEQ,
       host_AXI4_xactor_f_rd_data$EMPTY_N,
       host_AXI4_xactor_f_rd_data$ENQ,
       host_AXI4_xactor_f_rd_data$FULL_N;

  // ports of submodule host_AXI4_xactor_f_wr_addr
  wire [108 : 0] host_AXI4_xactor_f_wr_addr$D_IN,
		 host_AXI4_xactor_f_wr_addr$D_OUT;
  wire host_AXI4_xactor_f_wr_addr$CLR,
       host_AXI4_xactor_f_wr_addr$DEQ,
       host_AXI4_xactor_f_wr_addr$EMPTY_N,
       host_AXI4_xactor_f_wr_addr$ENQ,
       host_AXI4_xactor_f_wr_addr$FULL_N;

  // ports of submodule host_AXI4_xactor_f_wr_data
  wire [576 : 0] host_AXI4_xactor_f_wr_data$D_IN,
		 host_AXI4_xactor_f_wr_data$D_OUT;
  wire host_AXI4_xactor_f_wr_data$CLR,
       host_AXI4_xactor_f_wr_data$DEQ,
       host_AXI4_xactor_f_wr_data$EMPTY_N,
       host_AXI4_xactor_f_wr_data$ENQ,
       host_AXI4_xactor_f_wr_data$FULL_N;

  // ports of submodule host_AXI4_xactor_f_wr_resp
  wire [17 : 0] host_AXI4_xactor_f_wr_resp$D_IN,
		host_AXI4_xactor_f_wr_resp$D_OUT;
  wire host_AXI4_xactor_f_wr_resp$CLR,
       host_AXI4_xactor_f_wr_resp$DEQ,
       host_AXI4_xactor_f_wr_resp$EMPTY_N,
       host_AXI4_xactor_f_wr_resp$ENQ,
       host_AXI4_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_accept,
       CAN_FIRE_RL_rl_connect_host_AXI4L_rd_addr,
       CAN_FIRE_RL_rl_connect_host_AXI4L_rd_data,
       CAN_FIRE_RL_rl_connect_host_AXI4L_wr_addr,
       CAN_FIRE_RL_rl_connect_host_AXI4L_wr_data,
       CAN_FIRE_RL_rl_connect_host_AXI4L_wr_resp,
       CAN_FIRE_RL_rl_connect_host_AXI4_rd_addr,
       CAN_FIRE_RL_rl_connect_host_AXI4_rd_data,
       CAN_FIRE_RL_rl_connect_host_AXI4_wr_addr,
       CAN_FIRE_RL_rl_connect_host_AXI4_wr_data,
       CAN_FIRE_RL_rl_connect_host_AXI4_wr_resp,
       CAN_FIRE_RL_rl_host_recv,
       CAN_FIRE_RL_rl_host_send,
       CAN_FIRE_RL_rl_listen,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_addr_channel_2,
       CAN_FIRE_RL_rl_rd_addr_channel_3,
       CAN_FIRE_RL_rl_rd_addr_channel_4,
       CAN_FIRE_RL_rl_rd_addr_channel_5,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel_2,
       CAN_FIRE_RL_rl_rd_data_channel_3,
       CAN_FIRE_RL_rl_rd_data_channel_4,
       CAN_FIRE_RL_rl_rd_data_channel_5,
       CAN_FIRE_RL_rl_start,
       CAN_FIRE_RL_rl_status_signals,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel_2,
       CAN_FIRE_RL_rl_wr_addr_channel_3,
       CAN_FIRE_RL_rl_wr_addr_channel_4,
       CAN_FIRE_RL_rl_wr_addr_channel_5,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel_2,
       CAN_FIRE_RL_rl_wr_data_channel_3,
       CAN_FIRE_RL_rl_wr_data_channel_4,
       CAN_FIRE_RL_rl_wr_data_channel_5,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel_2,
       CAN_FIRE_RL_rl_wr_response_channel_3,
       CAN_FIRE_RL_rl_wr_response_channel_4,
       CAN_FIRE_RL_rl_wr_response_channel_5,
       WILL_FIRE_RL_rl_accept,
       WILL_FIRE_RL_rl_connect_host_AXI4L_rd_addr,
       WILL_FIRE_RL_rl_connect_host_AXI4L_rd_data,
       WILL_FIRE_RL_rl_connect_host_AXI4L_wr_addr,
       WILL_FIRE_RL_rl_connect_host_AXI4L_wr_data,
       WILL_FIRE_RL_rl_connect_host_AXI4L_wr_resp,
       WILL_FIRE_RL_rl_connect_host_AXI4_rd_addr,
       WILL_FIRE_RL_rl_connect_host_AXI4_rd_data,
       WILL_FIRE_RL_rl_connect_host_AXI4_wr_addr,
       WILL_FIRE_RL_rl_connect_host_AXI4_wr_data,
       WILL_FIRE_RL_rl_connect_host_AXI4_wr_resp,
       WILL_FIRE_RL_rl_host_recv,
       WILL_FIRE_RL_rl_host_send,
       WILL_FIRE_RL_rl_listen,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_addr_channel_2,
       WILL_FIRE_RL_rl_rd_addr_channel_3,
       WILL_FIRE_RL_rl_rd_addr_channel_4,
       WILL_FIRE_RL_rl_rd_addr_channel_5,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel_2,
       WILL_FIRE_RL_rl_rd_data_channel_3,
       WILL_FIRE_RL_rl_rd_data_channel_4,
       WILL_FIRE_RL_rl_rd_data_channel_5,
       WILL_FIRE_RL_rl_start,
       WILL_FIRE_RL_rl_status_signals,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel_2,
       WILL_FIRE_RL_rl_wr_addr_channel_3,
       WILL_FIRE_RL_rl_wr_addr_channel_4,
       WILL_FIRE_RL_rl_wr_addr_channel_5,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel_2,
       WILL_FIRE_RL_rl_wr_data_channel_3,
       WILL_FIRE_RL_rl_wr_data_channel_4,
       WILL_FIRE_RL_rl_wr_data_channel_5,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel_2,
       WILL_FIRE_RL_rl_wr_response_channel_3,
       WILL_FIRE_RL_rl_wr_response_channel_4,
       WILL_FIRE_RL_rl_wr_response_channel_5;

  // inputs to muxes for submodule ports
  wire MUX_rg_state$write_1__SEL_1;

  // declarations used by system tasks
  // synopsys translate_off
  reg [7 : 0] v__h6007;
  reg [7 : 0] v__h6339;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d189;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d308;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d306;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d305;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d303;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d302;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d300;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d299;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d297;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d296;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d294;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d293;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d291;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d290;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d288;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d287;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d285;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d284;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d282;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d281;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d279;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d278;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d276;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d275;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d273;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d272;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d270;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d269;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d267;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d266;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d264;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d263;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d261;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d260;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d258;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d257;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d255;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d254;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d252;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d251;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d249;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d248;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d246;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d245;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d243;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d242;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d240;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d239;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d237;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d236;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d234;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d233;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d231;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d230;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d228;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d227;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d225;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d224;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d222;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d221;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d219;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d218;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d216;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d215;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d213;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d212;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d210;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d209;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d207;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d206;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d204;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d203;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d201;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d200;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d198;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d197;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d195;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d194;
  reg [7 : 0] TASK_c_host_recv_get_byte_j___d193;
  reg [7 : 0] v__h20069;
  reg [7 : 0] v__h21763;
  reg [7 : 0] v__h21841;
  reg [7 : 0] v__h21919;
  reg [7 : 0] v__h21997;
  reg [7 : 0] v__h22075;
  reg [7 : 0] v__h22153;
  reg [7 : 0] v__h22231;
  reg [7 : 0] v__h22309;
  reg [7 : 0] v__h22387;
  reg [7 : 0] v__h22465;
  reg [7 : 0] v__h22543;
  reg [7 : 0] v__h22621;
  reg [7 : 0] v__h22699;
  reg [7 : 0] v__h22777;
  reg [7 : 0] v__h22855;
  reg [7 : 0] v__h22933;
  reg [7 : 0] v__h23011;
  reg [7 : 0] v__h23089;
  reg [7 : 0] v__h23167;
  reg [7 : 0] v__h23245;
  reg [7 : 0] v__h23323;
  reg [7 : 0] v__h23401;
  reg [7 : 0] v__h23479;
  reg [7 : 0] v__h23557;
  reg [7 : 0] v__h23635;
  reg [7 : 0] v__h23713;
  reg [7 : 0] v__h23791;
  reg [7 : 0] v__h23869;
  reg [7 : 0] v__h23947;
  reg [7 : 0] v__h24025;
  reg [7 : 0] v__h24103;
  reg [7 : 0] v__h24181;
  reg [7 : 0] v__h24259;
  reg [7 : 0] v__h24337;
  reg [7 : 0] v__h24415;
  reg [7 : 0] v__h24493;
  reg [7 : 0] v__h24571;
  reg [7 : 0] v__h24649;
  reg [7 : 0] v__h24727;
  reg [7 : 0] v__h24805;
  reg [7 : 0] v__h24883;
  reg [7 : 0] v__h24961;
  reg [7 : 0] v__h25039;
  reg [7 : 0] v__h25117;
  reg [7 : 0] v__h25195;
  reg [7 : 0] v__h25273;
  reg [7 : 0] v__h25351;
  reg [7 : 0] v__h25429;
  reg [7 : 0] v__h25507;
  reg [7 : 0] v__h25585;
  reg [7 : 0] v__h25663;
  reg [7 : 0] v__h25741;
  reg [7 : 0] v__h25819;
  reg [7 : 0] v__h25897;
  reg [7 : 0] v__h25975;
  reg [7 : 0] v__h26053;
  reg [7 : 0] v__h26131;
  reg [7 : 0] v__h26209;
  reg [7 : 0] v__h26287;
  reg [7 : 0] v__h26365;
  reg [7 : 0] v__h26443;
  reg [7 : 0] v__h26521;
  reg [7 : 0] v__h26599;
  reg [7 : 0] v__h26677;
  reg [7 : 0] v__h26755;
  reg [7 : 0] v__h26833;
  reg [7 : 0] v__h26911;
  reg [7 : 0] v__h26989;
  reg [7 : 0] v__h27067;
  reg [7 : 0] v__h27145;
  reg [7 : 0] v__h27223;
  reg [7 : 0] v__h27301;
  reg [7 : 0] v__h27379;
  reg [7 : 0] v__h27457;
  reg [7 : 0] v__h27535;
  reg [7 : 0] v__h24253;
  reg [7 : 0] v__h21757;
  reg [7 : 0] v__h21835;
  reg [7 : 0] v__h21913;
  reg [7 : 0] v__h21991;
  reg [7 : 0] v__h22069;
  reg [7 : 0] v__h22147;
  reg [7 : 0] v__h22225;
  reg [7 : 0] v__h22303;
  reg [7 : 0] v__h22381;
  reg [7 : 0] v__h22459;
  reg [7 : 0] v__h22537;
  reg [7 : 0] v__h22615;
  reg [7 : 0] v__h22693;
  reg [7 : 0] v__h22771;
  reg [7 : 0] v__h22849;
  reg [7 : 0] v__h22927;
  reg [7 : 0] v__h23005;
  reg [7 : 0] v__h23083;
  reg [7 : 0] v__h23161;
  reg [7 : 0] v__h23239;
  reg [7 : 0] v__h23317;
  reg [7 : 0] v__h23395;
  reg [7 : 0] v__h23473;
  reg [7 : 0] v__h23551;
  reg [7 : 0] v__h23629;
  reg [7 : 0] v__h23707;
  reg [7 : 0] v__h23785;
  reg [7 : 0] v__h23863;
  reg [7 : 0] v__h23941;
  reg [7 : 0] v__h24019;
  reg [7 : 0] v__h24097;
  reg [7 : 0] v__h24175;
  reg [7 : 0] v__h24331;
  reg [7 : 0] v__h24409;
  reg [7 : 0] v__h24487;
  reg [7 : 0] v__h24565;
  reg [7 : 0] v__h24643;
  reg [7 : 0] v__h24721;
  reg [7 : 0] v__h24799;
  reg [7 : 0] v__h24877;
  reg [7 : 0] v__h24955;
  reg [7 : 0] v__h25033;
  reg [7 : 0] v__h25111;
  reg [7 : 0] v__h25189;
  reg [7 : 0] v__h25267;
  reg [7 : 0] v__h25345;
  reg [7 : 0] v__h25423;
  reg [7 : 0] v__h25501;
  reg [7 : 0] v__h25579;
  reg [7 : 0] v__h25657;
  reg [7 : 0] v__h25735;
  reg [7 : 0] v__h25813;
  reg [7 : 0] v__h25891;
  reg [7 : 0] v__h25969;
  reg [7 : 0] v__h26047;
  reg [7 : 0] v__h26125;
  reg [7 : 0] v__h26203;
  reg [7 : 0] v__h26281;
  reg [7 : 0] v__h26359;
  reg [7 : 0] v__h26437;
  reg [7 : 0] v__h26515;
  reg [7 : 0] v__h26593;
  reg [7 : 0] v__h26671;
  reg [7 : 0] v__h26749;
  reg [7 : 0] v__h26827;
  reg [7 : 0] v__h26905;
  reg [7 : 0] v__h26983;
  reg [7 : 0] v__h27061;
  reg [7 : 0] v__h27139;
  reg [7 : 0] v__h27217;
  reg [7 : 0] v__h27295;
  reg [7 : 0] v__h27373;
  reg [7 : 0] v__h27451;
  reg [7 : 0] v__h20052;
  // synopsys translate_on

  // remaining internal signals
  wire [7 : 0] x__h8555;

  // submodule awsteria_hw
  mkAWSteria_HW awsteria_hw(.CLK_clk1(clkdiv1$CLK_OUT),
			    .CLK_clk2(clkdiv2$CLK_OUT),
			    .CLK_clk3(clkdiv3$CLK_OUT),
			    .CLK_clk4(clkdiv4$CLK_OUT),
			    .CLK_clk5(clkdiv5$CLK_OUT),
			    .CLK(CLK),
			    .RST_N(RST_N),
			    .ddr_A_M_arready(awsteria_hw$ddr_A_M_arready),
			    .ddr_A_M_awready(awsteria_hw$ddr_A_M_awready),
			    .ddr_A_M_bid(awsteria_hw$ddr_A_M_bid),
			    .ddr_A_M_bresp(awsteria_hw$ddr_A_M_bresp),
			    .ddr_A_M_bvalid(awsteria_hw$ddr_A_M_bvalid),
			    .ddr_A_M_rdata(awsteria_hw$ddr_A_M_rdata),
			    .ddr_A_M_rid(awsteria_hw$ddr_A_M_rid),
			    .ddr_A_M_rlast(awsteria_hw$ddr_A_M_rlast),
			    .ddr_A_M_rresp(awsteria_hw$ddr_A_M_rresp),
			    .ddr_A_M_rvalid(awsteria_hw$ddr_A_M_rvalid),
			    .ddr_A_M_wready(awsteria_hw$ddr_A_M_wready),
			    .ddr_B_M_arready(awsteria_hw$ddr_B_M_arready),
			    .ddr_B_M_awready(awsteria_hw$ddr_B_M_awready),
			    .ddr_B_M_bid(awsteria_hw$ddr_B_M_bid),
			    .ddr_B_M_bresp(awsteria_hw$ddr_B_M_bresp),
			    .ddr_B_M_bvalid(awsteria_hw$ddr_B_M_bvalid),
			    .ddr_B_M_rdata(awsteria_hw$ddr_B_M_rdata),
			    .ddr_B_M_rid(awsteria_hw$ddr_B_M_rid),
			    .ddr_B_M_rlast(awsteria_hw$ddr_B_M_rlast),
			    .ddr_B_M_rresp(awsteria_hw$ddr_B_M_rresp),
			    .ddr_B_M_rvalid(awsteria_hw$ddr_B_M_rvalid),
			    .ddr_B_M_wready(awsteria_hw$ddr_B_M_wready),
			    .ddr_C_M_arready(awsteria_hw$ddr_C_M_arready),
			    .ddr_C_M_awready(awsteria_hw$ddr_C_M_awready),
			    .ddr_C_M_bid(awsteria_hw$ddr_C_M_bid),
			    .ddr_C_M_bresp(awsteria_hw$ddr_C_M_bresp),
			    .ddr_C_M_bvalid(awsteria_hw$ddr_C_M_bvalid),
			    .ddr_C_M_rdata(awsteria_hw$ddr_C_M_rdata),
			    .ddr_C_M_rid(awsteria_hw$ddr_C_M_rid),
			    .ddr_C_M_rlast(awsteria_hw$ddr_C_M_rlast),
			    .ddr_C_M_rresp(awsteria_hw$ddr_C_M_rresp),
			    .ddr_C_M_rvalid(awsteria_hw$ddr_C_M_rvalid),
			    .ddr_C_M_wready(awsteria_hw$ddr_C_M_wready),
			    .ddr_D_M_arready(awsteria_hw$ddr_D_M_arready),
			    .ddr_D_M_awready(awsteria_hw$ddr_D_M_awready),
			    .ddr_D_M_bid(awsteria_hw$ddr_D_M_bid),
			    .ddr_D_M_bresp(awsteria_hw$ddr_D_M_bresp),
			    .ddr_D_M_bvalid(awsteria_hw$ddr_D_M_bvalid),
			    .ddr_D_M_rdata(awsteria_hw$ddr_D_M_rdata),
			    .ddr_D_M_rid(awsteria_hw$ddr_D_M_rid),
			    .ddr_D_M_rlast(awsteria_hw$ddr_D_M_rlast),
			    .ddr_D_M_rresp(awsteria_hw$ddr_D_M_rresp),
			    .ddr_D_M_rvalid(awsteria_hw$ddr_D_M_rvalid),
			    .ddr_D_M_wready(awsteria_hw$ddr_D_M_wready),
			    .host_AXI4L_S_araddr(awsteria_hw$host_AXI4L_S_araddr),
			    .host_AXI4L_S_arprot(awsteria_hw$host_AXI4L_S_arprot),
			    .host_AXI4L_S_arvalid(awsteria_hw$host_AXI4L_S_arvalid),
			    .host_AXI4L_S_awaddr(awsteria_hw$host_AXI4L_S_awaddr),
			    .host_AXI4L_S_awprot(awsteria_hw$host_AXI4L_S_awprot),
			    .host_AXI4L_S_awvalid(awsteria_hw$host_AXI4L_S_awvalid),
			    .host_AXI4L_S_bready(awsteria_hw$host_AXI4L_S_bready),
			    .host_AXI4L_S_rready(awsteria_hw$host_AXI4L_S_rready),
			    .host_AXI4L_S_wdata(awsteria_hw$host_AXI4L_S_wdata),
			    .host_AXI4L_S_wstrb(awsteria_hw$host_AXI4L_S_wstrb),
			    .host_AXI4L_S_wvalid(awsteria_hw$host_AXI4L_S_wvalid),
			    .host_AXI4_S_araddr(awsteria_hw$host_AXI4_S_araddr),
			    .host_AXI4_S_arburst(awsteria_hw$host_AXI4_S_arburst),
			    .host_AXI4_S_arcache(awsteria_hw$host_AXI4_S_arcache),
			    .host_AXI4_S_arid(awsteria_hw$host_AXI4_S_arid),
			    .host_AXI4_S_arlen(awsteria_hw$host_AXI4_S_arlen),
			    .host_AXI4_S_arlock(awsteria_hw$host_AXI4_S_arlock),
			    .host_AXI4_S_arprot(awsteria_hw$host_AXI4_S_arprot),
			    .host_AXI4_S_arqos(awsteria_hw$host_AXI4_S_arqos),
			    .host_AXI4_S_arregion(awsteria_hw$host_AXI4_S_arregion),
			    .host_AXI4_S_arsize(awsteria_hw$host_AXI4_S_arsize),
			    .host_AXI4_S_arvalid(awsteria_hw$host_AXI4_S_arvalid),
			    .host_AXI4_S_awaddr(awsteria_hw$host_AXI4_S_awaddr),
			    .host_AXI4_S_awburst(awsteria_hw$host_AXI4_S_awburst),
			    .host_AXI4_S_awcache(awsteria_hw$host_AXI4_S_awcache),
			    .host_AXI4_S_awid(awsteria_hw$host_AXI4_S_awid),
			    .host_AXI4_S_awlen(awsteria_hw$host_AXI4_S_awlen),
			    .host_AXI4_S_awlock(awsteria_hw$host_AXI4_S_awlock),
			    .host_AXI4_S_awprot(awsteria_hw$host_AXI4_S_awprot),
			    .host_AXI4_S_awqos(awsteria_hw$host_AXI4_S_awqos),
			    .host_AXI4_S_awregion(awsteria_hw$host_AXI4_S_awregion),
			    .host_AXI4_S_awsize(awsteria_hw$host_AXI4_S_awsize),
			    .host_AXI4_S_awvalid(awsteria_hw$host_AXI4_S_awvalid),
			    .host_AXI4_S_bready(awsteria_hw$host_AXI4_S_bready),
			    .host_AXI4_S_rready(awsteria_hw$host_AXI4_S_rready),
			    .host_AXI4_S_wdata(awsteria_hw$host_AXI4_S_wdata),
			    .host_AXI4_S_wlast(awsteria_hw$host_AXI4_S_wlast),
			    .host_AXI4_S_wstrb(awsteria_hw$host_AXI4_S_wstrb),
			    .host_AXI4_S_wvalid(awsteria_hw$host_AXI4_S_wvalid),
			    .m_env_ready_env_ready(awsteria_hw$m_env_ready_env_ready),
			    .m_glcount_glcount(awsteria_hw$m_glcount_glcount),
			    .host_AXI4_S_awready(awsteria_hw$host_AXI4_S_awready),
			    .host_AXI4_S_wready(awsteria_hw$host_AXI4_S_wready),
			    .host_AXI4_S_bvalid(awsteria_hw$host_AXI4_S_bvalid),
			    .host_AXI4_S_bid(awsteria_hw$host_AXI4_S_bid),
			    .host_AXI4_S_bresp(awsteria_hw$host_AXI4_S_bresp),
			    .host_AXI4_S_arready(awsteria_hw$host_AXI4_S_arready),
			    .host_AXI4_S_rvalid(awsteria_hw$host_AXI4_S_rvalid),
			    .host_AXI4_S_rid(awsteria_hw$host_AXI4_S_rid),
			    .host_AXI4_S_rdata(awsteria_hw$host_AXI4_S_rdata),
			    .host_AXI4_S_rresp(awsteria_hw$host_AXI4_S_rresp),
			    .host_AXI4_S_rlast(awsteria_hw$host_AXI4_S_rlast),
			    .host_AXI4L_S_awready(awsteria_hw$host_AXI4L_S_awready),
			    .host_AXI4L_S_wready(awsteria_hw$host_AXI4L_S_wready),
			    .host_AXI4L_S_bvalid(awsteria_hw$host_AXI4L_S_bvalid),
			    .host_AXI4L_S_bresp(awsteria_hw$host_AXI4L_S_bresp),
			    .host_AXI4L_S_arready(awsteria_hw$host_AXI4L_S_arready),
			    .host_AXI4L_S_rvalid(awsteria_hw$host_AXI4L_S_rvalid),
			    .host_AXI4L_S_rresp(awsteria_hw$host_AXI4L_S_rresp),
			    .host_AXI4L_S_rdata(awsteria_hw$host_AXI4L_S_rdata),
			    .ddr_A_M_awvalid(awsteria_hw$ddr_A_M_awvalid),
			    .ddr_A_M_awid(awsteria_hw$ddr_A_M_awid),
			    .ddr_A_M_awaddr(awsteria_hw$ddr_A_M_awaddr),
			    .ddr_A_M_awlen(awsteria_hw$ddr_A_M_awlen),
			    .ddr_A_M_awsize(awsteria_hw$ddr_A_M_awsize),
			    .ddr_A_M_awburst(awsteria_hw$ddr_A_M_awburst),
			    .ddr_A_M_awlock(awsteria_hw$ddr_A_M_awlock),
			    .ddr_A_M_awcache(awsteria_hw$ddr_A_M_awcache),
			    .ddr_A_M_awprot(awsteria_hw$ddr_A_M_awprot),
			    .ddr_A_M_awqos(awsteria_hw$ddr_A_M_awqos),
			    .ddr_A_M_awregion(awsteria_hw$ddr_A_M_awregion),
			    .ddr_A_M_wvalid(awsteria_hw$ddr_A_M_wvalid),
			    .ddr_A_M_wdata(awsteria_hw$ddr_A_M_wdata),
			    .ddr_A_M_wstrb(awsteria_hw$ddr_A_M_wstrb),
			    .ddr_A_M_wlast(awsteria_hw$ddr_A_M_wlast),
			    .ddr_A_M_bready(awsteria_hw$ddr_A_M_bready),
			    .ddr_A_M_arvalid(awsteria_hw$ddr_A_M_arvalid),
			    .ddr_A_M_arid(awsteria_hw$ddr_A_M_arid),
			    .ddr_A_M_araddr(awsteria_hw$ddr_A_M_araddr),
			    .ddr_A_M_arlen(awsteria_hw$ddr_A_M_arlen),
			    .ddr_A_M_arsize(awsteria_hw$ddr_A_M_arsize),
			    .ddr_A_M_arburst(awsteria_hw$ddr_A_M_arburst),
			    .ddr_A_M_arlock(awsteria_hw$ddr_A_M_arlock),
			    .ddr_A_M_arcache(awsteria_hw$ddr_A_M_arcache),
			    .ddr_A_M_arprot(awsteria_hw$ddr_A_M_arprot),
			    .ddr_A_M_arqos(awsteria_hw$ddr_A_M_arqos),
			    .ddr_A_M_arregion(awsteria_hw$ddr_A_M_arregion),
			    .ddr_A_M_rready(awsteria_hw$ddr_A_M_rready),
			    .ddr_B_M_awvalid(awsteria_hw$ddr_B_M_awvalid),
			    .ddr_B_M_awid(awsteria_hw$ddr_B_M_awid),
			    .ddr_B_M_awaddr(awsteria_hw$ddr_B_M_awaddr),
			    .ddr_B_M_awlen(awsteria_hw$ddr_B_M_awlen),
			    .ddr_B_M_awsize(awsteria_hw$ddr_B_M_awsize),
			    .ddr_B_M_awburst(awsteria_hw$ddr_B_M_awburst),
			    .ddr_B_M_awlock(awsteria_hw$ddr_B_M_awlock),
			    .ddr_B_M_awcache(awsteria_hw$ddr_B_M_awcache),
			    .ddr_B_M_awprot(awsteria_hw$ddr_B_M_awprot),
			    .ddr_B_M_awqos(awsteria_hw$ddr_B_M_awqos),
			    .ddr_B_M_awregion(awsteria_hw$ddr_B_M_awregion),
			    .ddr_B_M_wvalid(awsteria_hw$ddr_B_M_wvalid),
			    .ddr_B_M_wdata(awsteria_hw$ddr_B_M_wdata),
			    .ddr_B_M_wstrb(awsteria_hw$ddr_B_M_wstrb),
			    .ddr_B_M_wlast(awsteria_hw$ddr_B_M_wlast),
			    .ddr_B_M_bready(awsteria_hw$ddr_B_M_bready),
			    .ddr_B_M_arvalid(awsteria_hw$ddr_B_M_arvalid),
			    .ddr_B_M_arid(awsteria_hw$ddr_B_M_arid),
			    .ddr_B_M_araddr(awsteria_hw$ddr_B_M_araddr),
			    .ddr_B_M_arlen(awsteria_hw$ddr_B_M_arlen),
			    .ddr_B_M_arsize(awsteria_hw$ddr_B_M_arsize),
			    .ddr_B_M_arburst(awsteria_hw$ddr_B_M_arburst),
			    .ddr_B_M_arlock(awsteria_hw$ddr_B_M_arlock),
			    .ddr_B_M_arcache(awsteria_hw$ddr_B_M_arcache),
			    .ddr_B_M_arprot(awsteria_hw$ddr_B_M_arprot),
			    .ddr_B_M_arqos(awsteria_hw$ddr_B_M_arqos),
			    .ddr_B_M_arregion(awsteria_hw$ddr_B_M_arregion),
			    .ddr_B_M_rready(awsteria_hw$ddr_B_M_rready),
			    .ddr_C_M_awvalid(awsteria_hw$ddr_C_M_awvalid),
			    .ddr_C_M_awid(awsteria_hw$ddr_C_M_awid),
			    .ddr_C_M_awaddr(awsteria_hw$ddr_C_M_awaddr),
			    .ddr_C_M_awlen(awsteria_hw$ddr_C_M_awlen),
			    .ddr_C_M_awsize(awsteria_hw$ddr_C_M_awsize),
			    .ddr_C_M_awburst(awsteria_hw$ddr_C_M_awburst),
			    .ddr_C_M_awlock(awsteria_hw$ddr_C_M_awlock),
			    .ddr_C_M_awcache(awsteria_hw$ddr_C_M_awcache),
			    .ddr_C_M_awprot(awsteria_hw$ddr_C_M_awprot),
			    .ddr_C_M_awqos(awsteria_hw$ddr_C_M_awqos),
			    .ddr_C_M_awregion(awsteria_hw$ddr_C_M_awregion),
			    .ddr_C_M_wvalid(awsteria_hw$ddr_C_M_wvalid),
			    .ddr_C_M_wdata(awsteria_hw$ddr_C_M_wdata),
			    .ddr_C_M_wstrb(awsteria_hw$ddr_C_M_wstrb),
			    .ddr_C_M_wlast(awsteria_hw$ddr_C_M_wlast),
			    .ddr_C_M_bready(awsteria_hw$ddr_C_M_bready),
			    .ddr_C_M_arvalid(awsteria_hw$ddr_C_M_arvalid),
			    .ddr_C_M_arid(awsteria_hw$ddr_C_M_arid),
			    .ddr_C_M_araddr(awsteria_hw$ddr_C_M_araddr),
			    .ddr_C_M_arlen(awsteria_hw$ddr_C_M_arlen),
			    .ddr_C_M_arsize(awsteria_hw$ddr_C_M_arsize),
			    .ddr_C_M_arburst(awsteria_hw$ddr_C_M_arburst),
			    .ddr_C_M_arlock(awsteria_hw$ddr_C_M_arlock),
			    .ddr_C_M_arcache(awsteria_hw$ddr_C_M_arcache),
			    .ddr_C_M_arprot(awsteria_hw$ddr_C_M_arprot),
			    .ddr_C_M_arqos(awsteria_hw$ddr_C_M_arqos),
			    .ddr_C_M_arregion(awsteria_hw$ddr_C_M_arregion),
			    .ddr_C_M_rready(awsteria_hw$ddr_C_M_rready),
			    .ddr_D_M_awvalid(awsteria_hw$ddr_D_M_awvalid),
			    .ddr_D_M_awid(awsteria_hw$ddr_D_M_awid),
			    .ddr_D_M_awaddr(awsteria_hw$ddr_D_M_awaddr),
			    .ddr_D_M_awlen(awsteria_hw$ddr_D_M_awlen),
			    .ddr_D_M_awsize(awsteria_hw$ddr_D_M_awsize),
			    .ddr_D_M_awburst(awsteria_hw$ddr_D_M_awburst),
			    .ddr_D_M_awlock(awsteria_hw$ddr_D_M_awlock),
			    .ddr_D_M_awcache(awsteria_hw$ddr_D_M_awcache),
			    .ddr_D_M_awprot(awsteria_hw$ddr_D_M_awprot),
			    .ddr_D_M_awqos(awsteria_hw$ddr_D_M_awqos),
			    .ddr_D_M_awregion(awsteria_hw$ddr_D_M_awregion),
			    .ddr_D_M_wvalid(awsteria_hw$ddr_D_M_wvalid),
			    .ddr_D_M_wdata(awsteria_hw$ddr_D_M_wdata),
			    .ddr_D_M_wstrb(awsteria_hw$ddr_D_M_wstrb),
			    .ddr_D_M_wlast(awsteria_hw$ddr_D_M_wlast),
			    .ddr_D_M_bready(awsteria_hw$ddr_D_M_bready),
			    .ddr_D_M_arvalid(awsteria_hw$ddr_D_M_arvalid),
			    .ddr_D_M_arid(awsteria_hw$ddr_D_M_arid),
			    .ddr_D_M_araddr(awsteria_hw$ddr_D_M_araddr),
			    .ddr_D_M_arlen(awsteria_hw$ddr_D_M_arlen),
			    .ddr_D_M_arsize(awsteria_hw$ddr_D_M_arsize),
			    .ddr_D_M_arburst(awsteria_hw$ddr_D_M_arburst),
			    .ddr_D_M_arlock(awsteria_hw$ddr_D_M_arlock),
			    .ddr_D_M_arcache(awsteria_hw$ddr_D_M_arcache),
			    .ddr_D_M_arprot(awsteria_hw$ddr_D_M_arprot),
			    .ddr_D_M_arqos(awsteria_hw$ddr_D_M_arqos),
			    .ddr_D_M_arregion(awsteria_hw$ddr_D_M_arregion),
			    .ddr_D_M_rready(awsteria_hw$ddr_D_M_rready),
			    .m_halted(awsteria_hw$m_halted));

  // submodule clkdiv1
  ClockDiv #(.width(32'd1),
	     .lower(32'd0),
	     .upper(32'd1),
	     .offset(32'd0)) clkdiv1(.CLK_IN(CLK),
				     .RST(RST_N),
				     .PREEDGE(),
				     .CLK_OUT(clkdiv1$CLK_OUT));

  // submodule clkdiv2
  ClockDiv #(.width(32'd2),
	     .lower(32'd0),
	     .upper(32'd2),
	     .offset(32'd0)) clkdiv2(.CLK_IN(CLK),
				     .RST(RST_N),
				     .PREEDGE(),
				     .CLK_OUT(clkdiv2$CLK_OUT));

  // submodule clkdiv3
  ClockDiv #(.width(32'd3),
	     .lower(32'd1),
	     .upper(32'd5),
	     .offset(32'd0)) clkdiv3(.CLK_IN(CLK),
				     .RST(RST_N),
				     .PREEDGE(),
				     .CLK_OUT(clkdiv3$CLK_OUT));

  // submodule clkdiv4
  ClockDiv #(.width(32'd4),
	     .lower(32'd3),
	     .upper(32'd12),
	     .offset(32'd0)) clkdiv4(.CLK_IN(CLK),
				     .RST(RST_N),
				     .PREEDGE(),
				     .CLK_OUT(clkdiv4$CLK_OUT));

  // submodule clkdiv5
  ClockDiv #(.width(32'd5),
	     .lower(32'd3),
	     .upper(32'd27),
	     .offset(32'd0)) clkdiv5(.CLK_IN(CLK),
				     .RST(RST_N),
				     .PREEDGE(),
				     .CLK_OUT(clkdiv5$CLK_OUT));

  // submodule comms
  mkBytevec comms(.CLK(CLK),
		  .RST_N(RST_N),
		  .fi_AXI4L_Rd_Data_d32_u0_enq_x(comms$fi_AXI4L_Rd_Data_d32_u0_enq_x),
		  .fi_AXI4L_Wr_Resp_u0_enq_x(comms$fi_AXI4L_Wr_Resp_u0_enq_x),
		  .fi_AXI4_Rd_Data_i16_d512_u0_enq_x(comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x),
		  .fi_AXI4_Wr_Resp_i16_u0_enq_x(comms$fi_AXI4_Wr_Resp_i16_u0_enq_x),
		  .fi_C_to_BSV_bytevec_enq_x(comms$fi_C_to_BSV_bytevec_enq_x),
		  .EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq(comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq),
		  .EN_fo_AXI4_Wr_Data_d512_u0_deq(comms$EN_fo_AXI4_Wr_Data_d512_u0_deq),
		  .EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq(comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq),
		  .EN_fo_AXI4L_Wr_Addr_a32_u0_deq(comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq),
		  .EN_fo_AXI4L_Wr_Data_d32_deq(comms$EN_fo_AXI4L_Wr_Data_d32_deq),
		  .EN_fo_AXI4L_Rd_Addr_a32_u0_deq(comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq),
		  .EN_fi_AXI4_Wr_Resp_i16_u0_enq(comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq),
		  .EN_fi_AXI4_Rd_Data_i16_d512_u0_enq(comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq),
		  .EN_fi_AXI4L_Wr_Resp_u0_enq(comms$EN_fi_AXI4L_Wr_Resp_u0_enq),
		  .EN_fi_AXI4L_Rd_Data_d32_u0_enq(comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq),
		  .EN_fi_C_to_BSV_bytevec_enq(comms$EN_fi_C_to_BSV_bytevec_enq),
		  .EN_fo_BSV_to_C_bytevec_deq(comms$EN_fo_BSV_to_C_bytevec_deq),
		  .fo_AXI4_Wr_Addr_i16_a64_u0_first(comms$fo_AXI4_Wr_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first(comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq(comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq),
		  .fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty(),
		  .RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty(),
		  .fo_AXI4_Wr_Data_d512_u0_first(comms$fo_AXI4_Wr_Data_d512_u0_first),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_first(comms$RDY_fo_AXI4_Wr_Data_d512_u0_first),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_deq(comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq),
		  .fo_AXI4_Wr_Data_d512_u0_notEmpty(),
		  .RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty(),
		  .fo_AXI4_Rd_Addr_i16_a64_u0_first(comms$fo_AXI4_Rd_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first(comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq(comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq),
		  .fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty(),
		  .RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty(),
		  .fo_AXI4L_Wr_Addr_a32_u0_first(comms$fo_AXI4L_Wr_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_first(comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_deq(comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq),
		  .fo_AXI4L_Wr_Addr_a32_u0_notEmpty(),
		  .RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty(),
		  .fo_AXI4L_Wr_Data_d32_first(comms$fo_AXI4L_Wr_Data_d32_first),
		  .RDY_fo_AXI4L_Wr_Data_d32_first(comms$RDY_fo_AXI4L_Wr_Data_d32_first),
		  .RDY_fo_AXI4L_Wr_Data_d32_deq(comms$RDY_fo_AXI4L_Wr_Data_d32_deq),
		  .fo_AXI4L_Wr_Data_d32_notEmpty(),
		  .RDY_fo_AXI4L_Wr_Data_d32_notEmpty(),
		  .fo_AXI4L_Rd_Addr_a32_u0_first(comms$fo_AXI4L_Rd_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_first(comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_deq(comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq),
		  .fo_AXI4L_Rd_Addr_a32_u0_notEmpty(),
		  .RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty(),
		  .RDY_fi_AXI4_Wr_Resp_i16_u0_enq(comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq),
		  .fi_AXI4_Wr_Resp_i16_u0_notFull(),
		  .RDY_fi_AXI4_Wr_Resp_i16_u0_notFull(),
		  .RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq(comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq),
		  .fi_AXI4_Rd_Data_i16_d512_u0_notFull(),
		  .RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull(),
		  .RDY_fi_AXI4L_Wr_Resp_u0_enq(comms$RDY_fi_AXI4L_Wr_Resp_u0_enq),
		  .fi_AXI4L_Wr_Resp_u0_notFull(),
		  .RDY_fi_AXI4L_Wr_Resp_u0_notFull(),
		  .RDY_fi_AXI4L_Rd_Data_d32_u0_enq(comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq),
		  .fi_AXI4L_Rd_Data_d32_u0_notFull(),
		  .RDY_fi_AXI4L_Rd_Data_d32_u0_notFull(),
		  .RDY_fi_C_to_BSV_bytevec_enq(comms$RDY_fi_C_to_BSV_bytevec_enq),
		  .fi_C_to_BSV_bytevec_notFull(),
		  .RDY_fi_C_to_BSV_bytevec_notFull(),
		  .fo_BSV_to_C_bytevec_first(comms$fo_BSV_to_C_bytevec_first),
		  .RDY_fo_BSV_to_C_bytevec_first(comms$RDY_fo_BSV_to_C_bytevec_first),
		  .RDY_fo_BSV_to_C_bytevec_deq(comms$RDY_fo_BSV_to_C_bytevec_deq),
		  .fo_BSV_to_C_bytevec_notEmpty(),
		  .RDY_fo_BSV_to_C_bytevec_notEmpty());

  // submodule ddr_A
  mkDDR_A_Model ddr_A(.CLK(CLK),
		      .RST_N(RST_N),
		      .araddr(ddr_A$araddr),
		      .arburst(ddr_A$arburst),
		      .arcache(ddr_A$arcache),
		      .arid(ddr_A$arid),
		      .arlen(ddr_A$arlen),
		      .arlock(ddr_A$arlock),
		      .arprot(ddr_A$arprot),
		      .arqos(ddr_A$arqos),
		      .arregion(ddr_A$arregion),
		      .arsize(ddr_A$arsize),
		      .arvalid(ddr_A$arvalid),
		      .awaddr(ddr_A$awaddr),
		      .awburst(ddr_A$awburst),
		      .awcache(ddr_A$awcache),
		      .awid(ddr_A$awid),
		      .awlen(ddr_A$awlen),
		      .awlock(ddr_A$awlock),
		      .awprot(ddr_A$awprot),
		      .awqos(ddr_A$awqos),
		      .awregion(ddr_A$awregion),
		      .awsize(ddr_A$awsize),
		      .awvalid(ddr_A$awvalid),
		      .bready(ddr_A$bready),
		      .rready(ddr_A$rready),
		      .wdata(ddr_A$wdata),
		      .wlast(ddr_A$wlast),
		      .wstrb(ddr_A$wstrb),
		      .wvalid(ddr_A$wvalid),
		      .awready(ddr_A$awready),
		      .wready(ddr_A$wready),
		      .bvalid(ddr_A$bvalid),
		      .bid(ddr_A$bid),
		      .bresp(ddr_A$bresp),
		      .arready(ddr_A$arready),
		      .rvalid(ddr_A$rvalid),
		      .rid(ddr_A$rid),
		      .rdata(ddr_A$rdata),
		      .rresp(ddr_A$rresp),
		      .rlast(ddr_A$rlast));

  // submodule ddr_B
  mkDDR_B_Model ddr_B(.CLK(CLK),
		      .RST_N(RST_N),
		      .araddr(ddr_B$araddr),
		      .arburst(ddr_B$arburst),
		      .arcache(ddr_B$arcache),
		      .arid(ddr_B$arid),
		      .arlen(ddr_B$arlen),
		      .arlock(ddr_B$arlock),
		      .arprot(ddr_B$arprot),
		      .arqos(ddr_B$arqos),
		      .arregion(ddr_B$arregion),
		      .arsize(ddr_B$arsize),
		      .arvalid(ddr_B$arvalid),
		      .awaddr(ddr_B$awaddr),
		      .awburst(ddr_B$awburst),
		      .awcache(ddr_B$awcache),
		      .awid(ddr_B$awid),
		      .awlen(ddr_B$awlen),
		      .awlock(ddr_B$awlock),
		      .awprot(ddr_B$awprot),
		      .awqos(ddr_B$awqos),
		      .awregion(ddr_B$awregion),
		      .awsize(ddr_B$awsize),
		      .awvalid(ddr_B$awvalid),
		      .bready(ddr_B$bready),
		      .rready(ddr_B$rready),
		      .wdata(ddr_B$wdata),
		      .wlast(ddr_B$wlast),
		      .wstrb(ddr_B$wstrb),
		      .wvalid(ddr_B$wvalid),
		      .awready(ddr_B$awready),
		      .wready(ddr_B$wready),
		      .bvalid(ddr_B$bvalid),
		      .bid(ddr_B$bid),
		      .bresp(ddr_B$bresp),
		      .arready(ddr_B$arready),
		      .rvalid(ddr_B$rvalid),
		      .rid(ddr_B$rid),
		      .rdata(ddr_B$rdata),
		      .rresp(ddr_B$rresp),
		      .rlast(ddr_B$rlast));

  // submodule ddr_C
  mkDDR_C_Model ddr_C(.CLK(CLK),
		      .RST_N(RST_N),
		      .araddr(ddr_C$araddr),
		      .arburst(ddr_C$arburst),
		      .arcache(ddr_C$arcache),
		      .arid(ddr_C$arid),
		      .arlen(ddr_C$arlen),
		      .arlock(ddr_C$arlock),
		      .arprot(ddr_C$arprot),
		      .arqos(ddr_C$arqos),
		      .arregion(ddr_C$arregion),
		      .arsize(ddr_C$arsize),
		      .arvalid(ddr_C$arvalid),
		      .awaddr(ddr_C$awaddr),
		      .awburst(ddr_C$awburst),
		      .awcache(ddr_C$awcache),
		      .awid(ddr_C$awid),
		      .awlen(ddr_C$awlen),
		      .awlock(ddr_C$awlock),
		      .awprot(ddr_C$awprot),
		      .awqos(ddr_C$awqos),
		      .awregion(ddr_C$awregion),
		      .awsize(ddr_C$awsize),
		      .awvalid(ddr_C$awvalid),
		      .bready(ddr_C$bready),
		      .rready(ddr_C$rready),
		      .wdata(ddr_C$wdata),
		      .wlast(ddr_C$wlast),
		      .wstrb(ddr_C$wstrb),
		      .wvalid(ddr_C$wvalid),
		      .awready(ddr_C$awready),
		      .wready(ddr_C$wready),
		      .bvalid(ddr_C$bvalid),
		      .bid(ddr_C$bid),
		      .bresp(ddr_C$bresp),
		      .arready(ddr_C$arready),
		      .rvalid(ddr_C$rvalid),
		      .rid(ddr_C$rid),
		      .rdata(ddr_C$rdata),
		      .rresp(ddr_C$rresp),
		      .rlast(ddr_C$rlast));

  // submodule ddr_D
  mkDDR_D_Model ddr_D(.CLK(CLK),
		      .RST_N(RST_N),
		      .araddr(ddr_D$araddr),
		      .arburst(ddr_D$arburst),
		      .arcache(ddr_D$arcache),
		      .arid(ddr_D$arid),
		      .arlen(ddr_D$arlen),
		      .arlock(ddr_D$arlock),
		      .arprot(ddr_D$arprot),
		      .arqos(ddr_D$arqos),
		      .arregion(ddr_D$arregion),
		      .arsize(ddr_D$arsize),
		      .arvalid(ddr_D$arvalid),
		      .awaddr(ddr_D$awaddr),
		      .awburst(ddr_D$awburst),
		      .awcache(ddr_D$awcache),
		      .awid(ddr_D$awid),
		      .awlen(ddr_D$awlen),
		      .awlock(ddr_D$awlock),
		      .awprot(ddr_D$awprot),
		      .awqos(ddr_D$awqos),
		      .awregion(ddr_D$awregion),
		      .awsize(ddr_D$awsize),
		      .awvalid(ddr_D$awvalid),
		      .bready(ddr_D$bready),
		      .rready(ddr_D$rready),
		      .wdata(ddr_D$wdata),
		      .wlast(ddr_D$wlast),
		      .wstrb(ddr_D$wstrb),
		      .wvalid(ddr_D$wvalid),
		      .awready(ddr_D$awready),
		      .wready(ddr_D$wready),
		      .bvalid(ddr_D$bvalid),
		      .bid(ddr_D$bid),
		      .bresp(ddr_D$bresp),
		      .arready(ddr_D$arready),
		      .rvalid(ddr_D$rvalid),
		      .rid(ddr_D$rid),
		      .rdata(ddr_D$rdata),
		      .rresp(ddr_D$rresp),
		      .rlast(ddr_D$rlast));

  // submodule host_AXI4L_xactor_f_rd_addr
  FIFO2 #(.width(32'd35),
	  .guarded(1'd1)) host_AXI4L_xactor_f_rd_addr(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(host_AXI4L_xactor_f_rd_addr$D_IN),
						      .ENQ(host_AXI4L_xactor_f_rd_addr$ENQ),
						      .DEQ(host_AXI4L_xactor_f_rd_addr$DEQ),
						      .CLR(host_AXI4L_xactor_f_rd_addr$CLR),
						      .D_OUT(host_AXI4L_xactor_f_rd_addr$D_OUT),
						      .FULL_N(host_AXI4L_xactor_f_rd_addr$FULL_N),
						      .EMPTY_N(host_AXI4L_xactor_f_rd_addr$EMPTY_N));

  // submodule host_AXI4L_xactor_f_rd_data
  FIFO2 #(.width(32'd34),
	  .guarded(1'd1)) host_AXI4L_xactor_f_rd_data(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(host_AXI4L_xactor_f_rd_data$D_IN),
						      .ENQ(host_AXI4L_xactor_f_rd_data$ENQ),
						      .DEQ(host_AXI4L_xactor_f_rd_data$DEQ),
						      .CLR(host_AXI4L_xactor_f_rd_data$CLR),
						      .D_OUT(host_AXI4L_xactor_f_rd_data$D_OUT),
						      .FULL_N(host_AXI4L_xactor_f_rd_data$FULL_N),
						      .EMPTY_N(host_AXI4L_xactor_f_rd_data$EMPTY_N));

  // submodule host_AXI4L_xactor_f_wr_addr
  FIFO2 #(.width(32'd35),
	  .guarded(1'd1)) host_AXI4L_xactor_f_wr_addr(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(host_AXI4L_xactor_f_wr_addr$D_IN),
						      .ENQ(host_AXI4L_xactor_f_wr_addr$ENQ),
						      .DEQ(host_AXI4L_xactor_f_wr_addr$DEQ),
						      .CLR(host_AXI4L_xactor_f_wr_addr$CLR),
						      .D_OUT(host_AXI4L_xactor_f_wr_addr$D_OUT),
						      .FULL_N(host_AXI4L_xactor_f_wr_addr$FULL_N),
						      .EMPTY_N(host_AXI4L_xactor_f_wr_addr$EMPTY_N));

  // submodule host_AXI4L_xactor_f_wr_data
  FIFO2 #(.width(32'd36),
	  .guarded(1'd1)) host_AXI4L_xactor_f_wr_data(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(host_AXI4L_xactor_f_wr_data$D_IN),
						      .ENQ(host_AXI4L_xactor_f_wr_data$ENQ),
						      .DEQ(host_AXI4L_xactor_f_wr_data$DEQ),
						      .CLR(host_AXI4L_xactor_f_wr_data$CLR),
						      .D_OUT(host_AXI4L_xactor_f_wr_data$D_OUT),
						      .FULL_N(host_AXI4L_xactor_f_wr_data$FULL_N),
						      .EMPTY_N(host_AXI4L_xactor_f_wr_data$EMPTY_N));

  // submodule host_AXI4L_xactor_f_wr_resp
  FIFO2 #(.width(32'd2),
	  .guarded(1'd1)) host_AXI4L_xactor_f_wr_resp(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(host_AXI4L_xactor_f_wr_resp$D_IN),
						      .ENQ(host_AXI4L_xactor_f_wr_resp$ENQ),
						      .DEQ(host_AXI4L_xactor_f_wr_resp$DEQ),
						      .CLR(host_AXI4L_xactor_f_wr_resp$CLR),
						      .D_OUT(host_AXI4L_xactor_f_wr_resp$D_OUT),
						      .FULL_N(host_AXI4L_xactor_f_wr_resp$FULL_N),
						      .EMPTY_N(host_AXI4L_xactor_f_wr_resp$EMPTY_N));

  // submodule host_AXI4_xactor_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) host_AXI4_xactor_f_rd_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(host_AXI4_xactor_f_rd_addr$D_IN),
						     .ENQ(host_AXI4_xactor_f_rd_addr$ENQ),
						     .DEQ(host_AXI4_xactor_f_rd_addr$DEQ),
						     .CLR(host_AXI4_xactor_f_rd_addr$CLR),
						     .D_OUT(host_AXI4_xactor_f_rd_addr$D_OUT),
						     .FULL_N(host_AXI4_xactor_f_rd_addr$FULL_N),
						     .EMPTY_N(host_AXI4_xactor_f_rd_addr$EMPTY_N));

  // submodule host_AXI4_xactor_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) host_AXI4_xactor_f_rd_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(host_AXI4_xactor_f_rd_data$D_IN),
						     .ENQ(host_AXI4_xactor_f_rd_data$ENQ),
						     .DEQ(host_AXI4_xactor_f_rd_data$DEQ),
						     .CLR(host_AXI4_xactor_f_rd_data$CLR),
						     .D_OUT(host_AXI4_xactor_f_rd_data$D_OUT),
						     .FULL_N(host_AXI4_xactor_f_rd_data$FULL_N),
						     .EMPTY_N(host_AXI4_xactor_f_rd_data$EMPTY_N));

  // submodule host_AXI4_xactor_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) host_AXI4_xactor_f_wr_addr(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(host_AXI4_xactor_f_wr_addr$D_IN),
						     .ENQ(host_AXI4_xactor_f_wr_addr$ENQ),
						     .DEQ(host_AXI4_xactor_f_wr_addr$DEQ),
						     .CLR(host_AXI4_xactor_f_wr_addr$CLR),
						     .D_OUT(host_AXI4_xactor_f_wr_addr$D_OUT),
						     .FULL_N(host_AXI4_xactor_f_wr_addr$FULL_N),
						     .EMPTY_N(host_AXI4_xactor_f_wr_addr$EMPTY_N));

  // submodule host_AXI4_xactor_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(1'd1)) host_AXI4_xactor_f_wr_data(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(host_AXI4_xactor_f_wr_data$D_IN),
						     .ENQ(host_AXI4_xactor_f_wr_data$ENQ),
						     .DEQ(host_AXI4_xactor_f_wr_data$DEQ),
						     .CLR(host_AXI4_xactor_f_wr_data$CLR),
						     .D_OUT(host_AXI4_xactor_f_wr_data$D_OUT),
						     .FULL_N(host_AXI4_xactor_f_wr_data$FULL_N),
						     .EMPTY_N(host_AXI4_xactor_f_wr_data$EMPTY_N));

  // submodule host_AXI4_xactor_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) host_AXI4_xactor_f_wr_resp(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(host_AXI4_xactor_f_wr_resp$D_IN),
						     .ENQ(host_AXI4_xactor_f_wr_resp$ENQ),
						     .DEQ(host_AXI4_xactor_f_wr_resp$DEQ),
						     .CLR(host_AXI4_xactor_f_wr_resp$CLR),
						     .D_OUT(host_AXI4_xactor_f_wr_resp$D_OUT),
						     .FULL_N(host_AXI4_xactor_f_wr_resp$FULL_N),
						     .EMPTY_N(host_AXI4_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_2
  assign CAN_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;

  // rule RL_rl_wr_data_channel_2
  assign CAN_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_response_channel_2
  assign CAN_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_2
  assign CAN_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;

  // rule RL_rl_rd_data_channel_2
  assign CAN_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_3
  assign CAN_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;

  // rule RL_rl_wr_data_channel_3
  assign CAN_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_response_channel_3
  assign CAN_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_3
  assign CAN_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;

  // rule RL_rl_rd_data_channel_3
  assign CAN_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;

  // rule RL_rl_start
  assign CAN_FIRE_RL_rl_start = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_start = CAN_FIRE_RL_rl_start ;

  // rule RL_rl_listen
  assign CAN_FIRE_RL_rl_listen = rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_listen = CAN_FIRE_RL_rl_listen ;

  // rule RL_rl_accept
  assign CAN_FIRE_RL_rl_accept = rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_accept = CAN_FIRE_RL_rl_accept ;

  // rule RL_rl_host_recv
  assign CAN_FIRE_RL_rl_host_recv =
	     comms$RDY_fi_C_to_BSV_bytevec_enq && rg_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_host_recv = CAN_FIRE_RL_rl_host_recv ;

  // rule RL_rl_host_send
  assign CAN_FIRE_RL_rl_host_send =
	     comms$RDY_fo_BSV_to_C_bytevec_deq &&
	     comms$RDY_fo_BSV_to_C_bytevec_first &&
	     rg_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_host_send = CAN_FIRE_RL_rl_host_send ;

  // rule RL_rl_wr_addr_channel_4
  assign CAN_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;

  // rule RL_rl_wr_data_channel_4
  assign CAN_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_response_channel_4
  assign CAN_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_4
  assign CAN_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;

  // rule RL_rl_rd_data_channel_4
  assign CAN_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;

  // rule RL_rl_connect_host_AXI4_wr_addr
  assign CAN_FIRE_RL_rl_connect_host_AXI4_wr_addr =
	     comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq &&
	     comms$RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first &&
	     host_AXI4_xactor_f_wr_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4_wr_addr =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_addr ;

  // rule RL_rl_connect_host_AXI4_wr_data
  assign CAN_FIRE_RL_rl_connect_host_AXI4_wr_data =
	     comms$RDY_fo_AXI4_Wr_Data_d512_u0_deq &&
	     comms$RDY_fo_AXI4_Wr_Data_d512_u0_first &&
	     host_AXI4_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4_wr_data =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_data ;

  // rule RL_rl_connect_host_AXI4_rd_addr
  assign CAN_FIRE_RL_rl_connect_host_AXI4_rd_addr =
	     comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     comms$RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first &&
	     host_AXI4_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4_rd_addr =
	     CAN_FIRE_RL_rl_connect_host_AXI4_rd_addr ;

  // rule RL_rl_wr_addr_channel_5
  assign CAN_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;

  // rule RL_rl_wr_data_channel_5
  assign CAN_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;

  // rule RL_rl_wr_response_channel_5
  assign CAN_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_5
  assign CAN_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;

  // rule RL_rl_rd_data_channel_5
  assign CAN_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;

  // rule RL_rl_connect_host_AXI4L_wr_addr
  assign CAN_FIRE_RL_rl_connect_host_AXI4L_wr_addr =
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Wr_Addr_a32_u0_first &&
	     host_AXI4L_xactor_f_wr_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4L_wr_addr =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_addr ;

  // rule RL_rl_connect_host_AXI4L_wr_data
  assign CAN_FIRE_RL_rl_connect_host_AXI4L_wr_data =
	     comms$RDY_fo_AXI4L_Wr_Data_d32_deq &&
	     comms$RDY_fo_AXI4L_Wr_Data_d32_first &&
	     host_AXI4L_xactor_f_wr_data$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4L_wr_data =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_data ;

  // rule RL_rl_connect_host_AXI4L_rd_addr
  assign CAN_FIRE_RL_rl_connect_host_AXI4L_rd_addr =
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     comms$RDY_fo_AXI4L_Rd_Addr_a32_u0_first &&
	     host_AXI4L_xactor_f_rd_addr$FULL_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4L_rd_addr =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_rd_addr ;

  // rule RL_rl_connect_host_AXI4_wr_resp
  assign CAN_FIRE_RL_rl_connect_host_AXI4_wr_resp =
	     comms$RDY_fi_AXI4_Wr_Resp_i16_u0_enq &&
	     host_AXI4_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4_wr_resp =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_resp ;

  // rule RL_rl_connect_host_AXI4_rd_data
  assign CAN_FIRE_RL_rl_connect_host_AXI4_rd_data =
	     comms$RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq &&
	     host_AXI4_xactor_f_rd_data$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4_rd_data =
	     CAN_FIRE_RL_rl_connect_host_AXI4_rd_data ;

  // rule RL_rl_connect_host_AXI4L_wr_resp
  assign CAN_FIRE_RL_rl_connect_host_AXI4L_wr_resp =
	     comms$RDY_fi_AXI4L_Wr_Resp_u0_enq &&
	     host_AXI4L_xactor_f_wr_resp$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4L_wr_resp =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_resp ;

  // rule RL_rl_connect_host_AXI4L_rd_data
  assign CAN_FIRE_RL_rl_connect_host_AXI4L_rd_data =
	     comms$RDY_fi_AXI4L_Rd_Data_d32_u0_enq &&
	     host_AXI4L_xactor_f_rd_data$EMPTY_N ;
  assign WILL_FIRE_RL_rl_connect_host_AXI4L_rd_data =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_rd_data ;

  // rule RL_rl_status_signals
  assign CAN_FIRE_RL_rl_status_signals = 1'd1 ;
  assign WILL_FIRE_RL_rl_status_signals = 1'd1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_accept && v__h6007 == 8'd1 ;

  // register rg_counter
  assign rg_counter$D_IN = rg_counter + 64'd1 ;
  assign rg_counter$EN = 1'd1 ;

  // register rg_state
  always@(MUX_rg_state$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_start or WILL_FIRE_RL_rl_listen)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state$write_1__SEL_1: rg_state$D_IN = 2'd3;
      WILL_FIRE_RL_rl_start: rg_state$D_IN = 2'd1;
      WILL_FIRE_RL_rl_listen: rg_state$D_IN = 2'd2;
      default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_accept && v__h6007 == 8'd1 ||
	     WILL_FIRE_RL_rl_start ||
	     WILL_FIRE_RL_rl_listen ;

  // submodule awsteria_hw
  assign awsteria_hw$ddr_A_M_arready = ddr_A$arready ;
  assign awsteria_hw$ddr_A_M_awready = ddr_A$awready ;
  assign awsteria_hw$ddr_A_M_bid = ddr_A$bid ;
  assign awsteria_hw$ddr_A_M_bresp = ddr_A$bresp ;
  assign awsteria_hw$ddr_A_M_bvalid = ddr_A$bvalid ;
  assign awsteria_hw$ddr_A_M_rdata = ddr_A$rdata ;
  assign awsteria_hw$ddr_A_M_rid = ddr_A$rid ;
  assign awsteria_hw$ddr_A_M_rlast = ddr_A$rlast ;
  assign awsteria_hw$ddr_A_M_rresp = ddr_A$rresp ;
  assign awsteria_hw$ddr_A_M_rvalid = ddr_A$rvalid ;
  assign awsteria_hw$ddr_A_M_wready = ddr_A$wready ;
  assign awsteria_hw$ddr_B_M_arready = ddr_B$arready ;
  assign awsteria_hw$ddr_B_M_awready = ddr_B$awready ;
  assign awsteria_hw$ddr_B_M_bid = ddr_B$bid ;
  assign awsteria_hw$ddr_B_M_bresp = ddr_B$bresp ;
  assign awsteria_hw$ddr_B_M_bvalid = ddr_B$bvalid ;
  assign awsteria_hw$ddr_B_M_rdata = ddr_B$rdata ;
  assign awsteria_hw$ddr_B_M_rid = ddr_B$rid ;
  assign awsteria_hw$ddr_B_M_rlast = ddr_B$rlast ;
  assign awsteria_hw$ddr_B_M_rresp = ddr_B$rresp ;
  assign awsteria_hw$ddr_B_M_rvalid = ddr_B$rvalid ;
  assign awsteria_hw$ddr_B_M_wready = ddr_B$wready ;
  assign awsteria_hw$ddr_C_M_arready = ddr_C$arready ;
  assign awsteria_hw$ddr_C_M_awready = ddr_C$awready ;
  assign awsteria_hw$ddr_C_M_bid = ddr_C$bid ;
  assign awsteria_hw$ddr_C_M_bresp = ddr_C$bresp ;
  assign awsteria_hw$ddr_C_M_bvalid = ddr_C$bvalid ;
  assign awsteria_hw$ddr_C_M_rdata = ddr_C$rdata ;
  assign awsteria_hw$ddr_C_M_rid = ddr_C$rid ;
  assign awsteria_hw$ddr_C_M_rlast = ddr_C$rlast ;
  assign awsteria_hw$ddr_C_M_rresp = ddr_C$rresp ;
  assign awsteria_hw$ddr_C_M_rvalid = ddr_C$rvalid ;
  assign awsteria_hw$ddr_C_M_wready = ddr_C$wready ;
  assign awsteria_hw$ddr_D_M_arready = ddr_D$arready ;
  assign awsteria_hw$ddr_D_M_awready = ddr_D$awready ;
  assign awsteria_hw$ddr_D_M_bid = ddr_D$bid ;
  assign awsteria_hw$ddr_D_M_bresp = ddr_D$bresp ;
  assign awsteria_hw$ddr_D_M_bvalid = ddr_D$bvalid ;
  assign awsteria_hw$ddr_D_M_rdata = ddr_D$rdata ;
  assign awsteria_hw$ddr_D_M_rid = ddr_D$rid ;
  assign awsteria_hw$ddr_D_M_rlast = ddr_D$rlast ;
  assign awsteria_hw$ddr_D_M_rresp = ddr_D$rresp ;
  assign awsteria_hw$ddr_D_M_rvalid = ddr_D$rvalid ;
  assign awsteria_hw$ddr_D_M_wready = ddr_D$wready ;
  assign awsteria_hw$host_AXI4L_S_araddr =
	     host_AXI4L_xactor_f_rd_addr$D_OUT[34:3] ;
  assign awsteria_hw$host_AXI4L_S_arprot =
	     host_AXI4L_xactor_f_rd_addr$D_OUT[2:0] ;
  assign awsteria_hw$host_AXI4L_S_arvalid =
	     host_AXI4L_xactor_f_rd_addr$EMPTY_N ;
  assign awsteria_hw$host_AXI4L_S_awaddr =
	     host_AXI4L_xactor_f_wr_addr$D_OUT[34:3] ;
  assign awsteria_hw$host_AXI4L_S_awprot =
	     host_AXI4L_xactor_f_wr_addr$D_OUT[2:0] ;
  assign awsteria_hw$host_AXI4L_S_awvalid =
	     host_AXI4L_xactor_f_wr_addr$EMPTY_N ;
  assign awsteria_hw$host_AXI4L_S_bready =
	     host_AXI4L_xactor_f_wr_resp$FULL_N ;
  assign awsteria_hw$host_AXI4L_S_rready =
	     host_AXI4L_xactor_f_rd_data$FULL_N ;
  assign awsteria_hw$host_AXI4L_S_wdata =
	     host_AXI4L_xactor_f_wr_data$D_OUT[35:4] ;
  assign awsteria_hw$host_AXI4L_S_wstrb =
	     host_AXI4L_xactor_f_wr_data$D_OUT[3:0] ;
  assign awsteria_hw$host_AXI4L_S_wvalid =
	     host_AXI4L_xactor_f_wr_data$EMPTY_N ;
  assign awsteria_hw$host_AXI4_S_araddr =
	     host_AXI4_xactor_f_rd_addr$D_OUT[92:29] ;
  assign awsteria_hw$host_AXI4_S_arburst =
	     host_AXI4_xactor_f_rd_addr$D_OUT[17:16] ;
  assign awsteria_hw$host_AXI4_S_arcache =
	     host_AXI4_xactor_f_rd_addr$D_OUT[14:11] ;
  assign awsteria_hw$host_AXI4_S_arid =
	     host_AXI4_xactor_f_rd_addr$D_OUT[108:93] ;
  assign awsteria_hw$host_AXI4_S_arlen =
	     host_AXI4_xactor_f_rd_addr$D_OUT[28:21] ;
  assign awsteria_hw$host_AXI4_S_arlock =
	     host_AXI4_xactor_f_rd_addr$D_OUT[15] ;
  assign awsteria_hw$host_AXI4_S_arprot =
	     host_AXI4_xactor_f_rd_addr$D_OUT[10:8] ;
  assign awsteria_hw$host_AXI4_S_arqos =
	     host_AXI4_xactor_f_rd_addr$D_OUT[7:4] ;
  assign awsteria_hw$host_AXI4_S_arregion =
	     host_AXI4_xactor_f_rd_addr$D_OUT[3:0] ;
  assign awsteria_hw$host_AXI4_S_arsize =
	     host_AXI4_xactor_f_rd_addr$D_OUT[20:18] ;
  assign awsteria_hw$host_AXI4_S_arvalid =
	     host_AXI4_xactor_f_rd_addr$EMPTY_N ;
  assign awsteria_hw$host_AXI4_S_awaddr =
	     host_AXI4_xactor_f_wr_addr$D_OUT[92:29] ;
  assign awsteria_hw$host_AXI4_S_awburst =
	     host_AXI4_xactor_f_wr_addr$D_OUT[17:16] ;
  assign awsteria_hw$host_AXI4_S_awcache =
	     host_AXI4_xactor_f_wr_addr$D_OUT[14:11] ;
  assign awsteria_hw$host_AXI4_S_awid =
	     host_AXI4_xactor_f_wr_addr$D_OUT[108:93] ;
  assign awsteria_hw$host_AXI4_S_awlen =
	     host_AXI4_xactor_f_wr_addr$D_OUT[28:21] ;
  assign awsteria_hw$host_AXI4_S_awlock =
	     host_AXI4_xactor_f_wr_addr$D_OUT[15] ;
  assign awsteria_hw$host_AXI4_S_awprot =
	     host_AXI4_xactor_f_wr_addr$D_OUT[10:8] ;
  assign awsteria_hw$host_AXI4_S_awqos =
	     host_AXI4_xactor_f_wr_addr$D_OUT[7:4] ;
  assign awsteria_hw$host_AXI4_S_awregion =
	     host_AXI4_xactor_f_wr_addr$D_OUT[3:0] ;
  assign awsteria_hw$host_AXI4_S_awsize =
	     host_AXI4_xactor_f_wr_addr$D_OUT[20:18] ;
  assign awsteria_hw$host_AXI4_S_awvalid =
	     host_AXI4_xactor_f_wr_addr$EMPTY_N ;
  assign awsteria_hw$host_AXI4_S_bready = host_AXI4_xactor_f_wr_resp$FULL_N ;
  assign awsteria_hw$host_AXI4_S_rready = host_AXI4_xactor_f_rd_data$FULL_N ;
  assign awsteria_hw$host_AXI4_S_wdata =
	     host_AXI4_xactor_f_wr_data$D_OUT[576:65] ;
  assign awsteria_hw$host_AXI4_S_wlast = host_AXI4_xactor_f_wr_data$D_OUT[0] ;
  assign awsteria_hw$host_AXI4_S_wstrb =
	     host_AXI4_xactor_f_wr_data$D_OUT[64:1] ;
  assign awsteria_hw$host_AXI4_S_wvalid = host_AXI4_xactor_f_wr_data$EMPTY_N ;
  assign awsteria_hw$m_env_ready_env_ready = 1'd1 ;
  assign awsteria_hw$m_glcount_glcount = rg_counter ;

  // submodule comms
  assign comms$fi_AXI4L_Rd_Data_d32_u0_enq_x =
	     { host_AXI4L_xactor_f_rd_data$D_OUT[31:0],
	       host_AXI4L_xactor_f_rd_data$D_OUT[33:32] } ;
  assign comms$fi_AXI4L_Wr_Resp_u0_enq_x = host_AXI4L_xactor_f_wr_resp$D_OUT ;
  assign comms$fi_AXI4_Rd_Data_i16_d512_u0_enq_x =
	     host_AXI4_xactor_f_rd_data$D_OUT ;
  assign comms$fi_AXI4_Wr_Resp_i16_u0_enq_x =
	     host_AXI4_xactor_f_wr_resp$D_OUT ;
  assign comms$fi_C_to_BSV_bytevec_enq_x =
	     { TASK_c_host_recv_get_byte_j___d193,
	       TASK_c_host_recv_get_byte_j___d194,
	       TASK_c_host_recv_get_byte_j___d195,
	       TASK_c_host_recv_get_byte_j___d197,
	       TASK_c_host_recv_get_byte_j___d198,
	       TASK_c_host_recv_get_byte_j___d200,
	       TASK_c_host_recv_get_byte_j___d201,
	       TASK_c_host_recv_get_byte_j___d203,
	       TASK_c_host_recv_get_byte_j___d204,
	       TASK_c_host_recv_get_byte_j___d206,
	       TASK_c_host_recv_get_byte_j___d207,
	       TASK_c_host_recv_get_byte_j___d209,
	       TASK_c_host_recv_get_byte_j___d210,
	       TASK_c_host_recv_get_byte_j___d212,
	       TASK_c_host_recv_get_byte_j___d213,
	       TASK_c_host_recv_get_byte_j___d215,
	       TASK_c_host_recv_get_byte_j___d216,
	       TASK_c_host_recv_get_byte_j___d218,
	       TASK_c_host_recv_get_byte_j___d219,
	       TASK_c_host_recv_get_byte_j___d221,
	       TASK_c_host_recv_get_byte_j___d222,
	       TASK_c_host_recv_get_byte_j___d224,
	       TASK_c_host_recv_get_byte_j___d225,
	       TASK_c_host_recv_get_byte_j___d227,
	       TASK_c_host_recv_get_byte_j___d228,
	       TASK_c_host_recv_get_byte_j___d230,
	       TASK_c_host_recv_get_byte_j___d231,
	       TASK_c_host_recv_get_byte_j___d233,
	       TASK_c_host_recv_get_byte_j___d234,
	       TASK_c_host_recv_get_byte_j___d236,
	       TASK_c_host_recv_get_byte_j___d237,
	       TASK_c_host_recv_get_byte_j___d239,
	       TASK_c_host_recv_get_byte_j___d240,
	       TASK_c_host_recv_get_byte_j___d242,
	       TASK_c_host_recv_get_byte_j___d243,
	       TASK_c_host_recv_get_byte_j___d245,
	       TASK_c_host_recv_get_byte_j___d246,
	       TASK_c_host_recv_get_byte_j___d248,
	       TASK_c_host_recv_get_byte_j___d249,
	       TASK_c_host_recv_get_byte_j___d251,
	       TASK_c_host_recv_get_byte_j___d252,
	       TASK_c_host_recv_get_byte_j___d254,
	       TASK_c_host_recv_get_byte_j___d255,
	       TASK_c_host_recv_get_byte_j___d257,
	       TASK_c_host_recv_get_byte_j___d258,
	       TASK_c_host_recv_get_byte_j___d260,
	       TASK_c_host_recv_get_byte_j___d261,
	       TASK_c_host_recv_get_byte_j___d263,
	       TASK_c_host_recv_get_byte_j___d264,
	       TASK_c_host_recv_get_byte_j___d266,
	       TASK_c_host_recv_get_byte_j___d267,
	       TASK_c_host_recv_get_byte_j___d269,
	       TASK_c_host_recv_get_byte_j___d270,
	       TASK_c_host_recv_get_byte_j___d272,
	       TASK_c_host_recv_get_byte_j___d273,
	       TASK_c_host_recv_get_byte_j___d275,
	       TASK_c_host_recv_get_byte_j___d276,
	       TASK_c_host_recv_get_byte_j___d278,
	       TASK_c_host_recv_get_byte_j___d279,
	       TASK_c_host_recv_get_byte_j___d281,
	       TASK_c_host_recv_get_byte_j___d282,
	       TASK_c_host_recv_get_byte_j___d284,
	       TASK_c_host_recv_get_byte_j___d285,
	       TASK_c_host_recv_get_byte_j___d287,
	       TASK_c_host_recv_get_byte_j___d288,
	       TASK_c_host_recv_get_byte_j___d290,
	       TASK_c_host_recv_get_byte_j___d291,
	       TASK_c_host_recv_get_byte_j___d293,
	       TASK_c_host_recv_get_byte_j___d294,
	       TASK_c_host_recv_get_byte_j___d296,
	       TASK_c_host_recv_get_byte_j___d297,
	       TASK_c_host_recv_get_byte_j___d299,
	       TASK_c_host_recv_get_byte_j___d300,
	       TASK_c_host_recv_get_byte_j___d302,
	       TASK_c_host_recv_get_byte_j___d303,
	       TASK_c_host_recv_get_byte_j___d305,
	       TASK_c_host_recv_get_byte_j___d306,
	       TASK_c_host_recv_get_byte_j___d308,
	       x__h8555 } ;
  assign comms$EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_addr ;
  assign comms$EN_fo_AXI4_Wr_Data_d512_u0_deq =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_data ;
  assign comms$EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq =
	     CAN_FIRE_RL_rl_connect_host_AXI4_rd_addr ;
  assign comms$EN_fo_AXI4L_Wr_Addr_a32_u0_deq =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_addr ;
  assign comms$EN_fo_AXI4L_Wr_Data_d32_deq =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_data ;
  assign comms$EN_fo_AXI4L_Rd_Addr_a32_u0_deq =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_rd_addr ;
  assign comms$EN_fi_AXI4_Wr_Resp_i16_u0_enq =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_resp ;
  assign comms$EN_fi_AXI4_Rd_Data_i16_d512_u0_enq =
	     CAN_FIRE_RL_rl_connect_host_AXI4_rd_data ;
  assign comms$EN_fi_AXI4L_Wr_Resp_u0_enq =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_resp ;
  assign comms$EN_fi_AXI4L_Rd_Data_d32_u0_enq =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_rd_data ;
  assign comms$EN_fi_C_to_BSV_bytevec_enq =
	     WILL_FIRE_RL_rl_host_recv && x__h8555 != 8'd0 ;
  assign comms$EN_fo_BSV_to_C_bytevec_deq = CAN_FIRE_RL_rl_host_send ;

  // submodule ddr_A
  assign ddr_A$araddr = awsteria_hw$ddr_A_M_araddr ;
  assign ddr_A$arburst = awsteria_hw$ddr_A_M_arburst ;
  assign ddr_A$arcache = awsteria_hw$ddr_A_M_arcache ;
  assign ddr_A$arid = awsteria_hw$ddr_A_M_arid ;
  assign ddr_A$arlen = awsteria_hw$ddr_A_M_arlen ;
  assign ddr_A$arlock = awsteria_hw$ddr_A_M_arlock ;
  assign ddr_A$arprot = awsteria_hw$ddr_A_M_arprot ;
  assign ddr_A$arqos = awsteria_hw$ddr_A_M_arqos ;
  assign ddr_A$arregion = awsteria_hw$ddr_A_M_arregion ;
  assign ddr_A$arsize = awsteria_hw$ddr_A_M_arsize ;
  assign ddr_A$arvalid = awsteria_hw$ddr_A_M_arvalid ;
  assign ddr_A$awaddr = awsteria_hw$ddr_A_M_awaddr ;
  assign ddr_A$awburst = awsteria_hw$ddr_A_M_awburst ;
  assign ddr_A$awcache = awsteria_hw$ddr_A_M_awcache ;
  assign ddr_A$awid = awsteria_hw$ddr_A_M_awid ;
  assign ddr_A$awlen = awsteria_hw$ddr_A_M_awlen ;
  assign ddr_A$awlock = awsteria_hw$ddr_A_M_awlock ;
  assign ddr_A$awprot = awsteria_hw$ddr_A_M_awprot ;
  assign ddr_A$awqos = awsteria_hw$ddr_A_M_awqos ;
  assign ddr_A$awregion = awsteria_hw$ddr_A_M_awregion ;
  assign ddr_A$awsize = awsteria_hw$ddr_A_M_awsize ;
  assign ddr_A$awvalid = awsteria_hw$ddr_A_M_awvalid ;
  assign ddr_A$bready = awsteria_hw$ddr_A_M_bready ;
  assign ddr_A$rready = awsteria_hw$ddr_A_M_rready ;
  assign ddr_A$wdata = awsteria_hw$ddr_A_M_wdata ;
  assign ddr_A$wlast = awsteria_hw$ddr_A_M_wlast ;
  assign ddr_A$wstrb = awsteria_hw$ddr_A_M_wstrb ;
  assign ddr_A$wvalid = awsteria_hw$ddr_A_M_wvalid ;

  // submodule ddr_B
  assign ddr_B$araddr = awsteria_hw$ddr_B_M_araddr ;
  assign ddr_B$arburst = awsteria_hw$ddr_B_M_arburst ;
  assign ddr_B$arcache = awsteria_hw$ddr_B_M_arcache ;
  assign ddr_B$arid = awsteria_hw$ddr_B_M_arid ;
  assign ddr_B$arlen = awsteria_hw$ddr_B_M_arlen ;
  assign ddr_B$arlock = awsteria_hw$ddr_B_M_arlock ;
  assign ddr_B$arprot = awsteria_hw$ddr_B_M_arprot ;
  assign ddr_B$arqos = awsteria_hw$ddr_B_M_arqos ;
  assign ddr_B$arregion = awsteria_hw$ddr_B_M_arregion ;
  assign ddr_B$arsize = awsteria_hw$ddr_B_M_arsize ;
  assign ddr_B$arvalid = awsteria_hw$ddr_B_M_arvalid ;
  assign ddr_B$awaddr = awsteria_hw$ddr_B_M_awaddr ;
  assign ddr_B$awburst = awsteria_hw$ddr_B_M_awburst ;
  assign ddr_B$awcache = awsteria_hw$ddr_B_M_awcache ;
  assign ddr_B$awid = awsteria_hw$ddr_B_M_awid ;
  assign ddr_B$awlen = awsteria_hw$ddr_B_M_awlen ;
  assign ddr_B$awlock = awsteria_hw$ddr_B_M_awlock ;
  assign ddr_B$awprot = awsteria_hw$ddr_B_M_awprot ;
  assign ddr_B$awqos = awsteria_hw$ddr_B_M_awqos ;
  assign ddr_B$awregion = awsteria_hw$ddr_B_M_awregion ;
  assign ddr_B$awsize = awsteria_hw$ddr_B_M_awsize ;
  assign ddr_B$awvalid = awsteria_hw$ddr_B_M_awvalid ;
  assign ddr_B$bready = awsteria_hw$ddr_B_M_bready ;
  assign ddr_B$rready = awsteria_hw$ddr_B_M_rready ;
  assign ddr_B$wdata = awsteria_hw$ddr_B_M_wdata ;
  assign ddr_B$wlast = awsteria_hw$ddr_B_M_wlast ;
  assign ddr_B$wstrb = awsteria_hw$ddr_B_M_wstrb ;
  assign ddr_B$wvalid = awsteria_hw$ddr_B_M_wvalid ;

  // submodule ddr_C
  assign ddr_C$araddr = awsteria_hw$ddr_C_M_araddr ;
  assign ddr_C$arburst = awsteria_hw$ddr_C_M_arburst ;
  assign ddr_C$arcache = awsteria_hw$ddr_C_M_arcache ;
  assign ddr_C$arid = awsteria_hw$ddr_C_M_arid ;
  assign ddr_C$arlen = awsteria_hw$ddr_C_M_arlen ;
  assign ddr_C$arlock = awsteria_hw$ddr_C_M_arlock ;
  assign ddr_C$arprot = awsteria_hw$ddr_C_M_arprot ;
  assign ddr_C$arqos = awsteria_hw$ddr_C_M_arqos ;
  assign ddr_C$arregion = awsteria_hw$ddr_C_M_arregion ;
  assign ddr_C$arsize = awsteria_hw$ddr_C_M_arsize ;
  assign ddr_C$arvalid = awsteria_hw$ddr_C_M_arvalid ;
  assign ddr_C$awaddr = awsteria_hw$ddr_C_M_awaddr ;
  assign ddr_C$awburst = awsteria_hw$ddr_C_M_awburst ;
  assign ddr_C$awcache = awsteria_hw$ddr_C_M_awcache ;
  assign ddr_C$awid = awsteria_hw$ddr_C_M_awid ;
  assign ddr_C$awlen = awsteria_hw$ddr_C_M_awlen ;
  assign ddr_C$awlock = awsteria_hw$ddr_C_M_awlock ;
  assign ddr_C$awprot = awsteria_hw$ddr_C_M_awprot ;
  assign ddr_C$awqos = awsteria_hw$ddr_C_M_awqos ;
  assign ddr_C$awregion = awsteria_hw$ddr_C_M_awregion ;
  assign ddr_C$awsize = awsteria_hw$ddr_C_M_awsize ;
  assign ddr_C$awvalid = awsteria_hw$ddr_C_M_awvalid ;
  assign ddr_C$bready = awsteria_hw$ddr_C_M_bready ;
  assign ddr_C$rready = awsteria_hw$ddr_C_M_rready ;
  assign ddr_C$wdata = awsteria_hw$ddr_C_M_wdata ;
  assign ddr_C$wlast = awsteria_hw$ddr_C_M_wlast ;
  assign ddr_C$wstrb = awsteria_hw$ddr_C_M_wstrb ;
  assign ddr_C$wvalid = awsteria_hw$ddr_C_M_wvalid ;

  // submodule ddr_D
  assign ddr_D$araddr = awsteria_hw$ddr_D_M_araddr ;
  assign ddr_D$arburst = awsteria_hw$ddr_D_M_arburst ;
  assign ddr_D$arcache = awsteria_hw$ddr_D_M_arcache ;
  assign ddr_D$arid = awsteria_hw$ddr_D_M_arid ;
  assign ddr_D$arlen = awsteria_hw$ddr_D_M_arlen ;
  assign ddr_D$arlock = awsteria_hw$ddr_D_M_arlock ;
  assign ddr_D$arprot = awsteria_hw$ddr_D_M_arprot ;
  assign ddr_D$arqos = awsteria_hw$ddr_D_M_arqos ;
  assign ddr_D$arregion = awsteria_hw$ddr_D_M_arregion ;
  assign ddr_D$arsize = awsteria_hw$ddr_D_M_arsize ;
  assign ddr_D$arvalid = awsteria_hw$ddr_D_M_arvalid ;
  assign ddr_D$awaddr = awsteria_hw$ddr_D_M_awaddr ;
  assign ddr_D$awburst = awsteria_hw$ddr_D_M_awburst ;
  assign ddr_D$awcache = awsteria_hw$ddr_D_M_awcache ;
  assign ddr_D$awid = awsteria_hw$ddr_D_M_awid ;
  assign ddr_D$awlen = awsteria_hw$ddr_D_M_awlen ;
  assign ddr_D$awlock = awsteria_hw$ddr_D_M_awlock ;
  assign ddr_D$awprot = awsteria_hw$ddr_D_M_awprot ;
  assign ddr_D$awqos = awsteria_hw$ddr_D_M_awqos ;
  assign ddr_D$awregion = awsteria_hw$ddr_D_M_awregion ;
  assign ddr_D$awsize = awsteria_hw$ddr_D_M_awsize ;
  assign ddr_D$awvalid = awsteria_hw$ddr_D_M_awvalid ;
  assign ddr_D$bready = awsteria_hw$ddr_D_M_bready ;
  assign ddr_D$rready = awsteria_hw$ddr_D_M_rready ;
  assign ddr_D$wdata = awsteria_hw$ddr_D_M_wdata ;
  assign ddr_D$wlast = awsteria_hw$ddr_D_M_wlast ;
  assign ddr_D$wstrb = awsteria_hw$ddr_D_M_wstrb ;
  assign ddr_D$wvalid = awsteria_hw$ddr_D_M_wvalid ;

  // submodule host_AXI4L_xactor_f_rd_addr
  assign host_AXI4L_xactor_f_rd_addr$D_IN =
	     comms$fo_AXI4L_Rd_Addr_a32_u0_first ;
  assign host_AXI4L_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_rd_addr ;
  assign host_AXI4L_xactor_f_rd_addr$DEQ =
	     host_AXI4L_xactor_f_rd_addr$EMPTY_N &&
	     awsteria_hw$host_AXI4L_S_arready ;
  assign host_AXI4L_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule host_AXI4L_xactor_f_rd_data
  assign host_AXI4L_xactor_f_rd_data$D_IN =
	     { awsteria_hw$host_AXI4L_S_rresp,
	       awsteria_hw$host_AXI4L_S_rdata } ;
  assign host_AXI4L_xactor_f_rd_data$ENQ =
	     awsteria_hw$host_AXI4L_S_rvalid &&
	     host_AXI4L_xactor_f_rd_data$FULL_N ;
  assign host_AXI4L_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_rd_data ;
  assign host_AXI4L_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule host_AXI4L_xactor_f_wr_addr
  assign host_AXI4L_xactor_f_wr_addr$D_IN =
	     comms$fo_AXI4L_Wr_Addr_a32_u0_first ;
  assign host_AXI4L_xactor_f_wr_addr$ENQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_addr ;
  assign host_AXI4L_xactor_f_wr_addr$DEQ =
	     host_AXI4L_xactor_f_wr_addr$EMPTY_N &&
	     awsteria_hw$host_AXI4L_S_awready ;
  assign host_AXI4L_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule host_AXI4L_xactor_f_wr_data
  assign host_AXI4L_xactor_f_wr_data$D_IN = comms$fo_AXI4L_Wr_Data_d32_first ;
  assign host_AXI4L_xactor_f_wr_data$ENQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_data ;
  assign host_AXI4L_xactor_f_wr_data$DEQ =
	     host_AXI4L_xactor_f_wr_data$EMPTY_N &&
	     awsteria_hw$host_AXI4L_S_wready ;
  assign host_AXI4L_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule host_AXI4L_xactor_f_wr_resp
  assign host_AXI4L_xactor_f_wr_resp$D_IN = awsteria_hw$host_AXI4L_S_bresp ;
  assign host_AXI4L_xactor_f_wr_resp$ENQ =
	     awsteria_hw$host_AXI4L_S_bvalid &&
	     host_AXI4L_xactor_f_wr_resp$FULL_N ;
  assign host_AXI4L_xactor_f_wr_resp$DEQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4L_wr_resp ;
  assign host_AXI4L_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule host_AXI4_xactor_f_rd_addr
  assign host_AXI4_xactor_f_rd_addr$D_IN =
	     comms$fo_AXI4_Rd_Addr_i16_a64_u0_first ;
  assign host_AXI4_xactor_f_rd_addr$ENQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4_rd_addr ;
  assign host_AXI4_xactor_f_rd_addr$DEQ =
	     host_AXI4_xactor_f_rd_addr$EMPTY_N &&
	     awsteria_hw$host_AXI4_S_arready ;
  assign host_AXI4_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule host_AXI4_xactor_f_rd_data
  assign host_AXI4_xactor_f_rd_data$D_IN =
	     { awsteria_hw$host_AXI4_S_rid,
	       awsteria_hw$host_AXI4_S_rdata,
	       awsteria_hw$host_AXI4_S_rresp,
	       awsteria_hw$host_AXI4_S_rlast } ;
  assign host_AXI4_xactor_f_rd_data$ENQ =
	     awsteria_hw$host_AXI4_S_rvalid &&
	     host_AXI4_xactor_f_rd_data$FULL_N ;
  assign host_AXI4_xactor_f_rd_data$DEQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4_rd_data ;
  assign host_AXI4_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule host_AXI4_xactor_f_wr_addr
  assign host_AXI4_xactor_f_wr_addr$D_IN =
	     comms$fo_AXI4_Wr_Addr_i16_a64_u0_first ;
  assign host_AXI4_xactor_f_wr_addr$ENQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_addr ;
  assign host_AXI4_xactor_f_wr_addr$DEQ =
	     host_AXI4_xactor_f_wr_addr$EMPTY_N &&
	     awsteria_hw$host_AXI4_S_awready ;
  assign host_AXI4_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule host_AXI4_xactor_f_wr_data
  assign host_AXI4_xactor_f_wr_data$D_IN =
	     comms$fo_AXI4_Wr_Data_d512_u0_first ;
  assign host_AXI4_xactor_f_wr_data$ENQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_data ;
  assign host_AXI4_xactor_f_wr_data$DEQ =
	     host_AXI4_xactor_f_wr_data$EMPTY_N &&
	     awsteria_hw$host_AXI4_S_wready ;
  assign host_AXI4_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule host_AXI4_xactor_f_wr_resp
  assign host_AXI4_xactor_f_wr_resp$D_IN =
	     { awsteria_hw$host_AXI4_S_bid, awsteria_hw$host_AXI4_S_bresp } ;
  assign host_AXI4_xactor_f_wr_resp$ENQ =
	     awsteria_hw$host_AXI4_S_bvalid &&
	     host_AXI4_xactor_f_wr_resp$FULL_N ;
  assign host_AXI4_xactor_f_wr_resp$DEQ =
	     CAN_FIRE_RL_rl_connect_host_AXI4_wr_resp ;
  assign host_AXI4_xactor_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign x__h8555 =
	     (v__h6339 == 8'd0) ?
	       v__h6339 :
	       TASK_c_host_recv_get_byte_j___d189 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_counter <= `BSV_ASSIGNMENT_DELAY 64'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (rg_counter$EN)
	  rg_counter <= `BSV_ASSIGNMENT_DELAY rg_counter$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_counter = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start)
	$display("Bluespec Catamaran simulation v2.2");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start)
	$display("Copyright (c) 2020-2023 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_listen)
	$display("INFO: Listening for connection from host-side on TCP port %0d",
		 16'd30000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_listen) c_host_listen(16'd30000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_accept)
	begin
	  v__h6007 = c_host_try_accept(8'hAA);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_accept && v__h6007 == 8'd1)
	$display("INFO: Accepted connection from host-side on TCP port %0d",
		 16'd30000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv)
	begin
	  v__h6339 = c_host_recv2(8'hAA);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d189 =
	      c_host_recv_get_byte_j(32'd0);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d308 =
	      c_host_recv_get_byte_j(32'd1);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d306 =
	      c_host_recv_get_byte_j(32'd2);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d305 =
	      c_host_recv_get_byte_j(32'd3);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d303 =
	      c_host_recv_get_byte_j(32'd4);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d302 =
	      c_host_recv_get_byte_j(32'd5);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d300 =
	      c_host_recv_get_byte_j(32'd6);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d299 =
	      c_host_recv_get_byte_j(32'd7);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d297 =
	      c_host_recv_get_byte_j(32'd8);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d296 =
	      c_host_recv_get_byte_j(32'd9);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d294 =
	      c_host_recv_get_byte_j(32'd10);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d293 =
	      c_host_recv_get_byte_j(32'd11);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d291 =
	      c_host_recv_get_byte_j(32'd12);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d290 =
	      c_host_recv_get_byte_j(32'd13);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d288 =
	      c_host_recv_get_byte_j(32'd14);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d287 =
	      c_host_recv_get_byte_j(32'd15);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d285 =
	      c_host_recv_get_byte_j(32'd16);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d284 =
	      c_host_recv_get_byte_j(32'd17);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d282 =
	      c_host_recv_get_byte_j(32'd18);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d281 =
	      c_host_recv_get_byte_j(32'd19);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d279 =
	      c_host_recv_get_byte_j(32'd20);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d278 =
	      c_host_recv_get_byte_j(32'd21);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d276 =
	      c_host_recv_get_byte_j(32'd22);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d275 =
	      c_host_recv_get_byte_j(32'd23);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d273 =
	      c_host_recv_get_byte_j(32'd24);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d272 =
	      c_host_recv_get_byte_j(32'd25);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d270 =
	      c_host_recv_get_byte_j(32'd26);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d269 =
	      c_host_recv_get_byte_j(32'd27);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d267 =
	      c_host_recv_get_byte_j(32'd28);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d266 =
	      c_host_recv_get_byte_j(32'd29);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d264 =
	      c_host_recv_get_byte_j(32'd30);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d263 =
	      c_host_recv_get_byte_j(32'd31);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d261 =
	      c_host_recv_get_byte_j(32'd32);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d260 =
	      c_host_recv_get_byte_j(32'd33);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d258 =
	      c_host_recv_get_byte_j(32'd34);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d257 =
	      c_host_recv_get_byte_j(32'd35);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d255 =
	      c_host_recv_get_byte_j(32'd36);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d254 =
	      c_host_recv_get_byte_j(32'd37);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d252 =
	      c_host_recv_get_byte_j(32'd38);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d251 =
	      c_host_recv_get_byte_j(32'd39);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d249 =
	      c_host_recv_get_byte_j(32'd40);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d248 =
	      c_host_recv_get_byte_j(32'd41);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d246 =
	      c_host_recv_get_byte_j(32'd42);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d245 =
	      c_host_recv_get_byte_j(32'd43);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d243 =
	      c_host_recv_get_byte_j(32'd44);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d242 =
	      c_host_recv_get_byte_j(32'd45);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d240 =
	      c_host_recv_get_byte_j(32'd46);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d239 =
	      c_host_recv_get_byte_j(32'd47);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d237 =
	      c_host_recv_get_byte_j(32'd48);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d236 =
	      c_host_recv_get_byte_j(32'd49);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d234 =
	      c_host_recv_get_byte_j(32'd50);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d233 =
	      c_host_recv_get_byte_j(32'd51);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d231 =
	      c_host_recv_get_byte_j(32'd52);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d230 =
	      c_host_recv_get_byte_j(32'd53);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d228 =
	      c_host_recv_get_byte_j(32'd54);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d227 =
	      c_host_recv_get_byte_j(32'd55);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d225 =
	      c_host_recv_get_byte_j(32'd56);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d224 =
	      c_host_recv_get_byte_j(32'd57);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d222 =
	      c_host_recv_get_byte_j(32'd58);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d221 =
	      c_host_recv_get_byte_j(32'd59);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d219 =
	      c_host_recv_get_byte_j(32'd60);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d218 =
	      c_host_recv_get_byte_j(32'd61);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d216 =
	      c_host_recv_get_byte_j(32'd62);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d215 =
	      c_host_recv_get_byte_j(32'd63);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d213 =
	      c_host_recv_get_byte_j(32'd64);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d212 =
	      c_host_recv_get_byte_j(32'd65);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d210 =
	      c_host_recv_get_byte_j(32'd66);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d209 =
	      c_host_recv_get_byte_j(32'd67);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d207 =
	      c_host_recv_get_byte_j(32'd68);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d206 =
	      c_host_recv_get_byte_j(32'd69);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d204 =
	      c_host_recv_get_byte_j(32'd70);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d203 =
	      c_host_recv_get_byte_j(32'd71);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d201 =
	      c_host_recv_get_byte_j(32'd72);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d200 =
	      c_host_recv_get_byte_j(32'd73);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d198 =
	      c_host_recv_get_byte_j(32'd74);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d197 =
	      c_host_recv_get_byte_j(32'd75);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d195 =
	      c_host_recv_get_byte_j(32'd76);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d194 =
	      c_host_recv_get_byte_j(32'd77);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_recv && v__h6339 != 8'd0)
	begin
	  TASK_c_host_recv_get_byte_j___d193 =
	      c_host_recv_get_byte_j(32'd78);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h20069 =
	      c_host_send_put_byte_j(32'd0,
					       comms$fo_BSV_to_C_bytevec_first[7:0]);
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h21763 =
	      c_host_send_put_byte_j(32'd1,
					       comms$fo_BSV_to_C_bytevec_first[15:8]);
	  #0;
	end
    v__h21757 = v__h20069 | v__h21763;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h21841 =
	      c_host_send_put_byte_j(32'd2,
					       comms$fo_BSV_to_C_bytevec_first[23:16]);
	  #0;
	end
    v__h21835 = v__h21757 | v__h21841;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h21919 =
	      c_host_send_put_byte_j(32'd3,
					       comms$fo_BSV_to_C_bytevec_first[31:24]);
	  #0;
	end
    v__h21913 = v__h21835 | v__h21919;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h21997 =
	      c_host_send_put_byte_j(32'd4,
					       comms$fo_BSV_to_C_bytevec_first[39:32]);
	  #0;
	end
    v__h21991 = v__h21913 | v__h21997;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22075 =
	      c_host_send_put_byte_j(32'd5,
					       comms$fo_BSV_to_C_bytevec_first[47:40]);
	  #0;
	end
    v__h22069 = v__h21991 | v__h22075;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22153 =
	      c_host_send_put_byte_j(32'd6,
					       comms$fo_BSV_to_C_bytevec_first[55:48]);
	  #0;
	end
    v__h22147 = v__h22069 | v__h22153;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22231 =
	      c_host_send_put_byte_j(32'd7,
					       comms$fo_BSV_to_C_bytevec_first[63:56]);
	  #0;
	end
    v__h22225 = v__h22147 | v__h22231;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22309 =
	      c_host_send_put_byte_j(32'd8,
					       comms$fo_BSV_to_C_bytevec_first[71:64]);
	  #0;
	end
    v__h22303 = v__h22225 | v__h22309;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22387 =
	      c_host_send_put_byte_j(32'd9,
					       comms$fo_BSV_to_C_bytevec_first[79:72]);
	  #0;
	end
    v__h22381 = v__h22303 | v__h22387;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22465 =
	      c_host_send_put_byte_j(32'd10,
					       comms$fo_BSV_to_C_bytevec_first[87:80]);
	  #0;
	end
    v__h22459 = v__h22381 | v__h22465;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22543 =
	      c_host_send_put_byte_j(32'd11,
					       comms$fo_BSV_to_C_bytevec_first[95:88]);
	  #0;
	end
    v__h22537 = v__h22459 | v__h22543;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22621 =
	      c_host_send_put_byte_j(32'd12,
					       comms$fo_BSV_to_C_bytevec_first[103:96]);
	  #0;
	end
    v__h22615 = v__h22537 | v__h22621;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22699 =
	      c_host_send_put_byte_j(32'd13,
					       comms$fo_BSV_to_C_bytevec_first[111:104]);
	  #0;
	end
    v__h22693 = v__h22615 | v__h22699;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22777 =
	      c_host_send_put_byte_j(32'd14,
					       comms$fo_BSV_to_C_bytevec_first[119:112]);
	  #0;
	end
    v__h22771 = v__h22693 | v__h22777;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22855 =
	      c_host_send_put_byte_j(32'd15,
					       comms$fo_BSV_to_C_bytevec_first[127:120]);
	  #0;
	end
    v__h22849 = v__h22771 | v__h22855;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h22933 =
	      c_host_send_put_byte_j(32'd16,
					       comms$fo_BSV_to_C_bytevec_first[135:128]);
	  #0;
	end
    v__h22927 = v__h22849 | v__h22933;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23011 =
	      c_host_send_put_byte_j(32'd17,
					       comms$fo_BSV_to_C_bytevec_first[143:136]);
	  #0;
	end
    v__h23005 = v__h22927 | v__h23011;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23089 =
	      c_host_send_put_byte_j(32'd18,
					       comms$fo_BSV_to_C_bytevec_first[151:144]);
	  #0;
	end
    v__h23083 = v__h23005 | v__h23089;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23167 =
	      c_host_send_put_byte_j(32'd19,
					       comms$fo_BSV_to_C_bytevec_first[159:152]);
	  #0;
	end
    v__h23161 = v__h23083 | v__h23167;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23245 =
	      c_host_send_put_byte_j(32'd20,
					       comms$fo_BSV_to_C_bytevec_first[167:160]);
	  #0;
	end
    v__h23239 = v__h23161 | v__h23245;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23323 =
	      c_host_send_put_byte_j(32'd21,
					       comms$fo_BSV_to_C_bytevec_first[175:168]);
	  #0;
	end
    v__h23317 = v__h23239 | v__h23323;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23401 =
	      c_host_send_put_byte_j(32'd22,
					       comms$fo_BSV_to_C_bytevec_first[183:176]);
	  #0;
	end
    v__h23395 = v__h23317 | v__h23401;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23479 =
	      c_host_send_put_byte_j(32'd23,
					       comms$fo_BSV_to_C_bytevec_first[191:184]);
	  #0;
	end
    v__h23473 = v__h23395 | v__h23479;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23557 =
	      c_host_send_put_byte_j(32'd24,
					       comms$fo_BSV_to_C_bytevec_first[199:192]);
	  #0;
	end
    v__h23551 = v__h23473 | v__h23557;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23635 =
	      c_host_send_put_byte_j(32'd25,
					       comms$fo_BSV_to_C_bytevec_first[207:200]);
	  #0;
	end
    v__h23629 = v__h23551 | v__h23635;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23713 =
	      c_host_send_put_byte_j(32'd26,
					       comms$fo_BSV_to_C_bytevec_first[215:208]);
	  #0;
	end
    v__h23707 = v__h23629 | v__h23713;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23791 =
	      c_host_send_put_byte_j(32'd27,
					       comms$fo_BSV_to_C_bytevec_first[223:216]);
	  #0;
	end
    v__h23785 = v__h23707 | v__h23791;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23869 =
	      c_host_send_put_byte_j(32'd28,
					       comms$fo_BSV_to_C_bytevec_first[231:224]);
	  #0;
	end
    v__h23863 = v__h23785 | v__h23869;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h23947 =
	      c_host_send_put_byte_j(32'd29,
					       comms$fo_BSV_to_C_bytevec_first[239:232]);
	  #0;
	end
    v__h23941 = v__h23863 | v__h23947;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24025 =
	      c_host_send_put_byte_j(32'd30,
					       comms$fo_BSV_to_C_bytevec_first[247:240]);
	  #0;
	end
    v__h24019 = v__h23941 | v__h24025;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24103 =
	      c_host_send_put_byte_j(32'd31,
					       comms$fo_BSV_to_C_bytevec_first[255:248]);
	  #0;
	end
    v__h24097 = v__h24019 | v__h24103;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24181 =
	      c_host_send_put_byte_j(32'd32,
					       comms$fo_BSV_to_C_bytevec_first[263:256]);
	  #0;
	end
    v__h24175 = v__h24097 | v__h24181;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24259 =
	      c_host_send_put_byte_j(32'd33,
					       comms$fo_BSV_to_C_bytevec_first[271:264]);
	  #0;
	end
    v__h24253 = v__h24175 | v__h24259;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24337 =
	      c_host_send_put_byte_j(32'd34,
					       comms$fo_BSV_to_C_bytevec_first[279:272]);
	  #0;
	end
    v__h24331 = v__h24253 | v__h24337;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24415 =
	      c_host_send_put_byte_j(32'd35,
					       comms$fo_BSV_to_C_bytevec_first[287:280]);
	  #0;
	end
    v__h24409 = v__h24331 | v__h24415;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24493 =
	      c_host_send_put_byte_j(32'd36,
					       comms$fo_BSV_to_C_bytevec_first[295:288]);
	  #0;
	end
    v__h24487 = v__h24409 | v__h24493;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24571 =
	      c_host_send_put_byte_j(32'd37,
					       comms$fo_BSV_to_C_bytevec_first[303:296]);
	  #0;
	end
    v__h24565 = v__h24487 | v__h24571;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24649 =
	      c_host_send_put_byte_j(32'd38,
					       comms$fo_BSV_to_C_bytevec_first[311:304]);
	  #0;
	end
    v__h24643 = v__h24565 | v__h24649;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24727 =
	      c_host_send_put_byte_j(32'd39,
					       comms$fo_BSV_to_C_bytevec_first[319:312]);
	  #0;
	end
    v__h24721 = v__h24643 | v__h24727;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24805 =
	      c_host_send_put_byte_j(32'd40,
					       comms$fo_BSV_to_C_bytevec_first[327:320]);
	  #0;
	end
    v__h24799 = v__h24721 | v__h24805;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24883 =
	      c_host_send_put_byte_j(32'd41,
					       comms$fo_BSV_to_C_bytevec_first[335:328]);
	  #0;
	end
    v__h24877 = v__h24799 | v__h24883;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h24961 =
	      c_host_send_put_byte_j(32'd42,
					       comms$fo_BSV_to_C_bytevec_first[343:336]);
	  #0;
	end
    v__h24955 = v__h24877 | v__h24961;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25039 =
	      c_host_send_put_byte_j(32'd43,
					       comms$fo_BSV_to_C_bytevec_first[351:344]);
	  #0;
	end
    v__h25033 = v__h24955 | v__h25039;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25117 =
	      c_host_send_put_byte_j(32'd44,
					       comms$fo_BSV_to_C_bytevec_first[359:352]);
	  #0;
	end
    v__h25111 = v__h25033 | v__h25117;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25195 =
	      c_host_send_put_byte_j(32'd45,
					       comms$fo_BSV_to_C_bytevec_first[367:360]);
	  #0;
	end
    v__h25189 = v__h25111 | v__h25195;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25273 =
	      c_host_send_put_byte_j(32'd46,
					       comms$fo_BSV_to_C_bytevec_first[375:368]);
	  #0;
	end
    v__h25267 = v__h25189 | v__h25273;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25351 =
	      c_host_send_put_byte_j(32'd47,
					       comms$fo_BSV_to_C_bytevec_first[383:376]);
	  #0;
	end
    v__h25345 = v__h25267 | v__h25351;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25429 =
	      c_host_send_put_byte_j(32'd48,
					       comms$fo_BSV_to_C_bytevec_first[391:384]);
	  #0;
	end
    v__h25423 = v__h25345 | v__h25429;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25507 =
	      c_host_send_put_byte_j(32'd49,
					       comms$fo_BSV_to_C_bytevec_first[399:392]);
	  #0;
	end
    v__h25501 = v__h25423 | v__h25507;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25585 =
	      c_host_send_put_byte_j(32'd50,
					       comms$fo_BSV_to_C_bytevec_first[407:400]);
	  #0;
	end
    v__h25579 = v__h25501 | v__h25585;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25663 =
	      c_host_send_put_byte_j(32'd51,
					       comms$fo_BSV_to_C_bytevec_first[415:408]);
	  #0;
	end
    v__h25657 = v__h25579 | v__h25663;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25741 =
	      c_host_send_put_byte_j(32'd52,
					       comms$fo_BSV_to_C_bytevec_first[423:416]);
	  #0;
	end
    v__h25735 = v__h25657 | v__h25741;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25819 =
	      c_host_send_put_byte_j(32'd53,
					       comms$fo_BSV_to_C_bytevec_first[431:424]);
	  #0;
	end
    v__h25813 = v__h25735 | v__h25819;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25897 =
	      c_host_send_put_byte_j(32'd54,
					       comms$fo_BSV_to_C_bytevec_first[439:432]);
	  #0;
	end
    v__h25891 = v__h25813 | v__h25897;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h25975 =
	      c_host_send_put_byte_j(32'd55,
					       comms$fo_BSV_to_C_bytevec_first[447:440]);
	  #0;
	end
    v__h25969 = v__h25891 | v__h25975;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26053 =
	      c_host_send_put_byte_j(32'd56,
					       comms$fo_BSV_to_C_bytevec_first[455:448]);
	  #0;
	end
    v__h26047 = v__h25969 | v__h26053;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26131 =
	      c_host_send_put_byte_j(32'd57,
					       comms$fo_BSV_to_C_bytevec_first[463:456]);
	  #0;
	end
    v__h26125 = v__h26047 | v__h26131;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26209 =
	      c_host_send_put_byte_j(32'd58,
					       comms$fo_BSV_to_C_bytevec_first[471:464]);
	  #0;
	end
    v__h26203 = v__h26125 | v__h26209;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26287 =
	      c_host_send_put_byte_j(32'd59,
					       comms$fo_BSV_to_C_bytevec_first[479:472]);
	  #0;
	end
    v__h26281 = v__h26203 | v__h26287;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26365 =
	      c_host_send_put_byte_j(32'd60,
					       comms$fo_BSV_to_C_bytevec_first[487:480]);
	  #0;
	end
    v__h26359 = v__h26281 | v__h26365;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26443 =
	      c_host_send_put_byte_j(32'd61,
					       comms$fo_BSV_to_C_bytevec_first[495:488]);
	  #0;
	end
    v__h26437 = v__h26359 | v__h26443;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26521 =
	      c_host_send_put_byte_j(32'd62,
					       comms$fo_BSV_to_C_bytevec_first[503:496]);
	  #0;
	end
    v__h26515 = v__h26437 | v__h26521;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26599 =
	      c_host_send_put_byte_j(32'd63,
					       comms$fo_BSV_to_C_bytevec_first[511:504]);
	  #0;
	end
    v__h26593 = v__h26515 | v__h26599;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26677 =
	      c_host_send_put_byte_j(32'd64,
					       comms$fo_BSV_to_C_bytevec_first[519:512]);
	  #0;
	end
    v__h26671 = v__h26593 | v__h26677;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26755 =
	      c_host_send_put_byte_j(32'd65,
					       comms$fo_BSV_to_C_bytevec_first[527:520]);
	  #0;
	end
    v__h26749 = v__h26671 | v__h26755;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26833 =
	      c_host_send_put_byte_j(32'd66,
					       comms$fo_BSV_to_C_bytevec_first[535:528]);
	  #0;
	end
    v__h26827 = v__h26749 | v__h26833;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26911 =
	      c_host_send_put_byte_j(32'd67,
					       comms$fo_BSV_to_C_bytevec_first[543:536]);
	  #0;
	end
    v__h26905 = v__h26827 | v__h26911;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h26989 =
	      c_host_send_put_byte_j(32'd68,
					       comms$fo_BSV_to_C_bytevec_first[551:544]);
	  #0;
	end
    v__h26983 = v__h26905 | v__h26989;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27067 =
	      c_host_send_put_byte_j(32'd69,
					       comms$fo_BSV_to_C_bytevec_first[559:552]);
	  #0;
	end
    v__h27061 = v__h26983 | v__h27067;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27145 =
	      c_host_send_put_byte_j(32'd70,
					       comms$fo_BSV_to_C_bytevec_first[567:560]);
	  #0;
	end
    v__h27139 = v__h27061 | v__h27145;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27223 =
	      c_host_send_put_byte_j(32'd71,
					       comms$fo_BSV_to_C_bytevec_first[575:568]);
	  #0;
	end
    v__h27217 = v__h27139 | v__h27223;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27301 =
	      c_host_send_put_byte_j(32'd72,
					       comms$fo_BSV_to_C_bytevec_first[583:576]);
	  #0;
	end
    v__h27295 = v__h27217 | v__h27301;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27379 =
	      c_host_send_put_byte_j(32'd73,
					       comms$fo_BSV_to_C_bytevec_first[591:584]);
	  #0;
	end
    v__h27373 = v__h27295 | v__h27379;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27457 =
	      c_host_send_put_byte_j(32'd74,
					       comms$fo_BSV_to_C_bytevec_first[599:592]);
	  #0;
	end
    v__h27451 = v__h27373 | v__h27457;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send)
	begin
	  v__h27535 =
	      c_host_send_put_byte_j(32'd75,
					       comms$fo_BSV_to_C_bytevec_first[607:600]);
	  #0;
	end
    v__h20052 = v__h27451 | v__h27535;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_host_send && v__h20052 != 8'd0)
	c_host_send2(8'hAA);
    if (RST_N != `BSV_RESET_VALUE)
      if (awsteria_hw$m_halted)
	$display("Top_HW_Side: awsteria_hw.m_halted == True");
    if (RST_N != `BSV_RESET_VALUE) if (awsteria_hw$m_halted) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTop_HW_Side

