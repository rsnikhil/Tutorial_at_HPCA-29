//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// fo_AXI4_Wr_Addr_i16_a64_u0_first  O   109 reg
// RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first  O     1 reg
// RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq  O     1 reg
// fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty  O     1 reg
// RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty  O     1 const
// fo_AXI4_Wr_Data_d512_u0_first  O   577 reg
// RDY_fo_AXI4_Wr_Data_d512_u0_first  O     1 reg
// RDY_fo_AXI4_Wr_Data_d512_u0_deq  O     1 reg
// fo_AXI4_Wr_Data_d512_u0_notEmpty  O     1 reg
// RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty  O     1 const
// fo_AXI4_Rd_Addr_i16_a64_u0_first  O   109 reg
// RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first  O     1 reg
// RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq  O     1 reg
// fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty  O     1 reg
// RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty  O     1 const
// fo_AXI4L_Wr_Addr_a32_u0_first  O    35 reg
// RDY_fo_AXI4L_Wr_Addr_a32_u0_first  O     1 reg
// RDY_fo_AXI4L_Wr_Addr_a32_u0_deq  O     1 reg
// fo_AXI4L_Wr_Addr_a32_u0_notEmpty  O     1 reg
// RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty  O     1 const
// fo_AXI4L_Wr_Data_d32_first     O    36 reg
// RDY_fo_AXI4L_Wr_Data_d32_first  O     1 reg
// RDY_fo_AXI4L_Wr_Data_d32_deq   O     1 reg
// fo_AXI4L_Wr_Data_d32_notEmpty  O     1 reg
// RDY_fo_AXI4L_Wr_Data_d32_notEmpty  O     1 const
// fo_AXI4L_Rd_Addr_a32_u0_first  O    35 reg
// RDY_fo_AXI4L_Rd_Addr_a32_u0_first  O     1 reg
// RDY_fo_AXI4L_Rd_Addr_a32_u0_deq  O     1 reg
// fo_AXI4L_Rd_Addr_a32_u0_notEmpty  O     1 reg
// RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty  O     1 const
// RDY_fi_AXI4_Wr_Resp_i16_u0_enq  O     1 reg
// fi_AXI4_Wr_Resp_i16_u0_notFull  O     1 reg
// RDY_fi_AXI4_Wr_Resp_i16_u0_notFull  O     1 const
// RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq  O     1 reg
// fi_AXI4_Rd_Data_i16_d512_u0_notFull  O     1 reg
// RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull  O     1 const
// RDY_fi_AXI4L_Wr_Resp_u0_enq    O     1 reg
// fi_AXI4L_Wr_Resp_u0_notFull    O     1 reg
// RDY_fi_AXI4L_Wr_Resp_u0_notFull  O     1 const
// RDY_fi_AXI4L_Rd_Data_d32_u0_enq  O     1 reg
// fi_AXI4L_Rd_Data_d32_u0_notFull  O     1 reg
// RDY_fi_AXI4L_Rd_Data_d32_u0_notFull  O     1 const
// RDY_fi_C_to_BSV_bytevec_enq    O     1 reg
// fi_C_to_BSV_bytevec_notFull    O     1 reg
// RDY_fi_C_to_BSV_bytevec_notFull  O     1 const
// fo_BSV_to_C_bytevec_first      O   608 reg
// RDY_fo_BSV_to_C_bytevec_first  O     1 reg
// RDY_fo_BSV_to_C_bytevec_deq    O     1 reg
// fo_BSV_to_C_bytevec_notEmpty   O     1 reg
// RDY_fo_BSV_to_C_bytevec_notEmpty  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// fi_AXI4_Wr_Resp_i16_u0_enq_x   I    18 reg
// fi_AXI4_Rd_Data_i16_d512_u0_enq_x  I   531 reg
// fi_AXI4L_Wr_Resp_u0_enq_x      I     2 reg
// fi_AXI4L_Rd_Data_d32_u0_enq_x  I    34 reg
// fi_C_to_BSV_bytevec_enq_x      I   632 reg
// EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq  I     1
// EN_fo_AXI4_Wr_Data_d512_u0_deq  I     1
// EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq  I     1
// EN_fo_AXI4L_Wr_Addr_a32_u0_deq  I     1
// EN_fo_AXI4L_Wr_Data_d32_deq    I     1
// EN_fo_AXI4L_Rd_Addr_a32_u0_deq  I     1
// EN_fi_AXI4_Wr_Resp_i16_u0_enq  I     1
// EN_fi_AXI4_Rd_Data_i16_d512_u0_enq  I     1
// EN_fi_AXI4L_Wr_Resp_u0_enq     I     1
// EN_fi_AXI4L_Rd_Data_d32_u0_enq  I     1
// EN_fi_C_to_BSV_bytevec_enq     I     1
// EN_fo_BSV_to_C_bytevec_deq     I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkBytevec(CLK,
		 RST_N,

		 fo_AXI4_Wr_Addr_i16_a64_u0_first,
		 RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first,

		 EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
		 RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq,

		 fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty,
		 RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty,

		 fo_AXI4_Wr_Data_d512_u0_first,
		 RDY_fo_AXI4_Wr_Data_d512_u0_first,

		 EN_fo_AXI4_Wr_Data_d512_u0_deq,
		 RDY_fo_AXI4_Wr_Data_d512_u0_deq,

		 fo_AXI4_Wr_Data_d512_u0_notEmpty,
		 RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty,

		 fo_AXI4_Rd_Addr_i16_a64_u0_first,
		 RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first,

		 EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
		 RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq,

		 fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty,
		 RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty,

		 fo_AXI4L_Wr_Addr_a32_u0_first,
		 RDY_fo_AXI4L_Wr_Addr_a32_u0_first,

		 EN_fo_AXI4L_Wr_Addr_a32_u0_deq,
		 RDY_fo_AXI4L_Wr_Addr_a32_u0_deq,

		 fo_AXI4L_Wr_Addr_a32_u0_notEmpty,
		 RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty,

		 fo_AXI4L_Wr_Data_d32_first,
		 RDY_fo_AXI4L_Wr_Data_d32_first,

		 EN_fo_AXI4L_Wr_Data_d32_deq,
		 RDY_fo_AXI4L_Wr_Data_d32_deq,

		 fo_AXI4L_Wr_Data_d32_notEmpty,
		 RDY_fo_AXI4L_Wr_Data_d32_notEmpty,

		 fo_AXI4L_Rd_Addr_a32_u0_first,
		 RDY_fo_AXI4L_Rd_Addr_a32_u0_first,

		 EN_fo_AXI4L_Rd_Addr_a32_u0_deq,
		 RDY_fo_AXI4L_Rd_Addr_a32_u0_deq,

		 fo_AXI4L_Rd_Addr_a32_u0_notEmpty,
		 RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty,

		 fi_AXI4_Wr_Resp_i16_u0_enq_x,
		 EN_fi_AXI4_Wr_Resp_i16_u0_enq,
		 RDY_fi_AXI4_Wr_Resp_i16_u0_enq,

		 fi_AXI4_Wr_Resp_i16_u0_notFull,
		 RDY_fi_AXI4_Wr_Resp_i16_u0_notFull,

		 fi_AXI4_Rd_Data_i16_d512_u0_enq_x,
		 EN_fi_AXI4_Rd_Data_i16_d512_u0_enq,
		 RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq,

		 fi_AXI4_Rd_Data_i16_d512_u0_notFull,
		 RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull,

		 fi_AXI4L_Wr_Resp_u0_enq_x,
		 EN_fi_AXI4L_Wr_Resp_u0_enq,
		 RDY_fi_AXI4L_Wr_Resp_u0_enq,

		 fi_AXI4L_Wr_Resp_u0_notFull,
		 RDY_fi_AXI4L_Wr_Resp_u0_notFull,

		 fi_AXI4L_Rd_Data_d32_u0_enq_x,
		 EN_fi_AXI4L_Rd_Data_d32_u0_enq,
		 RDY_fi_AXI4L_Rd_Data_d32_u0_enq,

		 fi_AXI4L_Rd_Data_d32_u0_notFull,
		 RDY_fi_AXI4L_Rd_Data_d32_u0_notFull,

		 fi_C_to_BSV_bytevec_enq_x,
		 EN_fi_C_to_BSV_bytevec_enq,
		 RDY_fi_C_to_BSV_bytevec_enq,

		 fi_C_to_BSV_bytevec_notFull,
		 RDY_fi_C_to_BSV_bytevec_notFull,

		 fo_BSV_to_C_bytevec_first,
		 RDY_fo_BSV_to_C_bytevec_first,

		 EN_fo_BSV_to_C_bytevec_deq,
		 RDY_fo_BSV_to_C_bytevec_deq,

		 fo_BSV_to_C_bytevec_notEmpty,
		 RDY_fo_BSV_to_C_bytevec_notEmpty);
  input  CLK;
  input  RST_N;

  // value method fo_AXI4_Wr_Addr_i16_a64_u0_first
  output [108 : 0] fo_AXI4_Wr_Addr_i16_a64_u0_first;
  output RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first;

  // action method fo_AXI4_Wr_Addr_i16_a64_u0_deq
  input  EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq;
  output RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq;

  // value method fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty
  output fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty;
  output RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty;

  // value method fo_AXI4_Wr_Data_d512_u0_first
  output [576 : 0] fo_AXI4_Wr_Data_d512_u0_first;
  output RDY_fo_AXI4_Wr_Data_d512_u0_first;

  // action method fo_AXI4_Wr_Data_d512_u0_deq
  input  EN_fo_AXI4_Wr_Data_d512_u0_deq;
  output RDY_fo_AXI4_Wr_Data_d512_u0_deq;

  // value method fo_AXI4_Wr_Data_d512_u0_notEmpty
  output fo_AXI4_Wr_Data_d512_u0_notEmpty;
  output RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty;

  // value method fo_AXI4_Rd_Addr_i16_a64_u0_first
  output [108 : 0] fo_AXI4_Rd_Addr_i16_a64_u0_first;
  output RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first;

  // action method fo_AXI4_Rd_Addr_i16_a64_u0_deq
  input  EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq;
  output RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq;

  // value method fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty
  output fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty;
  output RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty;

  // value method fo_AXI4L_Wr_Addr_a32_u0_first
  output [34 : 0] fo_AXI4L_Wr_Addr_a32_u0_first;
  output RDY_fo_AXI4L_Wr_Addr_a32_u0_first;

  // action method fo_AXI4L_Wr_Addr_a32_u0_deq
  input  EN_fo_AXI4L_Wr_Addr_a32_u0_deq;
  output RDY_fo_AXI4L_Wr_Addr_a32_u0_deq;

  // value method fo_AXI4L_Wr_Addr_a32_u0_notEmpty
  output fo_AXI4L_Wr_Addr_a32_u0_notEmpty;
  output RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty;

  // value method fo_AXI4L_Wr_Data_d32_first
  output [35 : 0] fo_AXI4L_Wr_Data_d32_first;
  output RDY_fo_AXI4L_Wr_Data_d32_first;

  // action method fo_AXI4L_Wr_Data_d32_deq
  input  EN_fo_AXI4L_Wr_Data_d32_deq;
  output RDY_fo_AXI4L_Wr_Data_d32_deq;

  // value method fo_AXI4L_Wr_Data_d32_notEmpty
  output fo_AXI4L_Wr_Data_d32_notEmpty;
  output RDY_fo_AXI4L_Wr_Data_d32_notEmpty;

  // value method fo_AXI4L_Rd_Addr_a32_u0_first
  output [34 : 0] fo_AXI4L_Rd_Addr_a32_u0_first;
  output RDY_fo_AXI4L_Rd_Addr_a32_u0_first;

  // action method fo_AXI4L_Rd_Addr_a32_u0_deq
  input  EN_fo_AXI4L_Rd_Addr_a32_u0_deq;
  output RDY_fo_AXI4L_Rd_Addr_a32_u0_deq;

  // value method fo_AXI4L_Rd_Addr_a32_u0_notEmpty
  output fo_AXI4L_Rd_Addr_a32_u0_notEmpty;
  output RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty;

  // action method fi_AXI4_Wr_Resp_i16_u0_enq
  input  [17 : 0] fi_AXI4_Wr_Resp_i16_u0_enq_x;
  input  EN_fi_AXI4_Wr_Resp_i16_u0_enq;
  output RDY_fi_AXI4_Wr_Resp_i16_u0_enq;

  // value method fi_AXI4_Wr_Resp_i16_u0_notFull
  output fi_AXI4_Wr_Resp_i16_u0_notFull;
  output RDY_fi_AXI4_Wr_Resp_i16_u0_notFull;

  // action method fi_AXI4_Rd_Data_i16_d512_u0_enq
  input  [530 : 0] fi_AXI4_Rd_Data_i16_d512_u0_enq_x;
  input  EN_fi_AXI4_Rd_Data_i16_d512_u0_enq;
  output RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq;

  // value method fi_AXI4_Rd_Data_i16_d512_u0_notFull
  output fi_AXI4_Rd_Data_i16_d512_u0_notFull;
  output RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull;

  // action method fi_AXI4L_Wr_Resp_u0_enq
  input  [1 : 0] fi_AXI4L_Wr_Resp_u0_enq_x;
  input  EN_fi_AXI4L_Wr_Resp_u0_enq;
  output RDY_fi_AXI4L_Wr_Resp_u0_enq;

  // value method fi_AXI4L_Wr_Resp_u0_notFull
  output fi_AXI4L_Wr_Resp_u0_notFull;
  output RDY_fi_AXI4L_Wr_Resp_u0_notFull;

  // action method fi_AXI4L_Rd_Data_d32_u0_enq
  input  [33 : 0] fi_AXI4L_Rd_Data_d32_u0_enq_x;
  input  EN_fi_AXI4L_Rd_Data_d32_u0_enq;
  output RDY_fi_AXI4L_Rd_Data_d32_u0_enq;

  // value method fi_AXI4L_Rd_Data_d32_u0_notFull
  output fi_AXI4L_Rd_Data_d32_u0_notFull;
  output RDY_fi_AXI4L_Rd_Data_d32_u0_notFull;

  // action method fi_C_to_BSV_bytevec_enq
  input  [631 : 0] fi_C_to_BSV_bytevec_enq_x;
  input  EN_fi_C_to_BSV_bytevec_enq;
  output RDY_fi_C_to_BSV_bytevec_enq;

  // value method fi_C_to_BSV_bytevec_notFull
  output fi_C_to_BSV_bytevec_notFull;
  output RDY_fi_C_to_BSV_bytevec_notFull;

  // value method fo_BSV_to_C_bytevec_first
  output [607 : 0] fo_BSV_to_C_bytevec_first;
  output RDY_fo_BSV_to_C_bytevec_first;

  // action method fo_BSV_to_C_bytevec_deq
  input  EN_fo_BSV_to_C_bytevec_deq;
  output RDY_fo_BSV_to_C_bytevec_deq;

  // value method fo_BSV_to_C_bytevec_notEmpty
  output fo_BSV_to_C_bytevec_notEmpty;
  output RDY_fo_BSV_to_C_bytevec_notEmpty;

  // signals for module outputs
  wire [607 : 0] fo_BSV_to_C_bytevec_first;
  wire [576 : 0] fo_AXI4_Wr_Data_d512_u0_first;
  wire [108 : 0] fo_AXI4_Rd_Addr_i16_a64_u0_first,
		 fo_AXI4_Wr_Addr_i16_a64_u0_first;
  wire [35 : 0] fo_AXI4L_Wr_Data_d32_first;
  wire [34 : 0] fo_AXI4L_Rd_Addr_a32_u0_first, fo_AXI4L_Wr_Addr_a32_u0_first;
  wire RDY_fi_AXI4L_Rd_Data_d32_u0_enq,
       RDY_fi_AXI4L_Rd_Data_d32_u0_notFull,
       RDY_fi_AXI4L_Wr_Resp_u0_enq,
       RDY_fi_AXI4L_Wr_Resp_u0_notFull,
       RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull,
       RDY_fi_AXI4_Wr_Resp_i16_u0_enq,
       RDY_fi_AXI4_Wr_Resp_i16_u0_notFull,
       RDY_fi_C_to_BSV_bytevec_enq,
       RDY_fi_C_to_BSV_bytevec_notFull,
       RDY_fo_AXI4L_Rd_Addr_a32_u0_deq,
       RDY_fo_AXI4L_Rd_Addr_a32_u0_first,
       RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty,
       RDY_fo_AXI4L_Wr_Addr_a32_u0_deq,
       RDY_fo_AXI4L_Wr_Addr_a32_u0_first,
       RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty,
       RDY_fo_AXI4L_Wr_Data_d32_deq,
       RDY_fo_AXI4L_Wr_Data_d32_first,
       RDY_fo_AXI4L_Wr_Data_d32_notEmpty,
       RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first,
       RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty,
       RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first,
       RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty,
       RDY_fo_AXI4_Wr_Data_d512_u0_deq,
       RDY_fo_AXI4_Wr_Data_d512_u0_first,
       RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty,
       RDY_fo_BSV_to_C_bytevec_deq,
       RDY_fo_BSV_to_C_bytevec_first,
       RDY_fo_BSV_to_C_bytevec_notEmpty,
       fi_AXI4L_Rd_Data_d32_u0_notFull,
       fi_AXI4L_Wr_Resp_u0_notFull,
       fi_AXI4_Rd_Data_i16_d512_u0_notFull,
       fi_AXI4_Wr_Resp_i16_u0_notFull,
       fi_C_to_BSV_bytevec_notFull,
       fo_AXI4L_Rd_Addr_a32_u0_notEmpty,
       fo_AXI4L_Wr_Addr_a32_u0_notEmpty,
       fo_AXI4L_Wr_Data_d32_notEmpty,
       fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty,
       fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty,
       fo_AXI4_Wr_Data_d512_u0_notEmpty,
       fo_BSV_to_C_bytevec_notEmpty;

  // register rg_credits_AXI4L_Rd_Addr_a32_u0
  reg [7 : 0] rg_credits_AXI4L_Rd_Addr_a32_u0;
  wire [7 : 0] rg_credits_AXI4L_Rd_Addr_a32_u0$D_IN;
  wire rg_credits_AXI4L_Rd_Addr_a32_u0$EN;

  // register rg_credits_AXI4L_Rd_Data_d32_u0
  reg [7 : 0] rg_credits_AXI4L_Rd_Data_d32_u0;
  wire [7 : 0] rg_credits_AXI4L_Rd_Data_d32_u0$D_IN;
  wire rg_credits_AXI4L_Rd_Data_d32_u0$EN;

  // register rg_credits_AXI4L_Wr_Addr_a32_u0
  reg [7 : 0] rg_credits_AXI4L_Wr_Addr_a32_u0;
  wire [7 : 0] rg_credits_AXI4L_Wr_Addr_a32_u0$D_IN;
  wire rg_credits_AXI4L_Wr_Addr_a32_u0$EN;

  // register rg_credits_AXI4L_Wr_Data_d32
  reg [7 : 0] rg_credits_AXI4L_Wr_Data_d32;
  wire [7 : 0] rg_credits_AXI4L_Wr_Data_d32$D_IN;
  wire rg_credits_AXI4L_Wr_Data_d32$EN;

  // register rg_credits_AXI4L_Wr_Resp_u0
  reg [7 : 0] rg_credits_AXI4L_Wr_Resp_u0;
  wire [7 : 0] rg_credits_AXI4L_Wr_Resp_u0$D_IN;
  wire rg_credits_AXI4L_Wr_Resp_u0$EN;

  // register rg_credits_AXI4_Rd_Addr_i16_a64_u0
  reg [7 : 0] rg_credits_AXI4_Rd_Addr_i16_a64_u0;
  wire [7 : 0] rg_credits_AXI4_Rd_Addr_i16_a64_u0$D_IN;
  wire rg_credits_AXI4_Rd_Addr_i16_a64_u0$EN;

  // register rg_credits_AXI4_Rd_Data_i16_d512_u0
  reg [7 : 0] rg_credits_AXI4_Rd_Data_i16_d512_u0;
  wire [7 : 0] rg_credits_AXI4_Rd_Data_i16_d512_u0$D_IN;
  wire rg_credits_AXI4_Rd_Data_i16_d512_u0$EN;

  // register rg_credits_AXI4_Wr_Addr_i16_a64_u0
  reg [7 : 0] rg_credits_AXI4_Wr_Addr_i16_a64_u0;
  wire [7 : 0] rg_credits_AXI4_Wr_Addr_i16_a64_u0$D_IN;
  wire rg_credits_AXI4_Wr_Addr_i16_a64_u0$EN;

  // register rg_credits_AXI4_Wr_Data_d512_u0
  reg [7 : 0] rg_credits_AXI4_Wr_Data_d512_u0;
  wire [7 : 0] rg_credits_AXI4_Wr_Data_d512_u0$D_IN;
  wire rg_credits_AXI4_Wr_Data_d512_u0$EN;

  // register rg_credits_AXI4_Wr_Resp_i16_u0
  reg [7 : 0] rg_credits_AXI4_Wr_Resp_i16_u0;
  wire [7 : 0] rg_credits_AXI4_Wr_Resp_i16_u0$D_IN;
  wire rg_credits_AXI4_Wr_Resp_i16_u0$EN;

  // ports of submodule f_AXI4L_Rd_Addr_a32_u0
  wire [34 : 0] f_AXI4L_Rd_Addr_a32_u0$D_IN, f_AXI4L_Rd_Addr_a32_u0$D_OUT;
  wire f_AXI4L_Rd_Addr_a32_u0$CLR,
       f_AXI4L_Rd_Addr_a32_u0$DEQ,
       f_AXI4L_Rd_Addr_a32_u0$EMPTY_N,
       f_AXI4L_Rd_Addr_a32_u0$ENQ,
       f_AXI4L_Rd_Addr_a32_u0$FULL_N;

  // ports of submodule f_AXI4L_Rd_Data_d32_u0
  wire [33 : 0] f_AXI4L_Rd_Data_d32_u0$D_IN, f_AXI4L_Rd_Data_d32_u0$D_OUT;
  wire f_AXI4L_Rd_Data_d32_u0$CLR,
       f_AXI4L_Rd_Data_d32_u0$DEQ,
       f_AXI4L_Rd_Data_d32_u0$EMPTY_N,
       f_AXI4L_Rd_Data_d32_u0$ENQ,
       f_AXI4L_Rd_Data_d32_u0$FULL_N;

  // ports of submodule f_AXI4L_Wr_Addr_a32_u0
  wire [34 : 0] f_AXI4L_Wr_Addr_a32_u0$D_IN, f_AXI4L_Wr_Addr_a32_u0$D_OUT;
  wire f_AXI4L_Wr_Addr_a32_u0$CLR,
       f_AXI4L_Wr_Addr_a32_u0$DEQ,
       f_AXI4L_Wr_Addr_a32_u0$EMPTY_N,
       f_AXI4L_Wr_Addr_a32_u0$ENQ,
       f_AXI4L_Wr_Addr_a32_u0$FULL_N;

  // ports of submodule f_AXI4L_Wr_Data_d32
  wire [35 : 0] f_AXI4L_Wr_Data_d32$D_IN, f_AXI4L_Wr_Data_d32$D_OUT;
  wire f_AXI4L_Wr_Data_d32$CLR,
       f_AXI4L_Wr_Data_d32$DEQ,
       f_AXI4L_Wr_Data_d32$EMPTY_N,
       f_AXI4L_Wr_Data_d32$ENQ,
       f_AXI4L_Wr_Data_d32$FULL_N;

  // ports of submodule f_AXI4L_Wr_Resp_u0
  wire [1 : 0] f_AXI4L_Wr_Resp_u0$D_IN, f_AXI4L_Wr_Resp_u0$D_OUT;
  wire f_AXI4L_Wr_Resp_u0$CLR,
       f_AXI4L_Wr_Resp_u0$DEQ,
       f_AXI4L_Wr_Resp_u0$EMPTY_N,
       f_AXI4L_Wr_Resp_u0$ENQ,
       f_AXI4L_Wr_Resp_u0$FULL_N;

  // ports of submodule f_AXI4_Rd_Addr_i16_a64_u0
  wire [108 : 0] f_AXI4_Rd_Addr_i16_a64_u0$D_IN,
		 f_AXI4_Rd_Addr_i16_a64_u0$D_OUT;
  wire f_AXI4_Rd_Addr_i16_a64_u0$CLR,
       f_AXI4_Rd_Addr_i16_a64_u0$DEQ,
       f_AXI4_Rd_Addr_i16_a64_u0$EMPTY_N,
       f_AXI4_Rd_Addr_i16_a64_u0$ENQ,
       f_AXI4_Rd_Addr_i16_a64_u0$FULL_N;

  // ports of submodule f_AXI4_Rd_Data_i16_d512_u0
  wire [530 : 0] f_AXI4_Rd_Data_i16_d512_u0$D_IN,
		 f_AXI4_Rd_Data_i16_d512_u0$D_OUT;
  wire f_AXI4_Rd_Data_i16_d512_u0$CLR,
       f_AXI4_Rd_Data_i16_d512_u0$DEQ,
       f_AXI4_Rd_Data_i16_d512_u0$EMPTY_N,
       f_AXI4_Rd_Data_i16_d512_u0$ENQ,
       f_AXI4_Rd_Data_i16_d512_u0$FULL_N;

  // ports of submodule f_AXI4_Wr_Addr_i16_a64_u0
  wire [108 : 0] f_AXI4_Wr_Addr_i16_a64_u0$D_IN,
		 f_AXI4_Wr_Addr_i16_a64_u0$D_OUT;
  wire f_AXI4_Wr_Addr_i16_a64_u0$CLR,
       f_AXI4_Wr_Addr_i16_a64_u0$DEQ,
       f_AXI4_Wr_Addr_i16_a64_u0$EMPTY_N,
       f_AXI4_Wr_Addr_i16_a64_u0$ENQ,
       f_AXI4_Wr_Addr_i16_a64_u0$FULL_N;

  // ports of submodule f_AXI4_Wr_Data_d512_u0
  wire [576 : 0] f_AXI4_Wr_Data_d512_u0$D_IN, f_AXI4_Wr_Data_d512_u0$D_OUT;
  wire f_AXI4_Wr_Data_d512_u0$CLR,
       f_AXI4_Wr_Data_d512_u0$DEQ,
       f_AXI4_Wr_Data_d512_u0$EMPTY_N,
       f_AXI4_Wr_Data_d512_u0$ENQ,
       f_AXI4_Wr_Data_d512_u0$FULL_N;

  // ports of submodule f_AXI4_Wr_Resp_i16_u0
  wire [17 : 0] f_AXI4_Wr_Resp_i16_u0$D_IN, f_AXI4_Wr_Resp_i16_u0$D_OUT;
  wire f_AXI4_Wr_Resp_i16_u0$CLR,
       f_AXI4_Wr_Resp_i16_u0$DEQ,
       f_AXI4_Wr_Resp_i16_u0$EMPTY_N,
       f_AXI4_Wr_Resp_i16_u0$ENQ,
       f_AXI4_Wr_Resp_i16_u0$FULL_N;

  // ports of submodule f_BSV_to_C_bytevec
  reg [607 : 0] f_BSV_to_C_bytevec$D_IN;
  wire [607 : 0] f_BSV_to_C_bytevec$D_OUT;
  wire f_BSV_to_C_bytevec$CLR,
       f_BSV_to_C_bytevec$DEQ,
       f_BSV_to_C_bytevec$EMPTY_N,
       f_BSV_to_C_bytevec$ENQ,
       f_BSV_to_C_bytevec$FULL_N;

  // ports of submodule f_C_to_BSV_bytevec
  wire [631 : 0] f_C_to_BSV_bytevec$D_IN, f_C_to_BSV_bytevec$D_OUT;
  wire f_C_to_BSV_bytevec$CLR,
       f_C_to_BSV_bytevec$DEQ,
       f_C_to_BSV_bytevec$EMPTY_N,
       f_C_to_BSV_bytevec$ENQ,
       f_C_to_BSV_bytevec$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0,
       CAN_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0,
       CAN_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0,
       CAN_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0,
       CAN_FIRE_RL_rl_BSV_to_C_credits_only,
       CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0,
       CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0,
       CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32,
       CAN_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0,
       CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0,
       CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0,
       CAN_FIRE_RL_rl_C_to_BSV_credits_only,
       CAN_FIRE_fi_AXI4L_Rd_Data_d32_u0_enq,
       CAN_FIRE_fi_AXI4L_Wr_Resp_u0_enq,
       CAN_FIRE_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       CAN_FIRE_fi_AXI4_Wr_Resp_i16_u0_enq,
       CAN_FIRE_fi_C_to_BSV_bytevec_enq,
       CAN_FIRE_fo_AXI4L_Rd_Addr_a32_u0_deq,
       CAN_FIRE_fo_AXI4L_Wr_Addr_a32_u0_deq,
       CAN_FIRE_fo_AXI4L_Wr_Data_d32_deq,
       CAN_FIRE_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       CAN_FIRE_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       CAN_FIRE_fo_AXI4_Wr_Data_d512_u0_deq,
       CAN_FIRE_fo_BSV_to_C_bytevec_deq,
       WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0,
       WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0,
       WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0,
       WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0,
       WILL_FIRE_RL_rl_BSV_to_C_credits_only,
       WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0,
       WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0,
       WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32,
       WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0,
       WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0,
       WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0,
       WILL_FIRE_RL_rl_C_to_BSV_credits_only,
       WILL_FIRE_fi_AXI4L_Rd_Data_d32_u0_enq,
       WILL_FIRE_fi_AXI4L_Wr_Resp_u0_enq,
       WILL_FIRE_fi_AXI4_Rd_Data_i16_d512_u0_enq,
       WILL_FIRE_fi_AXI4_Wr_Resp_i16_u0_enq,
       WILL_FIRE_fi_C_to_BSV_bytevec_enq,
       WILL_FIRE_fo_AXI4L_Rd_Addr_a32_u0_deq,
       WILL_FIRE_fo_AXI4L_Wr_Addr_a32_u0_deq,
       WILL_FIRE_fo_AXI4L_Wr_Data_d32_deq,
       WILL_FIRE_fo_AXI4_Rd_Addr_i16_a64_u0_deq,
       WILL_FIRE_fo_AXI4_Wr_Addr_i16_a64_u0_deq,
       WILL_FIRE_fo_AXI4_Wr_Data_d512_u0_deq,
       WILL_FIRE_fo_BSV_to_C_bytevec_deq;

  // inputs to muxes for submodule ports
  wire [607 : 0] MUX_f_BSV_to_C_bytevec$enq_1__VAL_1,
		 MUX_f_BSV_to_C_bytevec$enq_1__VAL_2,
		 MUX_f_BSV_to_C_bytevec$enq_1__VAL_3,
		 MUX_f_BSV_to_C_bytevec$enq_1__VAL_4,
		 MUX_f_BSV_to_C_bytevec$enq_1__VAL_5;
  wire [7 : 0] MUX_rg_credits_AXI4L_Rd_Addr_a32_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__VAL_2,
	       MUX_rg_credits_AXI4L_Wr_Addr_a32_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4L_Wr_Data_d32$write_1__VAL_1,
	       MUX_rg_credits_AXI4L_Wr_Resp_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4L_Wr_Resp_u0$write_1__VAL_2,
	       MUX_rg_credits_AXI4_Rd_Addr_i16_a64_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4_Rd_Data_i16_d512_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4_Rd_Data_i16_d512_u0$write_1__VAL_2,
	       MUX_rg_credits_AXI4_Wr_Addr_i16_a64_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4_Wr_Data_d512_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4_Wr_Resp_i16_u0$write_1__VAL_1,
	       MUX_rg_credits_AXI4_Wr_Resp_i16_u0$write_1__VAL_2;
  wire MUX_f_BSV_to_C_bytevec$enq_1__SEL_1,
       MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1;

  // remaining internal signals
  wire NOT_f_AXI4_Wr_Resp_i16_u0_notEmpty__9_60_OR_rg_ETC___d167,
       NOT_rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0__ETC___d178,
       rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0_48_A_ETC___d159;

  // value method fo_AXI4_Wr_Addr_i16_a64_u0_first
  assign fo_AXI4_Wr_Addr_i16_a64_u0_first = f_AXI4_Wr_Addr_i16_a64_u0$D_OUT ;
  assign RDY_fo_AXI4_Wr_Addr_i16_a64_u0_first =
	     f_AXI4_Wr_Addr_i16_a64_u0$EMPTY_N ;

  // action method fo_AXI4_Wr_Addr_i16_a64_u0_deq
  assign RDY_fo_AXI4_Wr_Addr_i16_a64_u0_deq =
	     f_AXI4_Wr_Addr_i16_a64_u0$EMPTY_N ;
  assign CAN_FIRE_fo_AXI4_Wr_Addr_i16_a64_u0_deq =
	     f_AXI4_Wr_Addr_i16_a64_u0$EMPTY_N ;
  assign WILL_FIRE_fo_AXI4_Wr_Addr_i16_a64_u0_deq =
	     EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;

  // value method fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty
  assign fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty =
	     f_AXI4_Wr_Addr_i16_a64_u0$EMPTY_N ;
  assign RDY_fo_AXI4_Wr_Addr_i16_a64_u0_notEmpty = 1'd1 ;

  // value method fo_AXI4_Wr_Data_d512_u0_first
  assign fo_AXI4_Wr_Data_d512_u0_first = f_AXI4_Wr_Data_d512_u0$D_OUT ;
  assign RDY_fo_AXI4_Wr_Data_d512_u0_first = f_AXI4_Wr_Data_d512_u0$EMPTY_N ;

  // action method fo_AXI4_Wr_Data_d512_u0_deq
  assign RDY_fo_AXI4_Wr_Data_d512_u0_deq = f_AXI4_Wr_Data_d512_u0$EMPTY_N ;
  assign CAN_FIRE_fo_AXI4_Wr_Data_d512_u0_deq =
	     f_AXI4_Wr_Data_d512_u0$EMPTY_N ;
  assign WILL_FIRE_fo_AXI4_Wr_Data_d512_u0_deq =
	     EN_fo_AXI4_Wr_Data_d512_u0_deq ;

  // value method fo_AXI4_Wr_Data_d512_u0_notEmpty
  assign fo_AXI4_Wr_Data_d512_u0_notEmpty = f_AXI4_Wr_Data_d512_u0$EMPTY_N ;
  assign RDY_fo_AXI4_Wr_Data_d512_u0_notEmpty = 1'd1 ;

  // value method fo_AXI4_Rd_Addr_i16_a64_u0_first
  assign fo_AXI4_Rd_Addr_i16_a64_u0_first = f_AXI4_Rd_Addr_i16_a64_u0$D_OUT ;
  assign RDY_fo_AXI4_Rd_Addr_i16_a64_u0_first =
	     f_AXI4_Rd_Addr_i16_a64_u0$EMPTY_N ;

  // action method fo_AXI4_Rd_Addr_i16_a64_u0_deq
  assign RDY_fo_AXI4_Rd_Addr_i16_a64_u0_deq =
	     f_AXI4_Rd_Addr_i16_a64_u0$EMPTY_N ;
  assign CAN_FIRE_fo_AXI4_Rd_Addr_i16_a64_u0_deq =
	     f_AXI4_Rd_Addr_i16_a64_u0$EMPTY_N ;
  assign WILL_FIRE_fo_AXI4_Rd_Addr_i16_a64_u0_deq =
	     EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq ;

  // value method fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty
  assign fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty =
	     f_AXI4_Rd_Addr_i16_a64_u0$EMPTY_N ;
  assign RDY_fo_AXI4_Rd_Addr_i16_a64_u0_notEmpty = 1'd1 ;

  // value method fo_AXI4L_Wr_Addr_a32_u0_first
  assign fo_AXI4L_Wr_Addr_a32_u0_first = f_AXI4L_Wr_Addr_a32_u0$D_OUT ;
  assign RDY_fo_AXI4L_Wr_Addr_a32_u0_first = f_AXI4L_Wr_Addr_a32_u0$EMPTY_N ;

  // action method fo_AXI4L_Wr_Addr_a32_u0_deq
  assign RDY_fo_AXI4L_Wr_Addr_a32_u0_deq = f_AXI4L_Wr_Addr_a32_u0$EMPTY_N ;
  assign CAN_FIRE_fo_AXI4L_Wr_Addr_a32_u0_deq =
	     f_AXI4L_Wr_Addr_a32_u0$EMPTY_N ;
  assign WILL_FIRE_fo_AXI4L_Wr_Addr_a32_u0_deq =
	     EN_fo_AXI4L_Wr_Addr_a32_u0_deq ;

  // value method fo_AXI4L_Wr_Addr_a32_u0_notEmpty
  assign fo_AXI4L_Wr_Addr_a32_u0_notEmpty = f_AXI4L_Wr_Addr_a32_u0$EMPTY_N ;
  assign RDY_fo_AXI4L_Wr_Addr_a32_u0_notEmpty = 1'd1 ;

  // value method fo_AXI4L_Wr_Data_d32_first
  assign fo_AXI4L_Wr_Data_d32_first = f_AXI4L_Wr_Data_d32$D_OUT ;
  assign RDY_fo_AXI4L_Wr_Data_d32_first = f_AXI4L_Wr_Data_d32$EMPTY_N ;

  // action method fo_AXI4L_Wr_Data_d32_deq
  assign RDY_fo_AXI4L_Wr_Data_d32_deq = f_AXI4L_Wr_Data_d32$EMPTY_N ;
  assign CAN_FIRE_fo_AXI4L_Wr_Data_d32_deq = f_AXI4L_Wr_Data_d32$EMPTY_N ;
  assign WILL_FIRE_fo_AXI4L_Wr_Data_d32_deq = EN_fo_AXI4L_Wr_Data_d32_deq ;

  // value method fo_AXI4L_Wr_Data_d32_notEmpty
  assign fo_AXI4L_Wr_Data_d32_notEmpty = f_AXI4L_Wr_Data_d32$EMPTY_N ;
  assign RDY_fo_AXI4L_Wr_Data_d32_notEmpty = 1'd1 ;

  // value method fo_AXI4L_Rd_Addr_a32_u0_first
  assign fo_AXI4L_Rd_Addr_a32_u0_first = f_AXI4L_Rd_Addr_a32_u0$D_OUT ;
  assign RDY_fo_AXI4L_Rd_Addr_a32_u0_first = f_AXI4L_Rd_Addr_a32_u0$EMPTY_N ;

  // action method fo_AXI4L_Rd_Addr_a32_u0_deq
  assign RDY_fo_AXI4L_Rd_Addr_a32_u0_deq = f_AXI4L_Rd_Addr_a32_u0$EMPTY_N ;
  assign CAN_FIRE_fo_AXI4L_Rd_Addr_a32_u0_deq =
	     f_AXI4L_Rd_Addr_a32_u0$EMPTY_N ;
  assign WILL_FIRE_fo_AXI4L_Rd_Addr_a32_u0_deq =
	     EN_fo_AXI4L_Rd_Addr_a32_u0_deq ;

  // value method fo_AXI4L_Rd_Addr_a32_u0_notEmpty
  assign fo_AXI4L_Rd_Addr_a32_u0_notEmpty = f_AXI4L_Rd_Addr_a32_u0$EMPTY_N ;
  assign RDY_fo_AXI4L_Rd_Addr_a32_u0_notEmpty = 1'd1 ;

  // action method fi_AXI4_Wr_Resp_i16_u0_enq
  assign RDY_fi_AXI4_Wr_Resp_i16_u0_enq = f_AXI4_Wr_Resp_i16_u0$FULL_N ;
  assign CAN_FIRE_fi_AXI4_Wr_Resp_i16_u0_enq = f_AXI4_Wr_Resp_i16_u0$FULL_N ;
  assign WILL_FIRE_fi_AXI4_Wr_Resp_i16_u0_enq =
	     EN_fi_AXI4_Wr_Resp_i16_u0_enq ;

  // value method fi_AXI4_Wr_Resp_i16_u0_notFull
  assign fi_AXI4_Wr_Resp_i16_u0_notFull = f_AXI4_Wr_Resp_i16_u0$FULL_N ;
  assign RDY_fi_AXI4_Wr_Resp_i16_u0_notFull = 1'd1 ;

  // action method fi_AXI4_Rd_Data_i16_d512_u0_enq
  assign RDY_fi_AXI4_Rd_Data_i16_d512_u0_enq =
	     f_AXI4_Rd_Data_i16_d512_u0$FULL_N ;
  assign CAN_FIRE_fi_AXI4_Rd_Data_i16_d512_u0_enq =
	     f_AXI4_Rd_Data_i16_d512_u0$FULL_N ;
  assign WILL_FIRE_fi_AXI4_Rd_Data_i16_d512_u0_enq =
	     EN_fi_AXI4_Rd_Data_i16_d512_u0_enq ;

  // value method fi_AXI4_Rd_Data_i16_d512_u0_notFull
  assign fi_AXI4_Rd_Data_i16_d512_u0_notFull =
	     f_AXI4_Rd_Data_i16_d512_u0$FULL_N ;
  assign RDY_fi_AXI4_Rd_Data_i16_d512_u0_notFull = 1'd1 ;

  // action method fi_AXI4L_Wr_Resp_u0_enq
  assign RDY_fi_AXI4L_Wr_Resp_u0_enq = f_AXI4L_Wr_Resp_u0$FULL_N ;
  assign CAN_FIRE_fi_AXI4L_Wr_Resp_u0_enq = f_AXI4L_Wr_Resp_u0$FULL_N ;
  assign WILL_FIRE_fi_AXI4L_Wr_Resp_u0_enq = EN_fi_AXI4L_Wr_Resp_u0_enq ;

  // value method fi_AXI4L_Wr_Resp_u0_notFull
  assign fi_AXI4L_Wr_Resp_u0_notFull = f_AXI4L_Wr_Resp_u0$FULL_N ;
  assign RDY_fi_AXI4L_Wr_Resp_u0_notFull = 1'd1 ;

  // action method fi_AXI4L_Rd_Data_d32_u0_enq
  assign RDY_fi_AXI4L_Rd_Data_d32_u0_enq = f_AXI4L_Rd_Data_d32_u0$FULL_N ;
  assign CAN_FIRE_fi_AXI4L_Rd_Data_d32_u0_enq =
	     f_AXI4L_Rd_Data_d32_u0$FULL_N ;
  assign WILL_FIRE_fi_AXI4L_Rd_Data_d32_u0_enq =
	     EN_fi_AXI4L_Rd_Data_d32_u0_enq ;

  // value method fi_AXI4L_Rd_Data_d32_u0_notFull
  assign fi_AXI4L_Rd_Data_d32_u0_notFull = f_AXI4L_Rd_Data_d32_u0$FULL_N ;
  assign RDY_fi_AXI4L_Rd_Data_d32_u0_notFull = 1'd1 ;

  // action method fi_C_to_BSV_bytevec_enq
  assign RDY_fi_C_to_BSV_bytevec_enq = f_C_to_BSV_bytevec$FULL_N ;
  assign CAN_FIRE_fi_C_to_BSV_bytevec_enq = f_C_to_BSV_bytevec$FULL_N ;
  assign WILL_FIRE_fi_C_to_BSV_bytevec_enq = EN_fi_C_to_BSV_bytevec_enq ;

  // value method fi_C_to_BSV_bytevec_notFull
  assign fi_C_to_BSV_bytevec_notFull = f_C_to_BSV_bytevec$FULL_N ;
  assign RDY_fi_C_to_BSV_bytevec_notFull = 1'd1 ;

  // value method fo_BSV_to_C_bytevec_first
  assign fo_BSV_to_C_bytevec_first = f_BSV_to_C_bytevec$D_OUT ;
  assign RDY_fo_BSV_to_C_bytevec_first = f_BSV_to_C_bytevec$EMPTY_N ;

  // action method fo_BSV_to_C_bytevec_deq
  assign RDY_fo_BSV_to_C_bytevec_deq = f_BSV_to_C_bytevec$EMPTY_N ;
  assign CAN_FIRE_fo_BSV_to_C_bytevec_deq = f_BSV_to_C_bytevec$EMPTY_N ;
  assign WILL_FIRE_fo_BSV_to_C_bytevec_deq = EN_fo_BSV_to_C_bytevec_deq ;

  // value method fo_BSV_to_C_bytevec_notEmpty
  assign fo_BSV_to_C_bytevec_notEmpty = f_BSV_to_C_bytevec$EMPTY_N ;
  assign RDY_fo_BSV_to_C_bytevec_notEmpty = 1'd1 ;

  // submodule f_AXI4L_Rd_Addr_a32_u0
  SizedFIFO #(.p1width(32'd35),
	      .p2depth(32'd128),
	      .p3cntr_width(32'd7),
	      .guarded(1'd1)) f_AXI4L_Rd_Addr_a32_u0(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_AXI4L_Rd_Addr_a32_u0$D_IN),
						     .ENQ(f_AXI4L_Rd_Addr_a32_u0$ENQ),
						     .DEQ(f_AXI4L_Rd_Addr_a32_u0$DEQ),
						     .CLR(f_AXI4L_Rd_Addr_a32_u0$CLR),
						     .D_OUT(f_AXI4L_Rd_Addr_a32_u0$D_OUT),
						     .FULL_N(f_AXI4L_Rd_Addr_a32_u0$FULL_N),
						     .EMPTY_N(f_AXI4L_Rd_Addr_a32_u0$EMPTY_N));

  // submodule f_AXI4L_Rd_Data_d32_u0
  FIFO2 #(.width(32'd34), .guarded(1'd1)) f_AXI4L_Rd_Data_d32_u0(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(f_AXI4L_Rd_Data_d32_u0$D_IN),
								 .ENQ(f_AXI4L_Rd_Data_d32_u0$ENQ),
								 .DEQ(f_AXI4L_Rd_Data_d32_u0$DEQ),
								 .CLR(f_AXI4L_Rd_Data_d32_u0$CLR),
								 .D_OUT(f_AXI4L_Rd_Data_d32_u0$D_OUT),
								 .FULL_N(f_AXI4L_Rd_Data_d32_u0$FULL_N),
								 .EMPTY_N(f_AXI4L_Rd_Data_d32_u0$EMPTY_N));

  // submodule f_AXI4L_Wr_Addr_a32_u0
  SizedFIFO #(.p1width(32'd35),
	      .p2depth(32'd128),
	      .p3cntr_width(32'd7),
	      .guarded(1'd1)) f_AXI4L_Wr_Addr_a32_u0(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_AXI4L_Wr_Addr_a32_u0$D_IN),
						     .ENQ(f_AXI4L_Wr_Addr_a32_u0$ENQ),
						     .DEQ(f_AXI4L_Wr_Addr_a32_u0$DEQ),
						     .CLR(f_AXI4L_Wr_Addr_a32_u0$CLR),
						     .D_OUT(f_AXI4L_Wr_Addr_a32_u0$D_OUT),
						     .FULL_N(f_AXI4L_Wr_Addr_a32_u0$FULL_N),
						     .EMPTY_N(f_AXI4L_Wr_Addr_a32_u0$EMPTY_N));

  // submodule f_AXI4L_Wr_Data_d32
  SizedFIFO #(.p1width(32'd36),
	      .p2depth(32'd128),
	      .p3cntr_width(32'd7),
	      .guarded(1'd1)) f_AXI4L_Wr_Data_d32(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(f_AXI4L_Wr_Data_d32$D_IN),
						  .ENQ(f_AXI4L_Wr_Data_d32$ENQ),
						  .DEQ(f_AXI4L_Wr_Data_d32$DEQ),
						  .CLR(f_AXI4L_Wr_Data_d32$CLR),
						  .D_OUT(f_AXI4L_Wr_Data_d32$D_OUT),
						  .FULL_N(f_AXI4L_Wr_Data_d32$FULL_N),
						  .EMPTY_N(f_AXI4L_Wr_Data_d32$EMPTY_N));

  // submodule f_AXI4L_Wr_Resp_u0
  FIFO2 #(.width(32'd2), .guarded(1'd1)) f_AXI4L_Wr_Resp_u0(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(f_AXI4L_Wr_Resp_u0$D_IN),
							    .ENQ(f_AXI4L_Wr_Resp_u0$ENQ),
							    .DEQ(f_AXI4L_Wr_Resp_u0$DEQ),
							    .CLR(f_AXI4L_Wr_Resp_u0$CLR),
							    .D_OUT(f_AXI4L_Wr_Resp_u0$D_OUT),
							    .FULL_N(f_AXI4L_Wr_Resp_u0$FULL_N),
							    .EMPTY_N(f_AXI4L_Wr_Resp_u0$EMPTY_N));

  // submodule f_AXI4_Rd_Addr_i16_a64_u0
  SizedFIFO #(.p1width(32'd109),
	      .p2depth(32'd128),
	      .p3cntr_width(32'd7),
	      .guarded(1'd1)) f_AXI4_Rd_Addr_i16_a64_u0(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_AXI4_Rd_Addr_i16_a64_u0$D_IN),
							.ENQ(f_AXI4_Rd_Addr_i16_a64_u0$ENQ),
							.DEQ(f_AXI4_Rd_Addr_i16_a64_u0$DEQ),
							.CLR(f_AXI4_Rd_Addr_i16_a64_u0$CLR),
							.D_OUT(f_AXI4_Rd_Addr_i16_a64_u0$D_OUT),
							.FULL_N(f_AXI4_Rd_Addr_i16_a64_u0$FULL_N),
							.EMPTY_N(f_AXI4_Rd_Addr_i16_a64_u0$EMPTY_N));

  // submodule f_AXI4_Rd_Data_i16_d512_u0
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) f_AXI4_Rd_Data_i16_d512_u0(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_AXI4_Rd_Data_i16_d512_u0$D_IN),
						     .ENQ(f_AXI4_Rd_Data_i16_d512_u0$ENQ),
						     .DEQ(f_AXI4_Rd_Data_i16_d512_u0$DEQ),
						     .CLR(f_AXI4_Rd_Data_i16_d512_u0$CLR),
						     .D_OUT(f_AXI4_Rd_Data_i16_d512_u0$D_OUT),
						     .FULL_N(f_AXI4_Rd_Data_i16_d512_u0$FULL_N),
						     .EMPTY_N(f_AXI4_Rd_Data_i16_d512_u0$EMPTY_N));

  // submodule f_AXI4_Wr_Addr_i16_a64_u0
  SizedFIFO #(.p1width(32'd109),
	      .p2depth(32'd128),
	      .p3cntr_width(32'd7),
	      .guarded(1'd1)) f_AXI4_Wr_Addr_i16_a64_u0(.RST(RST_N),
							.CLK(CLK),
							.D_IN(f_AXI4_Wr_Addr_i16_a64_u0$D_IN),
							.ENQ(f_AXI4_Wr_Addr_i16_a64_u0$ENQ),
							.DEQ(f_AXI4_Wr_Addr_i16_a64_u0$DEQ),
							.CLR(f_AXI4_Wr_Addr_i16_a64_u0$CLR),
							.D_OUT(f_AXI4_Wr_Addr_i16_a64_u0$D_OUT),
							.FULL_N(f_AXI4_Wr_Addr_i16_a64_u0$FULL_N),
							.EMPTY_N(f_AXI4_Wr_Addr_i16_a64_u0$EMPTY_N));

  // submodule f_AXI4_Wr_Data_d512_u0
  SizedFIFO #(.p1width(32'd577),
	      .p2depth(32'd128),
	      .p3cntr_width(32'd7),
	      .guarded(1'd1)) f_AXI4_Wr_Data_d512_u0(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(f_AXI4_Wr_Data_d512_u0$D_IN),
						     .ENQ(f_AXI4_Wr_Data_d512_u0$ENQ),
						     .DEQ(f_AXI4_Wr_Data_d512_u0$DEQ),
						     .CLR(f_AXI4_Wr_Data_d512_u0$CLR),
						     .D_OUT(f_AXI4_Wr_Data_d512_u0$D_OUT),
						     .FULL_N(f_AXI4_Wr_Data_d512_u0$FULL_N),
						     .EMPTY_N(f_AXI4_Wr_Data_d512_u0$EMPTY_N));

  // submodule f_AXI4_Wr_Resp_i16_u0
  FIFO2 #(.width(32'd18), .guarded(1'd1)) f_AXI4_Wr_Resp_i16_u0(.RST(RST_N),
								.CLK(CLK),
								.D_IN(f_AXI4_Wr_Resp_i16_u0$D_IN),
								.ENQ(f_AXI4_Wr_Resp_i16_u0$ENQ),
								.DEQ(f_AXI4_Wr_Resp_i16_u0$DEQ),
								.CLR(f_AXI4_Wr_Resp_i16_u0$CLR),
								.D_OUT(f_AXI4_Wr_Resp_i16_u0$D_OUT),
								.FULL_N(f_AXI4_Wr_Resp_i16_u0$FULL_N),
								.EMPTY_N(f_AXI4_Wr_Resp_i16_u0$EMPTY_N));

  // submodule f_BSV_to_C_bytevec
  FIFO2 #(.width(32'd608), .guarded(1'd1)) f_BSV_to_C_bytevec(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_BSV_to_C_bytevec$D_IN),
							      .ENQ(f_BSV_to_C_bytevec$ENQ),
							      .DEQ(f_BSV_to_C_bytevec$DEQ),
							      .CLR(f_BSV_to_C_bytevec$CLR),
							      .D_OUT(f_BSV_to_C_bytevec$D_OUT),
							      .FULL_N(f_BSV_to_C_bytevec$FULL_N),
							      .EMPTY_N(f_BSV_to_C_bytevec$EMPTY_N));

  // submodule f_C_to_BSV_bytevec
  FIFO2 #(.width(32'd632), .guarded(1'd1)) f_C_to_BSV_bytevec(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(f_C_to_BSV_bytevec$D_IN),
							      .ENQ(f_C_to_BSV_bytevec$ENQ),
							      .DEQ(f_C_to_BSV_bytevec$DEQ),
							      .CLR(f_C_to_BSV_bytevec$CLR),
							      .D_OUT(f_C_to_BSV_bytevec$D_OUT),
							      .FULL_N(f_C_to_BSV_bytevec$FULL_N),
							      .EMPTY_N(f_C_to_BSV_bytevec$EMPTY_N));

  // rule RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0
  assign CAN_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 =
	     f_AXI4_Wr_Resp_i16_u0$EMPTY_N && f_BSV_to_C_bytevec$FULL_N &&
	     rg_credits_AXI4_Wr_Resp_i16_u0 != 8'd0 ;
  assign WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 =
	     CAN_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_credits_only &&
	     !EN_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     !EN_fo_AXI4L_Wr_Data_d32_deq &&
	     !EN_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     !EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     !EN_fo_AXI4_Wr_Data_d512_u0_deq &&
	     !EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;

  // rule RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0
  assign CAN_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 =
	     f_BSV_to_C_bytevec$FULL_N &&
	     f_AXI4_Rd_Data_i16_d512_u0$EMPTY_N &&
	     rg_credits_AXI4_Rd_Data_i16_d512_u0 != 8'd0 ;
  assign WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 =
	     CAN_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 &&
	     !WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_credits_only &&
	     !EN_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     !EN_fo_AXI4L_Wr_Data_d32_deq &&
	     !EN_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     !EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     !EN_fo_AXI4_Wr_Data_d512_u0_deq &&
	     !EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;

  // rule RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0
  assign CAN_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 =
	     f_BSV_to_C_bytevec$FULL_N && f_AXI4L_Wr_Resp_u0$EMPTY_N &&
	     rg_credits_AXI4L_Wr_Resp_u0 != 8'd0 ;
  assign WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 =
	     CAN_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 &&
	     !WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 &&
	     !WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_credits_only &&
	     !EN_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     !EN_fo_AXI4L_Wr_Data_d32_deq &&
	     !EN_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     !EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     !EN_fo_AXI4_Wr_Data_d512_u0_deq &&
	     !EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;

  // rule RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0
  assign CAN_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 =
	     f_BSV_to_C_bytevec$FULL_N && f_AXI4L_Rd_Data_d32_u0$EMPTY_N &&
	     rg_credits_AXI4L_Rd_Data_d32_u0 != 8'd0 ;
  assign WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 =
	     CAN_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 &&
	     !WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 &&
	     !WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 &&
	     !WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 &&
	     !WILL_FIRE_RL_rl_C_to_BSV_credits_only &&
	     !EN_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     !EN_fo_AXI4L_Wr_Data_d32_deq &&
	     !EN_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     !EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     !EN_fo_AXI4_Wr_Data_d512_u0_deq &&
	     !EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;

  // rule RL_rl_BSV_to_C_credits_only
  assign CAN_FIRE_RL_rl_BSV_to_C_credits_only =
	     rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0_48_A_ETC___d159 &&
	     NOT_f_AXI4_Wr_Resp_i16_u0_notEmpty__9_60_OR_rg_ETC___d167 &&
	     (!f_AXI4L_Rd_Data_d32_u0$EMPTY_N ||
	      rg_credits_AXI4L_Rd_Data_d32_u0 == 8'd0) ;
  assign WILL_FIRE_RL_rl_BSV_to_C_credits_only =
	     CAN_FIRE_RL_rl_BSV_to_C_credits_only &&
	     !EN_fo_AXI4L_Rd_Addr_a32_u0_deq &&
	     !EN_fo_AXI4L_Wr_Data_d32_deq &&
	     !EN_fo_AXI4L_Wr_Addr_a32_u0_deq &&
	     !EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq &&
	     !EN_fo_AXI4_Wr_Data_d512_u0_deq &&
	     !EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;

  // rule RL_rl_C_to_BSV_credits_only
  assign CAN_FIRE_RL_rl_C_to_BSV_credits_only =
	     f_C_to_BSV_bytevec$EMPTY_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd0 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_credits_only =
	     CAN_FIRE_RL_rl_C_to_BSV_credits_only ;

  // rule RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0
  assign CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 =
	     f_C_to_BSV_bytevec$EMPTY_N && f_AXI4_Wr_Addr_i16_a64_u0$FULL_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd1 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ;

  // rule RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0
  assign CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 =
	     f_C_to_BSV_bytevec$EMPTY_N && f_AXI4_Wr_Data_d512_u0$FULL_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd2 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ;

  // rule RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0
  assign CAN_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 =
	     f_C_to_BSV_bytevec$EMPTY_N && f_AXI4_Rd_Addr_i16_a64_u0$FULL_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd3 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ;

  // rule RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0
  assign CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 =
	     f_C_to_BSV_bytevec$EMPTY_N && f_AXI4L_Wr_Addr_a32_u0$FULL_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd4 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ;

  // rule RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0
  assign CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 =
	     f_C_to_BSV_bytevec$EMPTY_N && f_AXI4L_Rd_Addr_a32_u0$FULL_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd6 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ;

  // rule RL_rl_C_to_BSV_AXI4L_Wr_Data_d32
  assign CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 =
	     f_C_to_BSV_bytevec$EMPTY_N && f_AXI4L_Wr_Data_d32$FULL_N &&
	     f_C_to_BSV_bytevec$D_OUT[47:40] == 8'd5 ;
  assign WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ;

  // inputs to muxes for submodule ports
  assign MUX_f_BSV_to_C_bytevec$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only &&
	     (NOT_rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0__ETC___d178 ||
	      rg_credits_AXI4L_Wr_Data_d32 != 8'd0 ||
	      rg_credits_AXI4L_Rd_Addr_a32_u0 != 8'd0) ;
  assign MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_C_to_BSV_credits_only ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ;
  assign MUX_f_BSV_to_C_bytevec$enq_1__VAL_1 =
	     { 552'd0,
	       rg_credits_AXI4L_Rd_Addr_a32_u0,
	       rg_credits_AXI4L_Wr_Data_d32,
	       rg_credits_AXI4L_Wr_Addr_a32_u0,
	       rg_credits_AXI4_Rd_Addr_i16_a64_u0,
	       rg_credits_AXI4_Wr_Data_d512_u0,
	       rg_credits_AXI4_Wr_Addr_i16_a64_u0,
	       8'd8 } ;
  assign MUX_f_BSV_to_C_bytevec$enq_1__VAL_2 =
	     { 526'd0,
	       f_AXI4_Wr_Resp_i16_u0$D_OUT[1:0],
	       f_AXI4_Wr_Resp_i16_u0$D_OUT[17:2],
	       8'd1,
	       rg_credits_AXI4L_Rd_Addr_a32_u0,
	       rg_credits_AXI4L_Wr_Data_d32,
	       rg_credits_AXI4L_Wr_Addr_a32_u0,
	       rg_credits_AXI4_Rd_Addr_i16_a64_u0,
	       rg_credits_AXI4_Wr_Data_d512_u0,
	       rg_credits_AXI4_Wr_Addr_i16_a64_u0,
	       8'd11 } ;
  assign MUX_f_BSV_to_C_bytevec$enq_1__VAL_3 =
	     { 7'd0,
	       f_AXI4_Rd_Data_i16_d512_u0$D_OUT[0],
	       6'd0,
	       f_AXI4_Rd_Data_i16_d512_u0$D_OUT[2:1],
	       f_AXI4_Rd_Data_i16_d512_u0$D_OUT[514:3],
	       f_AXI4_Rd_Data_i16_d512_u0$D_OUT[530:515],
	       8'd2,
	       rg_credits_AXI4L_Rd_Addr_a32_u0,
	       rg_credits_AXI4L_Wr_Data_d32,
	       rg_credits_AXI4L_Wr_Addr_a32_u0,
	       rg_credits_AXI4_Rd_Addr_i16_a64_u0,
	       rg_credits_AXI4_Wr_Data_d512_u0,
	       rg_credits_AXI4_Wr_Addr_i16_a64_u0,
	       8'd76 } ;
  assign MUX_f_BSV_to_C_bytevec$enq_1__VAL_4 =
	     { 542'd0,
	       f_AXI4L_Wr_Resp_u0$D_OUT,
	       8'd3,
	       rg_credits_AXI4L_Rd_Addr_a32_u0,
	       rg_credits_AXI4L_Wr_Data_d32,
	       rg_credits_AXI4L_Wr_Addr_a32_u0,
	       rg_credits_AXI4_Rd_Addr_i16_a64_u0,
	       rg_credits_AXI4_Wr_Data_d512_u0,
	       rg_credits_AXI4_Wr_Addr_i16_a64_u0,
	       8'd9 } ;
  assign MUX_f_BSV_to_C_bytevec$enq_1__VAL_5 =
	     { 510'd0,
	       f_AXI4L_Rd_Data_d32_u0$D_OUT[1:0],
	       f_AXI4L_Rd_Data_d32_u0$D_OUT[33:2],
	       8'd4,
	       rg_credits_AXI4L_Rd_Addr_a32_u0,
	       rg_credits_AXI4L_Wr_Data_d32,
	       rg_credits_AXI4L_Wr_Addr_a32_u0,
	       rg_credits_AXI4_Rd_Addr_i16_a64_u0,
	       rg_credits_AXI4_Wr_Data_d512_u0,
	       rg_credits_AXI4_Wr_Addr_i16_a64_u0,
	       8'd13 } ;
  assign MUX_rg_credits_AXI4L_Rd_Addr_a32_u0$write_1__VAL_1 =
	     rg_credits_AXI4L_Rd_Addr_a32_u0 + 8'd1 ;
  assign MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__VAL_1 =
	     rg_credits_AXI4L_Rd_Data_d32_u0 +
	     f_C_to_BSV_bytevec$D_OUT[39:32] ;
  assign MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__VAL_2 =
	     rg_credits_AXI4L_Rd_Data_d32_u0 - 8'd1 ;
  assign MUX_rg_credits_AXI4L_Wr_Addr_a32_u0$write_1__VAL_1 =
	     rg_credits_AXI4L_Wr_Addr_a32_u0 + 8'd1 ;
  assign MUX_rg_credits_AXI4L_Wr_Data_d32$write_1__VAL_1 =
	     rg_credits_AXI4L_Wr_Data_d32 + 8'd1 ;
  assign MUX_rg_credits_AXI4L_Wr_Resp_u0$write_1__VAL_1 =
	     rg_credits_AXI4L_Wr_Resp_u0 + f_C_to_BSV_bytevec$D_OUT[31:24] ;
  assign MUX_rg_credits_AXI4L_Wr_Resp_u0$write_1__VAL_2 =
	     rg_credits_AXI4L_Wr_Resp_u0 - 8'd1 ;
  assign MUX_rg_credits_AXI4_Rd_Addr_i16_a64_u0$write_1__VAL_1 =
	     rg_credits_AXI4_Rd_Addr_i16_a64_u0 + 8'd1 ;
  assign MUX_rg_credits_AXI4_Rd_Data_i16_d512_u0$write_1__VAL_1 =
	     rg_credits_AXI4_Rd_Data_i16_d512_u0 +
	     f_C_to_BSV_bytevec$D_OUT[23:16] ;
  assign MUX_rg_credits_AXI4_Rd_Data_i16_d512_u0$write_1__VAL_2 =
	     rg_credits_AXI4_Rd_Data_i16_d512_u0 - 8'd1 ;
  assign MUX_rg_credits_AXI4_Wr_Addr_i16_a64_u0$write_1__VAL_1 =
	     rg_credits_AXI4_Wr_Addr_i16_a64_u0 + 8'd1 ;
  assign MUX_rg_credits_AXI4_Wr_Data_d512_u0$write_1__VAL_1 =
	     rg_credits_AXI4_Wr_Data_d512_u0 + 8'd1 ;
  assign MUX_rg_credits_AXI4_Wr_Resp_i16_u0$write_1__VAL_1 =
	     rg_credits_AXI4_Wr_Resp_i16_u0 + f_C_to_BSV_bytevec$D_OUT[15:8] ;
  assign MUX_rg_credits_AXI4_Wr_Resp_i16_u0$write_1__VAL_2 =
	     rg_credits_AXI4_Wr_Resp_i16_u0 - 8'd1 ;

  // register rg_credits_AXI4L_Rd_Addr_a32_u0
  assign rg_credits_AXI4L_Rd_Addr_a32_u0$D_IN =
	     EN_fo_AXI4L_Rd_Addr_a32_u0_deq ?
	       MUX_rg_credits_AXI4L_Rd_Addr_a32_u0$write_1__VAL_1 :
	       8'd0 ;
  assign rg_credits_AXI4L_Rd_Addr_a32_u0$EN =
	     EN_fo_AXI4L_Rd_Addr_a32_u0_deq ||
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // register rg_credits_AXI4L_Rd_Data_d32_u0
  assign rg_credits_AXI4L_Rd_Data_d32_u0$D_IN =
	     MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1 ?
	       MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__VAL_1 :
	       MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__VAL_2 ;
  assign rg_credits_AXI4L_Rd_Data_d32_u0$EN =
	     WILL_FIRE_RL_rl_C_to_BSV_credits_only ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ;

  // register rg_credits_AXI4L_Wr_Addr_a32_u0
  assign rg_credits_AXI4L_Wr_Addr_a32_u0$D_IN =
	     EN_fo_AXI4L_Wr_Addr_a32_u0_deq ?
	       MUX_rg_credits_AXI4L_Wr_Addr_a32_u0$write_1__VAL_1 :
	       8'd0 ;
  assign rg_credits_AXI4L_Wr_Addr_a32_u0$EN =
	     EN_fo_AXI4L_Wr_Addr_a32_u0_deq ||
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // register rg_credits_AXI4L_Wr_Data_d32
  assign rg_credits_AXI4L_Wr_Data_d32$D_IN =
	     EN_fo_AXI4L_Wr_Data_d32_deq ?
	       MUX_rg_credits_AXI4L_Wr_Data_d32$write_1__VAL_1 :
	       8'd0 ;
  assign rg_credits_AXI4L_Wr_Data_d32$EN =
	     EN_fo_AXI4L_Wr_Data_d32_deq ||
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // register rg_credits_AXI4L_Wr_Resp_u0
  assign rg_credits_AXI4L_Wr_Resp_u0$D_IN =
	     MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1 ?
	       MUX_rg_credits_AXI4L_Wr_Resp_u0$write_1__VAL_1 :
	       MUX_rg_credits_AXI4L_Wr_Resp_u0$write_1__VAL_2 ;
  assign rg_credits_AXI4L_Wr_Resp_u0$EN =
	     WILL_FIRE_RL_rl_C_to_BSV_credits_only ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ;

  // register rg_credits_AXI4_Rd_Addr_i16_a64_u0
  assign rg_credits_AXI4_Rd_Addr_i16_a64_u0$D_IN =
	     EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq ?
	       MUX_rg_credits_AXI4_Rd_Addr_i16_a64_u0$write_1__VAL_1 :
	       8'd0 ;
  assign rg_credits_AXI4_Rd_Addr_i16_a64_u0$EN =
	     EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq ||
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // register rg_credits_AXI4_Rd_Data_i16_d512_u0
  assign rg_credits_AXI4_Rd_Data_i16_d512_u0$D_IN =
	     MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1 ?
	       MUX_rg_credits_AXI4_Rd_Data_i16_d512_u0$write_1__VAL_1 :
	       MUX_rg_credits_AXI4_Rd_Data_i16_d512_u0$write_1__VAL_2 ;
  assign rg_credits_AXI4_Rd_Data_i16_d512_u0$EN =
	     WILL_FIRE_RL_rl_C_to_BSV_credits_only ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ;

  // register rg_credits_AXI4_Wr_Addr_i16_a64_u0
  assign rg_credits_AXI4_Wr_Addr_i16_a64_u0$D_IN =
	     EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ?
	       MUX_rg_credits_AXI4_Wr_Addr_i16_a64_u0$write_1__VAL_1 :
	       8'd0 ;
  assign rg_credits_AXI4_Wr_Addr_i16_a64_u0$EN =
	     EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ||
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // register rg_credits_AXI4_Wr_Data_d512_u0
  assign rg_credits_AXI4_Wr_Data_d512_u0$D_IN =
	     EN_fo_AXI4_Wr_Data_d512_u0_deq ?
	       MUX_rg_credits_AXI4_Wr_Data_d512_u0$write_1__VAL_1 :
	       8'd0 ;
  assign rg_credits_AXI4_Wr_Data_d512_u0$EN =
	     EN_fo_AXI4_Wr_Data_d512_u0_deq ||
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // register rg_credits_AXI4_Wr_Resp_i16_u0
  assign rg_credits_AXI4_Wr_Resp_i16_u0$D_IN =
	     MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1 ?
	       MUX_rg_credits_AXI4_Wr_Resp_i16_u0$write_1__VAL_1 :
	       MUX_rg_credits_AXI4_Wr_Resp_i16_u0$write_1__VAL_2 ;
  assign rg_credits_AXI4_Wr_Resp_i16_u0$EN =
	     WILL_FIRE_RL_rl_C_to_BSV_credits_only ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ||
	     WILL_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;

  // submodule f_AXI4L_Rd_Addr_a32_u0
  assign f_AXI4L_Rd_Addr_a32_u0$D_IN =
	     { f_C_to_BSV_bytevec$D_OUT[79:48],
	       f_C_to_BSV_bytevec$D_OUT[82:80] } ;
  assign f_AXI4L_Rd_Addr_a32_u0$ENQ =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Rd_Addr_a32_u0 ;
  assign f_AXI4L_Rd_Addr_a32_u0$DEQ = EN_fo_AXI4L_Rd_Addr_a32_u0_deq ;
  assign f_AXI4L_Rd_Addr_a32_u0$CLR = 1'b0 ;

  // submodule f_AXI4L_Rd_Data_d32_u0
  assign f_AXI4L_Rd_Data_d32_u0$D_IN = fi_AXI4L_Rd_Data_d32_u0_enq_x ;
  assign f_AXI4L_Rd_Data_d32_u0$ENQ = EN_fi_AXI4L_Rd_Data_d32_u0_enq ;
  assign f_AXI4L_Rd_Data_d32_u0$DEQ =
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ;
  assign f_AXI4L_Rd_Data_d32_u0$CLR = 1'b0 ;

  // submodule f_AXI4L_Wr_Addr_a32_u0
  assign f_AXI4L_Wr_Addr_a32_u0$D_IN =
	     { f_C_to_BSV_bytevec$D_OUT[79:48],
	       f_C_to_BSV_bytevec$D_OUT[82:80] } ;
  assign f_AXI4L_Wr_Addr_a32_u0$ENQ =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Addr_a32_u0 ;
  assign f_AXI4L_Wr_Addr_a32_u0$DEQ = EN_fo_AXI4L_Wr_Addr_a32_u0_deq ;
  assign f_AXI4L_Wr_Addr_a32_u0$CLR = 1'b0 ;

  // submodule f_AXI4L_Wr_Data_d32
  assign f_AXI4L_Wr_Data_d32$D_IN =
	     { f_C_to_BSV_bytevec$D_OUT[79:48],
	       f_C_to_BSV_bytevec$D_OUT[83:80] } ;
  assign f_AXI4L_Wr_Data_d32$ENQ = CAN_FIRE_RL_rl_C_to_BSV_AXI4L_Wr_Data_d32 ;
  assign f_AXI4L_Wr_Data_d32$DEQ = EN_fo_AXI4L_Wr_Data_d32_deq ;
  assign f_AXI4L_Wr_Data_d32$CLR = 1'b0 ;

  // submodule f_AXI4L_Wr_Resp_u0
  assign f_AXI4L_Wr_Resp_u0$D_IN = fi_AXI4L_Wr_Resp_u0_enq_x ;
  assign f_AXI4L_Wr_Resp_u0$ENQ = EN_fi_AXI4L_Wr_Resp_u0_enq ;
  assign f_AXI4L_Wr_Resp_u0$DEQ = WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ;
  assign f_AXI4L_Wr_Resp_u0$CLR = 1'b0 ;

  // submodule f_AXI4_Rd_Addr_i16_a64_u0
  assign f_AXI4_Rd_Addr_i16_a64_u0$D_IN =
	     { f_C_to_BSV_bytevec$D_OUT[63:48],
	       f_C_to_BSV_bytevec$D_OUT[127:64],
	       f_C_to_BSV_bytevec$D_OUT[135:128],
	       f_C_to_BSV_bytevec$D_OUT[138:136],
	       f_C_to_BSV_bytevec$D_OUT[145:144],
	       f_C_to_BSV_bytevec$D_OUT[152],
	       f_C_to_BSV_bytevec$D_OUT[163:160],
	       f_C_to_BSV_bytevec$D_OUT[170:168],
	       f_C_to_BSV_bytevec$D_OUT[179:176],
	       f_C_to_BSV_bytevec$D_OUT[187:184] } ;
  assign f_AXI4_Rd_Addr_i16_a64_u0$ENQ =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4_Rd_Addr_i16_a64_u0 ;
  assign f_AXI4_Rd_Addr_i16_a64_u0$DEQ = EN_fo_AXI4_Rd_Addr_i16_a64_u0_deq ;
  assign f_AXI4_Rd_Addr_i16_a64_u0$CLR = 1'b0 ;

  // submodule f_AXI4_Rd_Data_i16_d512_u0
  assign f_AXI4_Rd_Data_i16_d512_u0$D_IN = fi_AXI4_Rd_Data_i16_d512_u0_enq_x ;
  assign f_AXI4_Rd_Data_i16_d512_u0$ENQ = EN_fi_AXI4_Rd_Data_i16_d512_u0_enq ;
  assign f_AXI4_Rd_Data_i16_d512_u0$DEQ =
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ;
  assign f_AXI4_Rd_Data_i16_d512_u0$CLR = 1'b0 ;

  // submodule f_AXI4_Wr_Addr_i16_a64_u0
  assign f_AXI4_Wr_Addr_i16_a64_u0$D_IN =
	     { f_C_to_BSV_bytevec$D_OUT[63:48],
	       f_C_to_BSV_bytevec$D_OUT[127:64],
	       f_C_to_BSV_bytevec$D_OUT[135:128],
	       f_C_to_BSV_bytevec$D_OUT[138:136],
	       f_C_to_BSV_bytevec$D_OUT[145:144],
	       f_C_to_BSV_bytevec$D_OUT[152],
	       f_C_to_BSV_bytevec$D_OUT[163:160],
	       f_C_to_BSV_bytevec$D_OUT[170:168],
	       f_C_to_BSV_bytevec$D_OUT[179:176],
	       f_C_to_BSV_bytevec$D_OUT[187:184] } ;
  assign f_AXI4_Wr_Addr_i16_a64_u0$ENQ =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Addr_i16_a64_u0 ;
  assign f_AXI4_Wr_Addr_i16_a64_u0$DEQ = EN_fo_AXI4_Wr_Addr_i16_a64_u0_deq ;
  assign f_AXI4_Wr_Addr_i16_a64_u0$CLR = 1'b0 ;

  // submodule f_AXI4_Wr_Data_d512_u0
  assign f_AXI4_Wr_Data_d512_u0$D_IN =
	     { f_C_to_BSV_bytevec$D_OUT[559:48],
	       f_C_to_BSV_bytevec$D_OUT[623:560],
	       f_C_to_BSV_bytevec$D_OUT[624] } ;
  assign f_AXI4_Wr_Data_d512_u0$ENQ =
	     CAN_FIRE_RL_rl_C_to_BSV_AXI4_Wr_Data_d512_u0 ;
  assign f_AXI4_Wr_Data_d512_u0$DEQ = EN_fo_AXI4_Wr_Data_d512_u0_deq ;
  assign f_AXI4_Wr_Data_d512_u0$CLR = 1'b0 ;

  // submodule f_AXI4_Wr_Resp_i16_u0
  assign f_AXI4_Wr_Resp_i16_u0$D_IN = fi_AXI4_Wr_Resp_i16_u0_enq_x ;
  assign f_AXI4_Wr_Resp_i16_u0$ENQ = EN_fi_AXI4_Wr_Resp_i16_u0_enq ;
  assign f_AXI4_Wr_Resp_i16_u0$DEQ =
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ;
  assign f_AXI4_Wr_Resp_i16_u0$CLR = 1'b0 ;

  // submodule f_BSV_to_C_bytevec
  always@(MUX_f_BSV_to_C_bytevec$enq_1__SEL_1 or
	  MUX_f_BSV_to_C_bytevec$enq_1__VAL_1 or
	  WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 or
	  MUX_f_BSV_to_C_bytevec$enq_1__VAL_2 or
	  WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 or
	  MUX_f_BSV_to_C_bytevec$enq_1__VAL_3 or
	  WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 or
	  MUX_f_BSV_to_C_bytevec$enq_1__VAL_4 or
	  WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 or
	  MUX_f_BSV_to_C_bytevec$enq_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_BSV_to_C_bytevec$enq_1__SEL_1:
	  f_BSV_to_C_bytevec$D_IN = MUX_f_BSV_to_C_bytevec$enq_1__VAL_1;
      WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0:
	  f_BSV_to_C_bytevec$D_IN = MUX_f_BSV_to_C_bytevec$enq_1__VAL_2;
      WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0:
	  f_BSV_to_C_bytevec$D_IN = MUX_f_BSV_to_C_bytevec$enq_1__VAL_3;
      WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0:
	  f_BSV_to_C_bytevec$D_IN = MUX_f_BSV_to_C_bytevec$enq_1__VAL_4;
      WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0:
	  f_BSV_to_C_bytevec$D_IN = MUX_f_BSV_to_C_bytevec$enq_1__VAL_5;
      default: f_BSV_to_C_bytevec$D_IN =
		   608'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_BSV_to_C_bytevec$ENQ =
	     WILL_FIRE_RL_rl_BSV_to_C_credits_only &&
	     (NOT_rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0__ETC___d178 ||
	      rg_credits_AXI4L_Wr_Data_d32 != 8'd0 ||
	      rg_credits_AXI4L_Rd_Addr_a32_u0 != 8'd0) ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Wr_Resp_i16_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4_Rd_Data_i16_d512_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Wr_Resp_u0 ||
	     WILL_FIRE_RL_rl_BSV_to_C_AXI4L_Rd_Data_d32_u0 ;
  assign f_BSV_to_C_bytevec$DEQ = EN_fo_BSV_to_C_bytevec_deq ;
  assign f_BSV_to_C_bytevec$CLR = 1'b0 ;

  // submodule f_C_to_BSV_bytevec
  assign f_C_to_BSV_bytevec$D_IN = fi_C_to_BSV_bytevec_enq_x ;
  assign f_C_to_BSV_bytevec$ENQ = EN_fi_C_to_BSV_bytevec_enq ;
  assign f_C_to_BSV_bytevec$DEQ =
	     MUX_rg_credits_AXI4L_Rd_Data_d32_u0$write_1__SEL_1 ;
  assign f_C_to_BSV_bytevec$CLR = 1'b0 ;

  // remaining internal signals
  assign NOT_f_AXI4_Wr_Resp_i16_u0_notEmpty__9_60_OR_rg_ETC___d167 =
	     (!f_AXI4_Wr_Resp_i16_u0$EMPTY_N ||
	      rg_credits_AXI4_Wr_Resp_i16_u0 == 8'd0) &&
	     (!f_AXI4_Rd_Data_i16_d512_u0$EMPTY_N ||
	      rg_credits_AXI4_Rd_Data_i16_d512_u0 == 8'd0) &&
	     (!f_AXI4L_Wr_Resp_u0$EMPTY_N ||
	      rg_credits_AXI4L_Wr_Resp_u0 == 8'd0) ;
  assign NOT_rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0__ETC___d178 =
	     rg_credits_AXI4_Wr_Addr_i16_a64_u0 != 8'd0 ||
	     rg_credits_AXI4_Wr_Data_d512_u0 != 8'd0 ||
	     rg_credits_AXI4_Rd_Addr_i16_a64_u0 != 8'd0 ||
	     rg_credits_AXI4L_Wr_Addr_a32_u0 != 8'd0 ;
  assign rg_credits_AXI4_Wr_Addr_i16_a64_u0_6_EQ_0_48_A_ETC___d159 =
	     rg_credits_AXI4_Wr_Addr_i16_a64_u0 == 8'd0 &&
	     rg_credits_AXI4_Wr_Data_d512_u0 == 8'd0 &&
	     rg_credits_AXI4_Rd_Addr_i16_a64_u0 == 8'd0 &&
	     rg_credits_AXI4L_Wr_Addr_a32_u0 == 8'd0 &&
	     rg_credits_AXI4L_Wr_Data_d32 == 8'd0 &&
	     rg_credits_AXI4L_Rd_Addr_a32_u0 == 8'd0 ||
	     f_BSV_to_C_bytevec$FULL_N ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_credits_AXI4L_Rd_Addr_a32_u0 <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rg_credits_AXI4L_Rd_Data_d32_u0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_credits_AXI4L_Wr_Addr_a32_u0 <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rg_credits_AXI4L_Wr_Data_d32 <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rg_credits_AXI4L_Wr_Resp_u0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_credits_AXI4_Rd_Addr_i16_a64_u0 <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rg_credits_AXI4_Rd_Data_i16_d512_u0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
	rg_credits_AXI4_Wr_Addr_i16_a64_u0 <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rg_credits_AXI4_Wr_Data_d512_u0 <= `BSV_ASSIGNMENT_DELAY 8'd128;
	rg_credits_AXI4_Wr_Resp_i16_u0 <= `BSV_ASSIGNMENT_DELAY 8'd0;
      end
    else
      begin
        if (rg_credits_AXI4L_Rd_Addr_a32_u0$EN)
	  rg_credits_AXI4L_Rd_Addr_a32_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4L_Rd_Addr_a32_u0$D_IN;
	if (rg_credits_AXI4L_Rd_Data_d32_u0$EN)
	  rg_credits_AXI4L_Rd_Data_d32_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4L_Rd_Data_d32_u0$D_IN;
	if (rg_credits_AXI4L_Wr_Addr_a32_u0$EN)
	  rg_credits_AXI4L_Wr_Addr_a32_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4L_Wr_Addr_a32_u0$D_IN;
	if (rg_credits_AXI4L_Wr_Data_d32$EN)
	  rg_credits_AXI4L_Wr_Data_d32 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4L_Wr_Data_d32$D_IN;
	if (rg_credits_AXI4L_Wr_Resp_u0$EN)
	  rg_credits_AXI4L_Wr_Resp_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4L_Wr_Resp_u0$D_IN;
	if (rg_credits_AXI4_Rd_Addr_i16_a64_u0$EN)
	  rg_credits_AXI4_Rd_Addr_i16_a64_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4_Rd_Addr_i16_a64_u0$D_IN;
	if (rg_credits_AXI4_Rd_Data_i16_d512_u0$EN)
	  rg_credits_AXI4_Rd_Data_i16_d512_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4_Rd_Data_i16_d512_u0$D_IN;
	if (rg_credits_AXI4_Wr_Addr_i16_a64_u0$EN)
	  rg_credits_AXI4_Wr_Addr_i16_a64_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4_Wr_Addr_i16_a64_u0$D_IN;
	if (rg_credits_AXI4_Wr_Data_d512_u0$EN)
	  rg_credits_AXI4_Wr_Data_d512_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4_Wr_Data_d512_u0$D_IN;
	if (rg_credits_AXI4_Wr_Resp_i16_u0$EN)
	  rg_credits_AXI4_Wr_Resp_i16_u0 <= `BSV_ASSIGNMENT_DELAY
	      rg_credits_AXI4_Wr_Resp_i16_u0$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_credits_AXI4L_Rd_Addr_a32_u0 = 8'hAA;
    rg_credits_AXI4L_Rd_Data_d32_u0 = 8'hAA;
    rg_credits_AXI4L_Wr_Addr_a32_u0 = 8'hAA;
    rg_credits_AXI4L_Wr_Data_d32 = 8'hAA;
    rg_credits_AXI4L_Wr_Resp_u0 = 8'hAA;
    rg_credits_AXI4_Rd_Addr_i16_a64_u0 = 8'hAA;
    rg_credits_AXI4_Rd_Data_i16_d512_u0 = 8'hAA;
    rg_credits_AXI4_Wr_Addr_i16_a64_u0 = 8'hAA;
    rg_credits_AXI4_Wr_Data_d512_u0 = 8'hAA;
    rg_credits_AXI4_Wr_Resp_i16_u0 = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkBytevec

