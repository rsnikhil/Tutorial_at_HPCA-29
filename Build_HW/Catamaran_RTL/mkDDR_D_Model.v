//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// awready                        O     1 reg
// wready                         O     1 reg
// bvalid                         O     1 reg
// bid                            O    16 reg
// bresp                          O     2 reg
// arready                        O     1 reg
// rvalid                         O     1 reg
// rid                            O    16 reg
// rdata                          O   512 reg
// rresp                          O     2 reg
// rlast                          O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// awvalid                        I     1
// awid                           I    16 reg
// awaddr                         I    64 reg
// awlen                          I     8 reg
// awsize                         I     3 reg
// awburst                        I     2 reg
// awlock                         I     1 reg
// awcache                        I     4 reg
// awprot                         I     3 reg
// awqos                          I     4 reg
// awregion                       I     4 reg
// wvalid                         I     1
// wdata                          I   512 reg
// wstrb                          I    64 reg
// wlast                          I     1 reg
// bready                         I     1
// arvalid                        I     1
// arid                           I    16 reg
// araddr                         I    64 reg
// arlen                          I     8 reg
// arsize                         I     3 reg
// arburst                        I     2 reg
// arlock                         I     1 reg
// arcache                        I     4 reg
// arprot                         I     3 reg
// arqos                          I     4 reg
// arregion                       I     4 reg
// rready                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkDDR_D_Model(CLK,
		     RST_N,

		     awvalid,
		     awid,
		     awaddr,
		     awlen,
		     awsize,
		     awburst,
		     awlock,
		     awcache,
		     awprot,
		     awqos,
		     awregion,

		     awready,

		     wvalid,
		     wdata,
		     wstrb,
		     wlast,

		     wready,

		     bvalid,

		     bid,

		     bresp,

		     bready,

		     arvalid,
		     arid,
		     araddr,
		     arlen,
		     arsize,
		     arburst,
		     arlock,
		     arcache,
		     arprot,
		     arqos,
		     arregion,

		     arready,

		     rvalid,

		     rid,

		     rdata,

		     rresp,

		     rlast,

		     rready);
  input  CLK;
  input  RST_N;

  // action method m_awvalid
  input  awvalid;
  input  [15 : 0] awid;
  input  [63 : 0] awaddr;
  input  [7 : 0] awlen;
  input  [2 : 0] awsize;
  input  [1 : 0] awburst;
  input  awlock;
  input  [3 : 0] awcache;
  input  [2 : 0] awprot;
  input  [3 : 0] awqos;
  input  [3 : 0] awregion;

  // value method m_awready
  output awready;

  // action method m_wvalid
  input  wvalid;
  input  [511 : 0] wdata;
  input  [63 : 0] wstrb;
  input  wlast;

  // value method m_wready
  output wready;

  // value method m_bvalid
  output bvalid;

  // value method m_bid
  output [15 : 0] bid;

  // value method m_bresp
  output [1 : 0] bresp;

  // value method m_buser

  // action method m_bready
  input  bready;

  // action method m_arvalid
  input  arvalid;
  input  [15 : 0] arid;
  input  [63 : 0] araddr;
  input  [7 : 0] arlen;
  input  [2 : 0] arsize;
  input  [1 : 0] arburst;
  input  arlock;
  input  [3 : 0] arcache;
  input  [2 : 0] arprot;
  input  [3 : 0] arqos;
  input  [3 : 0] arregion;

  // value method m_arready
  output arready;

  // value method m_rvalid
  output rvalid;

  // value method m_rid
  output [15 : 0] rid;

  // value method m_rdata
  output [511 : 0] rdata;

  // value method m_rresp
  output [1 : 0] rresp;

  // value method m_rlast
  output rlast;

  // value method m_ruser

  // action method m_rready
  input  rready;

  // signals for module outputs
  wire [511 : 0] rdata;
  wire [15 : 0] bid, rid;
  wire [1 : 0] bresp, rresp;
  wire arready, awready, bvalid, rlast, rvalid, wready;

  // register deburster_rg_ar_beat_count
  reg [7 : 0] deburster_rg_ar_beat_count;
  wire [7 : 0] deburster_rg_ar_beat_count$D_IN;
  wire deburster_rg_ar_beat_count$EN;

  // register deburster_rg_b_beat_count
  reg [7 : 0] deburster_rg_b_beat_count;
  wire [7 : 0] deburster_rg_b_beat_count$D_IN;
  wire deburster_rg_b_beat_count$EN;

  // register deburster_rg_b_resp
  reg [1 : 0] deburster_rg_b_resp;
  wire [1 : 0] deburster_rg_b_resp$D_IN;
  wire deburster_rg_b_resp$EN;

  // register deburster_rg_last_beat_raddr
  reg [63 : 0] deburster_rg_last_beat_raddr;
  wire [63 : 0] deburster_rg_last_beat_raddr$D_IN;
  wire deburster_rg_last_beat_raddr$EN;

  // register deburster_rg_last_beat_waddr
  reg [63 : 0] deburster_rg_last_beat_waddr;
  wire [63 : 0] deburster_rg_last_beat_waddr$D_IN;
  wire deburster_rg_last_beat_waddr$EN;

  // register deburster_rg_r_beat_count
  reg [7 : 0] deburster_rg_r_beat_count;
  wire [7 : 0] deburster_rg_r_beat_count$D_IN;
  wire deburster_rg_r_beat_count$EN;

  // register deburster_rg_reset
  reg deburster_rg_reset;
  wire deburster_rg_reset$D_IN, deburster_rg_reset$EN;

  // register deburster_rg_w_beat_count
  reg [7 : 0] deburster_rg_w_beat_count;
  wire [7 : 0] deburster_rg_w_beat_count$D_IN;
  wire deburster_rg_w_beat_count$EN;

  // register ifc_rg_display_info
  reg ifc_rg_display_info;
  wire ifc_rg_display_info$D_IN, ifc_rg_display_info$EN;

  // ports of submodule deburster_f_r_arlen
  wire [7 : 0] deburster_f_r_arlen$D_IN, deburster_f_r_arlen$D_OUT;
  wire deburster_f_r_arlen$CLR,
       deburster_f_r_arlen$DEQ,
       deburster_f_r_arlen$EMPTY_N,
       deburster_f_r_arlen$ENQ,
       deburster_f_r_arlen$FULL_N;

  // ports of submodule deburster_f_w_awlen
  wire [7 : 0] deburster_f_w_awlen$D_IN, deburster_f_w_awlen$D_OUT;
  wire deburster_f_w_awlen$CLR,
       deburster_f_w_awlen$DEQ,
       deburster_f_w_awlen$EMPTY_N,
       deburster_f_w_awlen$ENQ,
       deburster_f_w_awlen$FULL_N;

  // ports of submodule deburster_xactor_from_master_f_rd_addr
  wire [108 : 0] deburster_xactor_from_master_f_rd_addr$D_IN,
		 deburster_xactor_from_master_f_rd_addr$D_OUT;
  wire deburster_xactor_from_master_f_rd_addr$CLR,
       deburster_xactor_from_master_f_rd_addr$DEQ,
       deburster_xactor_from_master_f_rd_addr$EMPTY_N,
       deburster_xactor_from_master_f_rd_addr$ENQ,
       deburster_xactor_from_master_f_rd_addr$FULL_N;

  // ports of submodule deburster_xactor_from_master_f_rd_data
  wire [530 : 0] deburster_xactor_from_master_f_rd_data$D_IN,
		 deburster_xactor_from_master_f_rd_data$D_OUT;
  wire deburster_xactor_from_master_f_rd_data$CLR,
       deburster_xactor_from_master_f_rd_data$DEQ,
       deburster_xactor_from_master_f_rd_data$EMPTY_N,
       deburster_xactor_from_master_f_rd_data$ENQ,
       deburster_xactor_from_master_f_rd_data$FULL_N;

  // ports of submodule deburster_xactor_from_master_f_wr_addr
  wire [108 : 0] deburster_xactor_from_master_f_wr_addr$D_IN,
		 deburster_xactor_from_master_f_wr_addr$D_OUT;
  wire deburster_xactor_from_master_f_wr_addr$CLR,
       deburster_xactor_from_master_f_wr_addr$DEQ,
       deburster_xactor_from_master_f_wr_addr$EMPTY_N,
       deburster_xactor_from_master_f_wr_addr$ENQ,
       deburster_xactor_from_master_f_wr_addr$FULL_N;

  // ports of submodule deburster_xactor_from_master_f_wr_data
  wire [576 : 0] deburster_xactor_from_master_f_wr_data$D_IN,
		 deburster_xactor_from_master_f_wr_data$D_OUT;
  wire deburster_xactor_from_master_f_wr_data$CLR,
       deburster_xactor_from_master_f_wr_data$DEQ,
       deburster_xactor_from_master_f_wr_data$EMPTY_N,
       deburster_xactor_from_master_f_wr_data$ENQ,
       deburster_xactor_from_master_f_wr_data$FULL_N;

  // ports of submodule deburster_xactor_from_master_f_wr_resp
  wire [17 : 0] deburster_xactor_from_master_f_wr_resp$D_IN,
		deburster_xactor_from_master_f_wr_resp$D_OUT;
  wire deburster_xactor_from_master_f_wr_resp$CLR,
       deburster_xactor_from_master_f_wr_resp$DEQ,
       deburster_xactor_from_master_f_wr_resp$EMPTY_N,
       deburster_xactor_from_master_f_wr_resp$ENQ,
       deburster_xactor_from_master_f_wr_resp$FULL_N;

  // ports of submodule deburster_xactor_to_slave_f_rd_addr
  wire [108 : 0] deburster_xactor_to_slave_f_rd_addr$D_IN,
		 deburster_xactor_to_slave_f_rd_addr$D_OUT;
  wire deburster_xactor_to_slave_f_rd_addr$CLR,
       deburster_xactor_to_slave_f_rd_addr$DEQ,
       deburster_xactor_to_slave_f_rd_addr$EMPTY_N,
       deburster_xactor_to_slave_f_rd_addr$ENQ,
       deburster_xactor_to_slave_f_rd_addr$FULL_N;

  // ports of submodule deburster_xactor_to_slave_f_rd_data
  wire [530 : 0] deburster_xactor_to_slave_f_rd_data$D_IN,
		 deburster_xactor_to_slave_f_rd_data$D_OUT;
  wire deburster_xactor_to_slave_f_rd_data$CLR,
       deburster_xactor_to_slave_f_rd_data$DEQ,
       deburster_xactor_to_slave_f_rd_data$EMPTY_N,
       deburster_xactor_to_slave_f_rd_data$ENQ,
       deburster_xactor_to_slave_f_rd_data$FULL_N;

  // ports of submodule deburster_xactor_to_slave_f_wr_addr
  wire [108 : 0] deburster_xactor_to_slave_f_wr_addr$D_IN,
		 deburster_xactor_to_slave_f_wr_addr$D_OUT;
  wire deburster_xactor_to_slave_f_wr_addr$CLR,
       deburster_xactor_to_slave_f_wr_addr$DEQ,
       deburster_xactor_to_slave_f_wr_addr$EMPTY_N,
       deburster_xactor_to_slave_f_wr_addr$ENQ,
       deburster_xactor_to_slave_f_wr_addr$FULL_N;

  // ports of submodule deburster_xactor_to_slave_f_wr_data
  wire [576 : 0] deburster_xactor_to_slave_f_wr_data$D_IN,
		 deburster_xactor_to_slave_f_wr_data$D_OUT;
  wire deburster_xactor_to_slave_f_wr_data$CLR,
       deburster_xactor_to_slave_f_wr_data$DEQ,
       deburster_xactor_to_slave_f_wr_data$EMPTY_N,
       deburster_xactor_to_slave_f_wr_data$ENQ,
       deburster_xactor_to_slave_f_wr_data$FULL_N;

  // ports of submodule deburster_xactor_to_slave_f_wr_resp
  wire [17 : 0] deburster_xactor_to_slave_f_wr_resp$D_IN,
		deburster_xactor_to_slave_f_wr_resp$D_OUT;
  wire deburster_xactor_to_slave_f_wr_resp$CLR,
       deburster_xactor_to_slave_f_wr_resp$DEQ,
       deburster_xactor_to_slave_f_wr_resp$EMPTY_N,
       deburster_xactor_to_slave_f_wr_resp$ENQ,
       deburster_xactor_to_slave_f_wr_resp$FULL_N;

  // ports of submodule ifc_axi4_xactor_f_rd_addr
  wire [108 : 0] ifc_axi4_xactor_f_rd_addr$D_IN,
		 ifc_axi4_xactor_f_rd_addr$D_OUT;
  wire ifc_axi4_xactor_f_rd_addr$CLR,
       ifc_axi4_xactor_f_rd_addr$DEQ,
       ifc_axi4_xactor_f_rd_addr$EMPTY_N,
       ifc_axi4_xactor_f_rd_addr$ENQ,
       ifc_axi4_xactor_f_rd_addr$FULL_N;

  // ports of submodule ifc_axi4_xactor_f_rd_data
  wire [530 : 0] ifc_axi4_xactor_f_rd_data$D_IN,
		 ifc_axi4_xactor_f_rd_data$D_OUT;
  wire ifc_axi4_xactor_f_rd_data$CLR,
       ifc_axi4_xactor_f_rd_data$DEQ,
       ifc_axi4_xactor_f_rd_data$EMPTY_N,
       ifc_axi4_xactor_f_rd_data$ENQ,
       ifc_axi4_xactor_f_rd_data$FULL_N;

  // ports of submodule ifc_axi4_xactor_f_wr_addr
  wire [108 : 0] ifc_axi4_xactor_f_wr_addr$D_IN,
		 ifc_axi4_xactor_f_wr_addr$D_OUT;
  wire ifc_axi4_xactor_f_wr_addr$CLR,
       ifc_axi4_xactor_f_wr_addr$DEQ,
       ifc_axi4_xactor_f_wr_addr$EMPTY_N,
       ifc_axi4_xactor_f_wr_addr$ENQ,
       ifc_axi4_xactor_f_wr_addr$FULL_N;

  // ports of submodule ifc_axi4_xactor_f_wr_data
  wire [576 : 0] ifc_axi4_xactor_f_wr_data$D_IN,
		 ifc_axi4_xactor_f_wr_data$D_OUT;
  wire ifc_axi4_xactor_f_wr_data$CLR,
       ifc_axi4_xactor_f_wr_data$DEQ,
       ifc_axi4_xactor_f_wr_data$EMPTY_N,
       ifc_axi4_xactor_f_wr_data$ENQ,
       ifc_axi4_xactor_f_wr_data$FULL_N;

  // ports of submodule ifc_axi4_xactor_f_wr_resp
  wire [17 : 0] ifc_axi4_xactor_f_wr_resp$D_IN,
		ifc_axi4_xactor_f_wr_resp$D_OUT;
  wire ifc_axi4_xactor_f_wr_resp$CLR,
       ifc_axi4_xactor_f_wr_resp$DEQ,
       ifc_axi4_xactor_f_wr_resp$EMPTY_N,
       ifc_axi4_xactor_f_wr_resp$ENQ,
       ifc_axi4_xactor_f_wr_resp$FULL_N;

  // ports of submodule ifc_rf
  wire [511 : 0] ifc_rf$D_IN, ifc_rf$D_OUT_1, ifc_rf$D_OUT_2;
  wire [63 : 0] ifc_rf$ADDR_1,
		ifc_rf$ADDR_2,
		ifc_rf$ADDR_3,
		ifc_rf$ADDR_4,
		ifc_rf$ADDR_5,
		ifc_rf$ADDR_IN;
  wire ifc_rf$WE;

  // rule scheduling signals
  wire CAN_FIRE_RL_deburster_rl_rd_resp_slave_to_master,
       CAN_FIRE_RL_deburster_rl_rd_xaction_master_to_slave,
       CAN_FIRE_RL_deburster_rl_reset,
       CAN_FIRE_RL_deburster_rl_wr_resp_slave_to_master,
       CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave,
       CAN_FIRE_RL_ifc_rl_info,
       CAN_FIRE_RL_ifc_rl_rd_req,
       CAN_FIRE_RL_ifc_rl_wr_req,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_m_arvalid,
       CAN_FIRE_m_awvalid,
       CAN_FIRE_m_bready,
       CAN_FIRE_m_rready,
       CAN_FIRE_m_wvalid,
       WILL_FIRE_RL_deburster_rl_rd_resp_slave_to_master,
       WILL_FIRE_RL_deburster_rl_rd_xaction_master_to_slave,
       WILL_FIRE_RL_deburster_rl_reset,
       WILL_FIRE_RL_deburster_rl_wr_resp_slave_to_master,
       WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave,
       WILL_FIRE_RL_ifc_rl_info,
       WILL_FIRE_RL_ifc_rl_rd_req,
       WILL_FIRE_RL_ifc_rl_wr_req,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_m_arvalid,
       WILL_FIRE_m_awvalid,
       WILL_FIRE_m_bready,
       WILL_FIRE_m_rready,
       WILL_FIRE_m_wvalid;

  // inputs to muxes for submodule ports
  wire [7 : 0] MUX_deburster_rg_ar_beat_count$write_1__VAL_2,
	       MUX_deburster_rg_b_beat_count$write_1__VAL_2,
	       MUX_deburster_rg_r_beat_count$write_1__VAL_2,
	       MUX_deburster_rg_w_beat_count$write_1__VAL_2;
  wire [1 : 0] MUX_deburster_rg_b_resp$write_1__VAL_2;
  wire MUX_deburster_rg_b_resp$write_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1012;
  reg [31 : 0] v__h1127;
  reg [31 : 0] v__h1505;
  reg [31 : 0] v__h1657;
  reg [31 : 0] v__h12099;
  reg [31 : 0] v__h1006;
  reg [31 : 0] v__h1121;
  reg [31 : 0] v__h1499;
  reg [31 : 0] v__h1651;
  reg [31 : 0] v__h12093;
  // synopsys translate_on

  // remaining internal signals
  wire [511 : 0] mask__h1809,
		 x1_avValue_rdata__h1245,
		 x1_avValue_rdata__h1263,
		 x__h1820,
		 y__h1821,
		 y__h1822,
		 y_avValue_rdata__h1257;
  wire [63 : 0] a_out_araddr__h12660,
		a_out_awaddr__h11576,
		addr___1__h11670,
		addr___1__h12754,
		addr__h11658,
		addr__h12742,
		burst_len__h11659,
		burst_len__h12743,
		ifc_axi4_xactor_f_rd_addrD_OUT_BITS_92_TO_29__ETC__q2,
		ifc_axi4_xactor_f_wr_addrD_OUT_BITS_92_TO_29__ETC__q1,
		wrap_mask__h11660,
		wrap_mask__h12744,
		x__h11682,
		x__h12766,
		y__h11683,
		y__h11684,
		y__h12767,
		y__h12768;
  wire [7 : 0] x__h11957, x__h12464, x__h12951, x__h13170;
  wire [1 : 0] x1_avValue_rresp__h1264;
  wire deburster_rg_ar_beat_count_01_ULT_deburster_xa_ETC___d432,
       deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379,
       deburster_rg_r_beat_count_41_ULT_deburster_f_r_ETC___d443,
       deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364,
       ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15,
       ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7,
       ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8,
       ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39,
       ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40,
       ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50;

  // action method m_awvalid
  assign CAN_FIRE_m_awvalid = 1'd1 ;
  assign WILL_FIRE_m_awvalid = 1'd1 ;

  // value method m_awready
  assign awready = deburster_xactor_from_master_f_wr_addr$FULL_N ;

  // action method m_wvalid
  assign CAN_FIRE_m_wvalid = 1'd1 ;
  assign WILL_FIRE_m_wvalid = 1'd1 ;

  // value method m_wready
  assign wready = deburster_xactor_from_master_f_wr_data$FULL_N ;

  // value method m_bvalid
  assign bvalid = deburster_xactor_from_master_f_wr_resp$EMPTY_N ;

  // value method m_bid
  assign bid = deburster_xactor_from_master_f_wr_resp$D_OUT[17:2] ;

  // value method m_bresp
  assign bresp = deburster_xactor_from_master_f_wr_resp$D_OUT[1:0] ;

  // action method m_bready
  assign CAN_FIRE_m_bready = 1'd1 ;
  assign WILL_FIRE_m_bready = 1'd1 ;

  // action method m_arvalid
  assign CAN_FIRE_m_arvalid = 1'd1 ;
  assign WILL_FIRE_m_arvalid = 1'd1 ;

  // value method m_arready
  assign arready = deburster_xactor_from_master_f_rd_addr$FULL_N ;

  // value method m_rvalid
  assign rvalid = deburster_xactor_from_master_f_rd_data$EMPTY_N ;

  // value method m_rid
  assign rid = deburster_xactor_from_master_f_rd_data$D_OUT[530:515] ;

  // value method m_rdata
  assign rdata = deburster_xactor_from_master_f_rd_data$D_OUT[514:3] ;

  // value method m_rresp
  assign rresp = deburster_xactor_from_master_f_rd_data$D_OUT[2:1] ;

  // value method m_rlast
  assign rlast = deburster_xactor_from_master_f_rd_data$D_OUT[0] ;

  // action method m_rready
  assign CAN_FIRE_m_rready = 1'd1 ;
  assign WILL_FIRE_m_rready = 1'd1 ;

  // submodule deburster_f_r_arlen
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) deburster_f_r_arlen(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(deburster_f_r_arlen$D_IN),
						  .ENQ(deburster_f_r_arlen$ENQ),
						  .DEQ(deburster_f_r_arlen$DEQ),
						  .CLR(deburster_f_r_arlen$CLR),
						  .D_OUT(deburster_f_r_arlen$D_OUT),
						  .FULL_N(deburster_f_r_arlen$FULL_N),
						  .EMPTY_N(deburster_f_r_arlen$EMPTY_N));

  // submodule deburster_f_w_awlen
  SizedFIFO #(.p1width(32'd8),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(1'd1)) deburster_f_w_awlen(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(deburster_f_w_awlen$D_IN),
						  .ENQ(deburster_f_w_awlen$ENQ),
						  .DEQ(deburster_f_w_awlen$DEQ),
						  .CLR(deburster_f_w_awlen$CLR),
						  .D_OUT(deburster_f_w_awlen$D_OUT),
						  .FULL_N(deburster_f_w_awlen$FULL_N),
						  .EMPTY_N(deburster_f_w_awlen$EMPTY_N));

  // submodule deburster_xactor_from_master_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) deburster_xactor_from_master_f_rd_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburster_xactor_from_master_f_rd_addr$D_IN),
								 .ENQ(deburster_xactor_from_master_f_rd_addr$ENQ),
								 .DEQ(deburster_xactor_from_master_f_rd_addr$DEQ),
								 .CLR(deburster_xactor_from_master_f_rd_addr$CLR),
								 .D_OUT(deburster_xactor_from_master_f_rd_addr$D_OUT),
								 .FULL_N(deburster_xactor_from_master_f_rd_addr$FULL_N),
								 .EMPTY_N(deburster_xactor_from_master_f_rd_addr$EMPTY_N));

  // submodule deburster_xactor_from_master_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) deburster_xactor_from_master_f_rd_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburster_xactor_from_master_f_rd_data$D_IN),
								 .ENQ(deburster_xactor_from_master_f_rd_data$ENQ),
								 .DEQ(deburster_xactor_from_master_f_rd_data$DEQ),
								 .CLR(deburster_xactor_from_master_f_rd_data$CLR),
								 .D_OUT(deburster_xactor_from_master_f_rd_data$D_OUT),
								 .FULL_N(deburster_xactor_from_master_f_rd_data$FULL_N),
								 .EMPTY_N(deburster_xactor_from_master_f_rd_data$EMPTY_N));

  // submodule deburster_xactor_from_master_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) deburster_xactor_from_master_f_wr_addr(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburster_xactor_from_master_f_wr_addr$D_IN),
								 .ENQ(deburster_xactor_from_master_f_wr_addr$ENQ),
								 .DEQ(deburster_xactor_from_master_f_wr_addr$DEQ),
								 .CLR(deburster_xactor_from_master_f_wr_addr$CLR),
								 .D_OUT(deburster_xactor_from_master_f_wr_addr$D_OUT),
								 .FULL_N(deburster_xactor_from_master_f_wr_addr$FULL_N),
								 .EMPTY_N(deburster_xactor_from_master_f_wr_addr$EMPTY_N));

  // submodule deburster_xactor_from_master_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(1'd1)) deburster_xactor_from_master_f_wr_data(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburster_xactor_from_master_f_wr_data$D_IN),
								 .ENQ(deburster_xactor_from_master_f_wr_data$ENQ),
								 .DEQ(deburster_xactor_from_master_f_wr_data$DEQ),
								 .CLR(deburster_xactor_from_master_f_wr_data$CLR),
								 .D_OUT(deburster_xactor_from_master_f_wr_data$D_OUT),
								 .FULL_N(deburster_xactor_from_master_f_wr_data$FULL_N),
								 .EMPTY_N(deburster_xactor_from_master_f_wr_data$EMPTY_N));

  // submodule deburster_xactor_from_master_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) deburster_xactor_from_master_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(deburster_xactor_from_master_f_wr_resp$D_IN),
								 .ENQ(deburster_xactor_from_master_f_wr_resp$ENQ),
								 .DEQ(deburster_xactor_from_master_f_wr_resp$DEQ),
								 .CLR(deburster_xactor_from_master_f_wr_resp$CLR),
								 .D_OUT(deburster_xactor_from_master_f_wr_resp$D_OUT),
								 .FULL_N(deburster_xactor_from_master_f_wr_resp$FULL_N),
								 .EMPTY_N(deburster_xactor_from_master_f_wr_resp$EMPTY_N));

  // submodule deburster_xactor_to_slave_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) deburster_xactor_to_slave_f_rd_addr(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(deburster_xactor_to_slave_f_rd_addr$D_IN),
							      .ENQ(deburster_xactor_to_slave_f_rd_addr$ENQ),
							      .DEQ(deburster_xactor_to_slave_f_rd_addr$DEQ),
							      .CLR(deburster_xactor_to_slave_f_rd_addr$CLR),
							      .D_OUT(deburster_xactor_to_slave_f_rd_addr$D_OUT),
							      .FULL_N(deburster_xactor_to_slave_f_rd_addr$FULL_N),
							      .EMPTY_N(deburster_xactor_to_slave_f_rd_addr$EMPTY_N));

  // submodule deburster_xactor_to_slave_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) deburster_xactor_to_slave_f_rd_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(deburster_xactor_to_slave_f_rd_data$D_IN),
							      .ENQ(deburster_xactor_to_slave_f_rd_data$ENQ),
							      .DEQ(deburster_xactor_to_slave_f_rd_data$DEQ),
							      .CLR(deburster_xactor_to_slave_f_rd_data$CLR),
							      .D_OUT(deburster_xactor_to_slave_f_rd_data$D_OUT),
							      .FULL_N(deburster_xactor_to_slave_f_rd_data$FULL_N),
							      .EMPTY_N(deburster_xactor_to_slave_f_rd_data$EMPTY_N));

  // submodule deburster_xactor_to_slave_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) deburster_xactor_to_slave_f_wr_addr(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(deburster_xactor_to_slave_f_wr_addr$D_IN),
							      .ENQ(deburster_xactor_to_slave_f_wr_addr$ENQ),
							      .DEQ(deburster_xactor_to_slave_f_wr_addr$DEQ),
							      .CLR(deburster_xactor_to_slave_f_wr_addr$CLR),
							      .D_OUT(deburster_xactor_to_slave_f_wr_addr$D_OUT),
							      .FULL_N(deburster_xactor_to_slave_f_wr_addr$FULL_N),
							      .EMPTY_N(deburster_xactor_to_slave_f_wr_addr$EMPTY_N));

  // submodule deburster_xactor_to_slave_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(1'd1)) deburster_xactor_to_slave_f_wr_data(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(deburster_xactor_to_slave_f_wr_data$D_IN),
							      .ENQ(deburster_xactor_to_slave_f_wr_data$ENQ),
							      .DEQ(deburster_xactor_to_slave_f_wr_data$DEQ),
							      .CLR(deburster_xactor_to_slave_f_wr_data$CLR),
							      .D_OUT(deburster_xactor_to_slave_f_wr_data$D_OUT),
							      .FULL_N(deburster_xactor_to_slave_f_wr_data$FULL_N),
							      .EMPTY_N(deburster_xactor_to_slave_f_wr_data$EMPTY_N));

  // submodule deburster_xactor_to_slave_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) deburster_xactor_to_slave_f_wr_resp(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(deburster_xactor_to_slave_f_wr_resp$D_IN),
							      .ENQ(deburster_xactor_to_slave_f_wr_resp$ENQ),
							      .DEQ(deburster_xactor_to_slave_f_wr_resp$DEQ),
							      .CLR(deburster_xactor_to_slave_f_wr_resp$CLR),
							      .D_OUT(deburster_xactor_to_slave_f_wr_resp$D_OUT),
							      .FULL_N(deburster_xactor_to_slave_f_wr_resp$FULL_N),
							      .EMPTY_N(deburster_xactor_to_slave_f_wr_resp$EMPTY_N));

  // submodule ifc_axi4_xactor_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) ifc_axi4_xactor_f_rd_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ifc_axi4_xactor_f_rd_addr$D_IN),
						    .ENQ(ifc_axi4_xactor_f_rd_addr$ENQ),
						    .DEQ(ifc_axi4_xactor_f_rd_addr$DEQ),
						    .CLR(ifc_axi4_xactor_f_rd_addr$CLR),
						    .D_OUT(ifc_axi4_xactor_f_rd_addr$D_OUT),
						    .FULL_N(ifc_axi4_xactor_f_rd_addr$FULL_N),
						    .EMPTY_N(ifc_axi4_xactor_f_rd_addr$EMPTY_N));

  // submodule ifc_axi4_xactor_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) ifc_axi4_xactor_f_rd_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ifc_axi4_xactor_f_rd_data$D_IN),
						    .ENQ(ifc_axi4_xactor_f_rd_data$ENQ),
						    .DEQ(ifc_axi4_xactor_f_rd_data$DEQ),
						    .CLR(ifc_axi4_xactor_f_rd_data$CLR),
						    .D_OUT(ifc_axi4_xactor_f_rd_data$D_OUT),
						    .FULL_N(ifc_axi4_xactor_f_rd_data$FULL_N),
						    .EMPTY_N(ifc_axi4_xactor_f_rd_data$EMPTY_N));

  // submodule ifc_axi4_xactor_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) ifc_axi4_xactor_f_wr_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ifc_axi4_xactor_f_wr_addr$D_IN),
						    .ENQ(ifc_axi4_xactor_f_wr_addr$ENQ),
						    .DEQ(ifc_axi4_xactor_f_wr_addr$DEQ),
						    .CLR(ifc_axi4_xactor_f_wr_addr$CLR),
						    .D_OUT(ifc_axi4_xactor_f_wr_addr$D_OUT),
						    .FULL_N(ifc_axi4_xactor_f_wr_addr$FULL_N),
						    .EMPTY_N(ifc_axi4_xactor_f_wr_addr$EMPTY_N));

  // submodule ifc_axi4_xactor_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(1'd1)) ifc_axi4_xactor_f_wr_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ifc_axi4_xactor_f_wr_data$D_IN),
						    .ENQ(ifc_axi4_xactor_f_wr_data$ENQ),
						    .DEQ(ifc_axi4_xactor_f_wr_data$DEQ),
						    .CLR(ifc_axi4_xactor_f_wr_data$CLR),
						    .D_OUT(ifc_axi4_xactor_f_wr_data$D_OUT),
						    .FULL_N(ifc_axi4_xactor_f_wr_data$FULL_N),
						    .EMPTY_N(ifc_axi4_xactor_f_wr_data$EMPTY_N));

  // submodule ifc_axi4_xactor_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) ifc_axi4_xactor_f_wr_resp(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(ifc_axi4_xactor_f_wr_resp$D_IN),
						    .ENQ(ifc_axi4_xactor_f_wr_resp$ENQ),
						    .DEQ(ifc_axi4_xactor_f_wr_resp$DEQ),
						    .CLR(ifc_axi4_xactor_f_wr_resp$CLR),
						    .D_OUT(ifc_axi4_xactor_f_wr_resp$D_OUT),
						    .FULL_N(ifc_axi4_xactor_f_wr_resp$FULL_N),
						    .EMPTY_N(ifc_axi4_xactor_f_wr_resp$EMPTY_N));

  // submodule ifc_rf
  RegFile #(.addr_width(32'd64),
	    .data_width(32'd512),
	    .lo(64'd0),
	    .hi(64'd67108863)) ifc_rf(.CLK(CLK),
				      .ADDR_1(ifc_rf$ADDR_1),
				      .ADDR_2(ifc_rf$ADDR_2),
				      .ADDR_3(ifc_rf$ADDR_3),
				      .ADDR_4(ifc_rf$ADDR_4),
				      .ADDR_5(ifc_rf$ADDR_5),
				      .ADDR_IN(ifc_rf$ADDR_IN),
				      .D_IN(ifc_rf$D_IN),
				      .WE(ifc_rf$WE),
				      .D_OUT_1(ifc_rf$D_OUT_1),
				      .D_OUT_2(ifc_rf$D_OUT_2),
				      .D_OUT_3(),
				      .D_OUT_4(),
				      .D_OUT_5());

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_ifc_rl_info
  assign CAN_FIRE_RL_ifc_rl_info = ifc_rg_display_info ;
  assign WILL_FIRE_RL_ifc_rl_info = ifc_rg_display_info ;

  // rule RL_ifc_rl_rd_req
  assign CAN_FIRE_RL_ifc_rl_rd_req =
	     ifc_axi4_xactor_f_rd_addr$EMPTY_N &&
	     ifc_axi4_xactor_f_rd_data$FULL_N ;
  assign WILL_FIRE_RL_ifc_rl_rd_req = CAN_FIRE_RL_ifc_rl_rd_req ;

  // rule RL_ifc_rl_wr_req
  assign CAN_FIRE_RL_ifc_rl_wr_req =
	     ifc_axi4_xactor_f_wr_addr$EMPTY_N &&
	     ifc_axi4_xactor_f_wr_data$EMPTY_N &&
	     ifc_axi4_xactor_f_wr_resp$FULL_N ;
  assign WILL_FIRE_RL_ifc_rl_wr_req = CAN_FIRE_RL_ifc_rl_wr_req ;

  // rule RL_deburster_rl_wr_xaction_master_to_slave
  assign CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave =
	     deburster_xactor_to_slave_f_wr_addr$FULL_N &&
	     deburster_xactor_from_master_f_wr_addr$EMPTY_N &&
	     deburster_xactor_to_slave_f_wr_data$FULL_N &&
	     deburster_xactor_from_master_f_wr_data$EMPTY_N &&
	     (deburster_rg_w_beat_count != 8'd0 ||
	      deburster_f_w_awlen$FULL_N) ;
  assign WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave =
	     CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave ;

  // rule RL_deburster_rl_wr_resp_slave_to_master
  assign CAN_FIRE_RL_deburster_rl_wr_resp_slave_to_master =
	     deburster_xactor_to_slave_f_wr_resp$EMPTY_N &&
	     deburster_f_w_awlen$EMPTY_N &&
	     (deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379 ||
	      deburster_xactor_from_master_f_wr_resp$FULL_N) ;
  assign WILL_FIRE_RL_deburster_rl_wr_resp_slave_to_master =
	     CAN_FIRE_RL_deburster_rl_wr_resp_slave_to_master ;

  // rule RL_deburster_rl_rd_xaction_master_to_slave
  assign CAN_FIRE_RL_deburster_rl_rd_xaction_master_to_slave =
	     deburster_xactor_to_slave_f_rd_addr$FULL_N &&
	     deburster_xactor_from_master_f_rd_addr$EMPTY_N &&
	     (deburster_rg_ar_beat_count != 8'd0 ||
	      deburster_f_r_arlen$FULL_N) ;
  assign WILL_FIRE_RL_deburster_rl_rd_xaction_master_to_slave =
	     CAN_FIRE_RL_deburster_rl_rd_xaction_master_to_slave ;

  // rule RL_deburster_rl_rd_resp_slave_to_master
  assign CAN_FIRE_RL_deburster_rl_rd_resp_slave_to_master =
	     deburster_xactor_to_slave_f_rd_data$EMPTY_N &&
	     deburster_f_r_arlen$EMPTY_N &&
	     deburster_xactor_from_master_f_rd_data$FULL_N ;
  assign WILL_FIRE_RL_deburster_rl_rd_resp_slave_to_master =
	     CAN_FIRE_RL_deburster_rl_rd_resp_slave_to_master ;

  // rule RL_deburster_rl_reset
  assign CAN_FIRE_RL_deburster_rl_reset = deburster_rg_reset ;
  assign WILL_FIRE_RL_deburster_rl_reset = deburster_rg_reset ;

  // inputs to muxes for submodule ports
  assign MUX_deburster_rg_b_resp$write_1__SEL_2 =
	     WILL_FIRE_RL_deburster_rl_wr_resp_slave_to_master &&
	     (deburster_rg_b_resp == 2'b0 &&
	      deburster_xactor_to_slave_f_wr_resp$D_OUT[1:0] != 2'b0 ||
	      !deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379) ;
  assign MUX_deburster_rg_ar_beat_count$write_1__VAL_2 =
	     deburster_rg_ar_beat_count_01_ULT_deburster_xa_ETC___d432 ?
	       x__h12951 :
	       8'd0 ;
  assign MUX_deburster_rg_b_beat_count$write_1__VAL_2 =
	     deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379 ?
	       x__h12464 :
	       8'd0 ;
  assign MUX_deburster_rg_b_resp$write_1__VAL_2 =
	     deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379 ?
	       deburster_xactor_to_slave_f_wr_resp$D_OUT[1:0] :
	       2'b0 ;
  assign MUX_deburster_rg_r_beat_count$write_1__VAL_2 =
	     deburster_rg_r_beat_count_41_ULT_deburster_f_r_ETC___d443 ?
	       x__h13170 :
	       8'd0 ;
  assign MUX_deburster_rg_w_beat_count$write_1__VAL_2 =
	     deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 ?
	       x__h11957 :
	       8'd0 ;

  // register deburster_rg_ar_beat_count
  assign deburster_rg_ar_beat_count$D_IN =
	     deburster_rg_reset ?
	       8'd0 :
	       MUX_deburster_rg_ar_beat_count$write_1__VAL_2 ;
  assign deburster_rg_ar_beat_count$EN =
	     WILL_FIRE_RL_deburster_rl_rd_xaction_master_to_slave ||
	     deburster_rg_reset ;

  // register deburster_rg_b_beat_count
  assign deburster_rg_b_beat_count$D_IN =
	     deburster_rg_reset ?
	       8'd0 :
	       MUX_deburster_rg_b_beat_count$write_1__VAL_2 ;
  assign deburster_rg_b_beat_count$EN =
	     WILL_FIRE_RL_deburster_rl_wr_resp_slave_to_master ||
	     deburster_rg_reset ;

  // register deburster_rg_b_resp
  assign deburster_rg_b_resp$D_IN =
	     deburster_rg_reset ?
	       2'b0 :
	       MUX_deburster_rg_b_resp$write_1__VAL_2 ;
  assign deburster_rg_b_resp$EN =
	     MUX_deburster_rg_b_resp$write_1__SEL_2 || deburster_rg_reset ;

  // register deburster_rg_last_beat_raddr
  assign deburster_rg_last_beat_raddr$D_IN =
	     (deburster_rg_ar_beat_count == 8'd0) ?
	       deburster_xactor_from_master_f_rd_addr$D_OUT[92:29] :
	       ((deburster_xactor_from_master_f_rd_addr$D_OUT[17:16] ==
		 2'b10) ?
		  addr___1__h12754 :
		  addr__h12742) ;
  assign deburster_rg_last_beat_raddr$EN =
	     CAN_FIRE_RL_deburster_rl_rd_xaction_master_to_slave ;

  // register deburster_rg_last_beat_waddr
  assign deburster_rg_last_beat_waddr$D_IN =
	     (deburster_rg_w_beat_count == 8'd0) ?
	       deburster_xactor_from_master_f_wr_addr$D_OUT[92:29] :
	       ((deburster_xactor_from_master_f_wr_addr$D_OUT[17:16] ==
		 2'b10) ?
		  addr___1__h11670 :
		  addr__h11658) ;
  assign deburster_rg_last_beat_waddr$EN =
	     CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave ;

  // register deburster_rg_r_beat_count
  assign deburster_rg_r_beat_count$D_IN =
	     deburster_rg_reset ?
	       8'd0 :
	       MUX_deburster_rg_r_beat_count$write_1__VAL_2 ;
  assign deburster_rg_r_beat_count$EN =
	     WILL_FIRE_RL_deburster_rl_rd_resp_slave_to_master ||
	     deburster_rg_reset ;

  // register deburster_rg_reset
  assign deburster_rg_reset$D_IN = 1'd0 ;
  assign deburster_rg_reset$EN = deburster_rg_reset ;

  // register deburster_rg_w_beat_count
  assign deburster_rg_w_beat_count$D_IN =
	     deburster_rg_reset ?
	       8'd0 :
	       MUX_deburster_rg_w_beat_count$write_1__VAL_2 ;
  assign deburster_rg_w_beat_count$EN =
	     WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave ||
	     deburster_rg_reset ;

  // register ifc_rg_display_info
  assign ifc_rg_display_info$D_IN = 1'd0 ;
  assign ifc_rg_display_info$EN = ifc_rg_display_info ;

  // submodule deburster_f_r_arlen
  assign deburster_f_r_arlen$D_IN =
	     deburster_xactor_from_master_f_rd_addr$D_OUT[28:21] ;
  assign deburster_f_r_arlen$ENQ =
	     WILL_FIRE_RL_deburster_rl_rd_xaction_master_to_slave &&
	     deburster_rg_ar_beat_count == 8'd0 ;
  assign deburster_f_r_arlen$DEQ =
	     WILL_FIRE_RL_deburster_rl_rd_resp_slave_to_master &&
	     !deburster_rg_r_beat_count_41_ULT_deburster_f_r_ETC___d443 ;
  assign deburster_f_r_arlen$CLR = deburster_rg_reset ;

  // submodule deburster_f_w_awlen
  assign deburster_f_w_awlen$D_IN =
	     deburster_xactor_from_master_f_wr_addr$D_OUT[28:21] ;
  assign deburster_f_w_awlen$ENQ =
	     WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	     deburster_rg_w_beat_count == 8'd0 ;
  assign deburster_f_w_awlen$DEQ =
	     WILL_FIRE_RL_deburster_rl_wr_resp_slave_to_master &&
	     !deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379 ;
  assign deburster_f_w_awlen$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_from_master_f_rd_addr
  assign deburster_xactor_from_master_f_rd_addr$D_IN =
	     { arid,
	       araddr,
	       arlen,
	       arsize,
	       arburst,
	       arlock,
	       arcache,
	       arprot,
	       arqos,
	       arregion } ;
  assign deburster_xactor_from_master_f_rd_addr$ENQ =
	     arvalid && deburster_xactor_from_master_f_rd_addr$FULL_N ;
  assign deburster_xactor_from_master_f_rd_addr$DEQ =
	     WILL_FIRE_RL_deburster_rl_rd_xaction_master_to_slave &&
	     !deburster_rg_ar_beat_count_01_ULT_deburster_xa_ETC___d432 ;
  assign deburster_xactor_from_master_f_rd_addr$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_from_master_f_rd_data
  assign deburster_xactor_from_master_f_rd_data$D_IN =
	     { deburster_xactor_to_slave_f_rd_data$D_OUT[530:1],
	       !deburster_rg_r_beat_count_41_ULT_deburster_f_r_ETC___d443 } ;
  assign deburster_xactor_from_master_f_rd_data$ENQ =
	     CAN_FIRE_RL_deburster_rl_rd_resp_slave_to_master ;
  assign deburster_xactor_from_master_f_rd_data$DEQ =
	     rready && deburster_xactor_from_master_f_rd_data$EMPTY_N ;
  assign deburster_xactor_from_master_f_rd_data$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_from_master_f_wr_addr
  assign deburster_xactor_from_master_f_wr_addr$D_IN =
	     { awid,
	       awaddr,
	       awlen,
	       awsize,
	       awburst,
	       awlock,
	       awcache,
	       awprot,
	       awqos,
	       awregion } ;
  assign deburster_xactor_from_master_f_wr_addr$ENQ =
	     awvalid && deburster_xactor_from_master_f_wr_addr$FULL_N ;
  assign deburster_xactor_from_master_f_wr_addr$DEQ =
	     WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	     !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 ;
  assign deburster_xactor_from_master_f_wr_addr$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_from_master_f_wr_data
  assign deburster_xactor_from_master_f_wr_data$D_IN =
	     { wdata, wstrb, wlast } ;
  assign deburster_xactor_from_master_f_wr_data$ENQ =
	     wvalid && deburster_xactor_from_master_f_wr_data$FULL_N ;
  assign deburster_xactor_from_master_f_wr_data$DEQ =
	     CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave ;
  assign deburster_xactor_from_master_f_wr_data$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_from_master_f_wr_resp
  assign deburster_xactor_from_master_f_wr_resp$D_IN =
	     { deburster_xactor_to_slave_f_wr_resp$D_OUT[17:2],
	       (deburster_rg_b_resp == 2'b0) ?
		 deburster_xactor_to_slave_f_wr_resp$D_OUT[1:0] :
		 deburster_rg_b_resp } ;
  assign deburster_xactor_from_master_f_wr_resp$ENQ =
	     WILL_FIRE_RL_deburster_rl_wr_resp_slave_to_master &&
	     !deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379 ;
  assign deburster_xactor_from_master_f_wr_resp$DEQ =
	     bready && deburster_xactor_from_master_f_wr_resp$EMPTY_N ;
  assign deburster_xactor_from_master_f_wr_resp$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_to_slave_f_rd_addr
  assign deburster_xactor_to_slave_f_rd_addr$D_IN =
	     { deburster_xactor_from_master_f_rd_addr$D_OUT[108:93],
	       a_out_araddr__h12660,
	       8'd0,
	       deburster_xactor_from_master_f_rd_addr$D_OUT[20:18],
	       2'b0,
	       deburster_xactor_from_master_f_rd_addr$D_OUT[15:0] } ;
  assign deburster_xactor_to_slave_f_rd_addr$ENQ =
	     CAN_FIRE_RL_deburster_rl_rd_xaction_master_to_slave ;
  assign deburster_xactor_to_slave_f_rd_addr$DEQ =
	     deburster_xactor_to_slave_f_rd_addr$EMPTY_N &&
	     ifc_axi4_xactor_f_rd_addr$FULL_N ;
  assign deburster_xactor_to_slave_f_rd_addr$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_to_slave_f_rd_data
  assign deburster_xactor_to_slave_f_rd_data$D_IN =
	     ifc_axi4_xactor_f_rd_data$D_OUT ;
  assign deburster_xactor_to_slave_f_rd_data$ENQ =
	     ifc_axi4_xactor_f_rd_data$EMPTY_N &&
	     deburster_xactor_to_slave_f_rd_data$FULL_N ;
  assign deburster_xactor_to_slave_f_rd_data$DEQ =
	     CAN_FIRE_RL_deburster_rl_rd_resp_slave_to_master ;
  assign deburster_xactor_to_slave_f_rd_data$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_to_slave_f_wr_addr
  assign deburster_xactor_to_slave_f_wr_addr$D_IN =
	     { deburster_xactor_from_master_f_wr_addr$D_OUT[108:93],
	       a_out_awaddr__h11576,
	       8'd0,
	       deburster_xactor_from_master_f_wr_addr$D_OUT[20:18],
	       2'b0,
	       deburster_xactor_from_master_f_wr_addr$D_OUT[15:0] } ;
  assign deburster_xactor_to_slave_f_wr_addr$ENQ =
	     CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave ;
  assign deburster_xactor_to_slave_f_wr_addr$DEQ =
	     deburster_xactor_to_slave_f_wr_addr$EMPTY_N &&
	     ifc_axi4_xactor_f_wr_addr$FULL_N ;
  assign deburster_xactor_to_slave_f_wr_addr$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_to_slave_f_wr_data
  assign deburster_xactor_to_slave_f_wr_data$D_IN =
	     { deburster_xactor_from_master_f_wr_data$D_OUT[576:1], 1'd1 } ;
  assign deburster_xactor_to_slave_f_wr_data$ENQ =
	     CAN_FIRE_RL_deburster_rl_wr_xaction_master_to_slave ;
  assign deburster_xactor_to_slave_f_wr_data$DEQ =
	     deburster_xactor_to_slave_f_wr_data$EMPTY_N &&
	     ifc_axi4_xactor_f_wr_data$FULL_N ;
  assign deburster_xactor_to_slave_f_wr_data$CLR = deburster_rg_reset ;

  // submodule deburster_xactor_to_slave_f_wr_resp
  assign deburster_xactor_to_slave_f_wr_resp$D_IN =
	     ifc_axi4_xactor_f_wr_resp$D_OUT ;
  assign deburster_xactor_to_slave_f_wr_resp$ENQ =
	     ifc_axi4_xactor_f_wr_resp$EMPTY_N &&
	     deburster_xactor_to_slave_f_wr_resp$FULL_N ;
  assign deburster_xactor_to_slave_f_wr_resp$DEQ =
	     CAN_FIRE_RL_deburster_rl_wr_resp_slave_to_master ;
  assign deburster_xactor_to_slave_f_wr_resp$CLR = deburster_rg_reset ;

  // submodule ifc_axi4_xactor_f_rd_addr
  assign ifc_axi4_xactor_f_rd_addr$D_IN =
	     deburster_xactor_to_slave_f_rd_addr$D_OUT ;
  assign ifc_axi4_xactor_f_rd_addr$ENQ =
	     deburster_xactor_to_slave_f_rd_addr$EMPTY_N &&
	     ifc_axi4_xactor_f_rd_addr$FULL_N ;
  assign ifc_axi4_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_ifc_rl_rd_req ;
  assign ifc_axi4_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule ifc_axi4_xactor_f_rd_data
  assign ifc_axi4_xactor_f_rd_data$D_IN =
	     { ifc_axi4_xactor_f_rd_addr$D_OUT[108:93],
	       x1_avValue_rdata__h1263,
	       x1_avValue_rresp__h1264,
	       1'd1 } ;
  assign ifc_axi4_xactor_f_rd_data$ENQ = CAN_FIRE_RL_ifc_rl_rd_req ;
  assign ifc_axi4_xactor_f_rd_data$DEQ =
	     deburster_xactor_to_slave_f_rd_data$FULL_N &&
	     ifc_axi4_xactor_f_rd_data$EMPTY_N ;
  assign ifc_axi4_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule ifc_axi4_xactor_f_wr_addr
  assign ifc_axi4_xactor_f_wr_addr$D_IN =
	     deburster_xactor_to_slave_f_wr_addr$D_OUT ;
  assign ifc_axi4_xactor_f_wr_addr$ENQ =
	     deburster_xactor_to_slave_f_wr_addr$EMPTY_N &&
	     ifc_axi4_xactor_f_wr_addr$FULL_N ;
  assign ifc_axi4_xactor_f_wr_addr$DEQ = CAN_FIRE_RL_ifc_rl_wr_req ;
  assign ifc_axi4_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule ifc_axi4_xactor_f_wr_data
  assign ifc_axi4_xactor_f_wr_data$D_IN =
	     deburster_xactor_to_slave_f_wr_data$D_OUT ;
  assign ifc_axi4_xactor_f_wr_data$ENQ =
	     deburster_xactor_to_slave_f_wr_data$EMPTY_N &&
	     ifc_axi4_xactor_f_wr_data$FULL_N ;
  assign ifc_axi4_xactor_f_wr_data$DEQ = CAN_FIRE_RL_ifc_rl_wr_req ;
  assign ifc_axi4_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule ifc_axi4_xactor_f_wr_resp
  assign ifc_axi4_xactor_f_wr_resp$D_IN =
	     { ifc_axi4_xactor_f_wr_addr$D_OUT[108:93],
	       (ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 ||
		!ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 ||
		!ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50) ?
		 2'b10 :
		 2'b0 } ;
  assign ifc_axi4_xactor_f_wr_resp$ENQ = CAN_FIRE_RL_ifc_rl_wr_req ;
  assign ifc_axi4_xactor_f_wr_resp$DEQ =
	     deburster_xactor_to_slave_f_wr_resp$FULL_N &&
	     ifc_axi4_xactor_f_wr_resp$EMPTY_N ;
  assign ifc_axi4_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule ifc_rf
  assign ifc_rf$ADDR_1 =
	     { 6'd0,
	       ifc_axi4_xactor_f_wr_addrD_OUT_BITS_92_TO_29__ETC__q1[63:6] } ;
  assign ifc_rf$ADDR_2 =
	     { 6'd0,
	       ifc_axi4_xactor_f_rd_addrD_OUT_BITS_92_TO_29__ETC__q2[63:6] } ;
  assign ifc_rf$ADDR_3 = 64'h0 ;
  assign ifc_rf$ADDR_4 = 64'h0 ;
  assign ifc_rf$ADDR_5 = 64'h0 ;
  assign ifc_rf$ADDR_IN =
	     { 6'd0,
	       ifc_axi4_xactor_f_wr_addrD_OUT_BITS_92_TO_29__ETC__q1[63:6] } ;
  assign ifc_rf$D_IN = x__h1820 | y__h1821 ;
  assign ifc_rf$WE =
	     WILL_FIRE_RL_ifc_rl_wr_req &&
	     !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 &&
	     ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 &&
	     ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50 ;

  // remaining internal signals
  assign a_out_araddr__h12660 = deburster_rg_last_beat_raddr$D_IN ;
  assign a_out_awaddr__h11576 = deburster_rg_last_beat_waddr$D_IN ;
  assign addr___1__h11670 = x__h11682 | y__h11683 ;
  assign addr___1__h12754 = x__h12766 | y__h12767 ;
  assign addr__h11658 =
	     deburster_rg_last_beat_waddr +
	     (64'd1 << deburster_xactor_from_master_f_wr_addr$D_OUT[20:18]) ;
  assign addr__h12742 =
	     deburster_rg_last_beat_raddr +
	     (64'd1 << deburster_xactor_from_master_f_rd_addr$D_OUT[20:18]) ;
  assign burst_len__h11659 =
	     { 56'd0, deburster_xactor_from_master_f_wr_addr$D_OUT[28:21] } +
	     64'd1 ;
  assign burst_len__h12743 =
	     { 56'd0, deburster_xactor_from_master_f_rd_addr$D_OUT[28:21] } +
	     64'd1 ;
  assign deburster_rg_ar_beat_count_01_ULT_deburster_xa_ETC___d432 =
	     deburster_rg_ar_beat_count <
	     deburster_xactor_from_master_f_rd_addr$D_OUT[28:21] ;
  assign deburster_rg_b_beat_count_77_ULT_deburster_f_w_ETC___d379 =
	     deburster_rg_b_beat_count < deburster_f_w_awlen$D_OUT ;
  assign deburster_rg_r_beat_count_41_ULT_deburster_f_r_ETC___d443 =
	     deburster_rg_r_beat_count < deburster_f_r_arlen$D_OUT ;
  assign deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 =
	     deburster_rg_w_beat_count <
	     deburster_xactor_from_master_f_wr_addr$D_OUT[28:21] ;
  assign ifc_axi4_xactor_f_rd_addrD_OUT_BITS_92_TO_29__ETC__q2 =
	     ifc_axi4_xactor_f_rd_addr$D_OUT[92:29] - 64'h0000000C00000000 ;
  assign ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15 =
	     ifc_axi4_xactor_f_rd_addr$D_OUT[92:29] < 64'h0000000D00000000 ;
  assign ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 =
	     ifc_axi4_xactor_f_rd_addr$D_OUT[92:29] < 64'h0000000C00000000 ;
  assign ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8 =
	     ifc_axi4_xactor_f_rd_addr$D_OUT[92:29] < 64'h0000001000000000 ;
  assign ifc_axi4_xactor_f_wr_addrD_OUT_BITS_92_TO_29__ETC__q1 =
	     ifc_axi4_xactor_f_wr_addr$D_OUT[92:29] - 64'h0000000C00000000 ;
  assign ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 =
	     ifc_axi4_xactor_f_wr_addr$D_OUT[92:29] < 64'h0000000C00000000 ;
  assign ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 =
	     ifc_axi4_xactor_f_wr_addr$D_OUT[92:29] < 64'h0000001000000000 ;
  assign ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50 =
	     ifc_axi4_xactor_f_wr_addr$D_OUT[92:29] < 64'h0000000D00000000 ;
  assign mask__h1809 =
	     { ifc_axi4_xactor_f_wr_data$D_OUT[64] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[63] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[62] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[61] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[60] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[59] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[58] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[57] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[56] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[55] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[54] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[53] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[52] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[51] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[50] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[49] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[48] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[47] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[46] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[45] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[44] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[43] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[42] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[41] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[40] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[39] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[38] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[37] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[36] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[35] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[34] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[33] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[32] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[31] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[30] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[29] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[28] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[27] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[26] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[25] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[24] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[23] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[22] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[21] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[20] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[19] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[18] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[17] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[16] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[15] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[14] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[13] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[12] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[11] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[10] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[9] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[8] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[7] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[6] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[5] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[4] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[3] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[2] ? 8'hFF : 8'h0,
	       ifc_axi4_xactor_f_wr_data$D_OUT[1] ? 8'hFF : 8'h0 } ;
  assign wrap_mask__h11660 =
	     (burst_len__h11659 <<
	      deburster_xactor_from_master_f_wr_addr$D_OUT[20:18]) -
	     64'd1 ;
  assign wrap_mask__h12744 =
	     (burst_len__h12743 <<
	      deburster_xactor_from_master_f_rd_addr$D_OUT[20:18]) -
	     64'd1 ;
  assign x1_avValue_rdata__h1245 =
	     ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15 ?
	       ifc_rf$D_OUT_2 :
	       y_avValue_rdata__h1257 ;
  assign x1_avValue_rdata__h1263 =
	     (ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 ||
	      !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8) ?
	       y_avValue_rdata__h1257 :
	       x1_avValue_rdata__h1245 ;
  assign x1_avValue_rresp__h1264 =
	     (ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 ||
	      !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8 ||
	      !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15) ?
	       2'b10 :
	       2'b0 ;
  assign x__h11682 = deburster_rg_last_beat_waddr & y__h11684 ;
  assign x__h11957 = deburster_rg_w_beat_count + 8'd1 ;
  assign x__h12464 = deburster_rg_b_beat_count + 8'd1 ;
  assign x__h12766 = deburster_rg_last_beat_raddr & y__h12768 ;
  assign x__h12951 = deburster_rg_ar_beat_count + 8'd1 ;
  assign x__h13170 = deburster_rg_r_beat_count + 8'd1 ;
  assign x__h1820 = ifc_rf$D_OUT_1 & y__h1822 ;
  assign y__h11683 = addr__h11658 & wrap_mask__h11660 ;
  assign y__h11684 = ~wrap_mask__h11660 ;
  assign y__h12767 = addr__h12742 & wrap_mask__h12744 ;
  assign y__h12768 = ~wrap_mask__h12744 ;
  assign y__h1821 = ifc_axi4_xactor_f_wr_data$D_OUT[576:65] & mask__h1809 ;
  assign y__h1822 =
	     { ifc_axi4_xactor_f_wr_data$D_OUT[64] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[63] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[62] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[61] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[60] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[59] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[58] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[57] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[56] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[55] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[54] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[53] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[52] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[51] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[50] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[49] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[48] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[47] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[46] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[45] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[44] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[43] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[42] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[41] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[40] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[39] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[38] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[37] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[36] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[35] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[34] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[33] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[32] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[31] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[30] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[29] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[28] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[27] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[26] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[25] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[24] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[23] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[22] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[21] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[20] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[19] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[18] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[17] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[16] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[15] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[14] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[13] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[12] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[11] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[10] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[9] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[8] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[7] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[6] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[5] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[4] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[3] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[2] ? 8'd0 : 8'd255,
	       ifc_axi4_xactor_f_wr_data$D_OUT[1] ? 8'd0 : 8'd255 } ;
  assign y_avValue_rdata__h1257 =
	     { 448'd0, ifc_axi4_xactor_f_rd_addr$D_OUT[92:29] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        deburster_rg_ar_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburster_rg_b_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburster_rg_b_resp <= `BSV_ASSIGNMENT_DELAY 2'b0;
	deburster_rg_r_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	deburster_rg_reset <= `BSV_ASSIGNMENT_DELAY 1'd1;
	deburster_rg_w_beat_count <= `BSV_ASSIGNMENT_DELAY 8'd0;
	ifc_rg_display_info <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (deburster_rg_ar_beat_count$EN)
	  deburster_rg_ar_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburster_rg_ar_beat_count$D_IN;
	if (deburster_rg_b_beat_count$EN)
	  deburster_rg_b_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburster_rg_b_beat_count$D_IN;
	if (deburster_rg_b_resp$EN)
	  deburster_rg_b_resp <= `BSV_ASSIGNMENT_DELAY
	      deburster_rg_b_resp$D_IN;
	if (deburster_rg_r_beat_count$EN)
	  deburster_rg_r_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburster_rg_r_beat_count$D_IN;
	if (deburster_rg_reset$EN)
	  deburster_rg_reset <= `BSV_ASSIGNMENT_DELAY deburster_rg_reset$D_IN;
	if (deburster_rg_w_beat_count$EN)
	  deburster_rg_w_beat_count <= `BSV_ASSIGNMENT_DELAY
	      deburster_rg_w_beat_count$D_IN;
	if (ifc_rg_display_info$EN)
	  ifc_rg_display_info <= `BSV_ASSIGNMENT_DELAY
	      ifc_rg_display_info$D_IN;
      end
    if (deburster_rg_last_beat_raddr$EN)
      deburster_rg_last_beat_raddr <= `BSV_ASSIGNMENT_DELAY
	  deburster_rg_last_beat_raddr$D_IN;
    if (deburster_rg_last_beat_waddr$EN)
      deburster_rg_last_beat_waddr <= `BSV_ASSIGNMENT_DELAY
	  deburster_rg_last_beat_waddr$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    deburster_rg_ar_beat_count = 8'hAA;
    deburster_rg_b_beat_count = 8'hAA;
    deburster_rg_b_resp = 2'h2;
    deburster_rg_last_beat_raddr = 64'hAAAAAAAAAAAAAAAA;
    deburster_rg_last_beat_waddr = 64'hAAAAAAAAAAAAAAAA;
    deburster_rg_r_beat_count = 8'hAA;
    deburster_rg_reset = 1'h0;
    deburster_rg_w_beat_count = 8'hAA;
    ifc_rg_display_info = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_rg_display_info) $display("INFO: %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (ifc_rg_display_info)
	$display("    base 0x%16h  lim 0x%16h    implemented 0x%16h",
		 64'h0000000C00000000,
		 64'h0000001000000000,
		 64'h0000000100000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_rd_req &&
	  (ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 ||
	   !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8))
	begin
	  v__h1012 = $stime;
	  #0;
	end
    v__h1006 = v__h1012 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_rd_req &&
	  (ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 ||
	   !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8))
	$display("%0d: Mem_Model [%0d]: rl_rd_req: addr %0h -> OUT OF BOUNDS",
		 v__h1006,
		 2'd3,
		 ifc_axi4_xactor_f_rd_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_rd_req &&
	  (ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 ||
	   !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8))
	$display("    base %016h  lim %016h",
		 64'h0000000C00000000,
		 64'h0000001000000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_rd_req &&
	  !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 &&
	  ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8 &&
	  !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15)
	begin
	  v__h1127 = $stime;
	  #0;
	end
    v__h1121 = v__h1127 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_rd_req &&
	  !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 &&
	  ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8 &&
	  !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15)
	$display("%0d: Mem_Model [%0d]: rl_rd_req: addr %0h -> OUT OF IMPLEMENTED BOUNDS",
		 v__h1121,
		 2'd3,
		 ifc_axi4_xactor_f_rd_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_rd_req &&
	  !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d7 &&
	  ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d8 &&
	  !ifc_axi4_xactor_f_rd_addr_first_BITS_92_TO_29__ETC___d15)
	$display("    base %016h  implementation lim %016h",
		 64'h0000000C00000000,
		 64'h0000000D00000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  (ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 ||
	   !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40))
	begin
	  v__h1505 = $stime;
	  #0;
	end
    v__h1499 = v__h1505 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  (ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 ||
	   !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40))
	$display("%0d: Mem_Model [%0d]: rl_wr_req: OUT OF BOUNDS",
		 v__h1499,
		 2'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  (ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 ||
	   !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40))
	$display("    addr %0h <= %0h strb %0h",
		 ifc_axi4_xactor_f_wr_addr$D_OUT[92:29],
		 ifc_axi4_xactor_f_wr_data$D_OUT[576:65],
		 ifc_axi4_xactor_f_wr_data$D_OUT[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  (ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 ||
	   !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40))
	$display("    base %016h  lim %016h",
		 64'h0000000C00000000,
		 64'h0000001000000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 &&
	  ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50)
	begin
	  v__h1657 = $stime;
	  #0;
	end
    v__h1651 = v__h1657 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 &&
	  ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50)
	$display("%0d: Mem_Model [%0d]: rl_wr_req: OUT OF IMPLEMENTED BOUNDS",
		 v__h1651,
		 2'd3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 &&
	  ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50)
	$display("    addr %0h <= %0h strb %0h",
		 ifc_axi4_xactor_f_wr_addr$D_OUT[92:29],
		 ifc_axi4_xactor_f_wr_data$D_OUT[576:65],
		 ifc_axi4_xactor_f_wr_data$D_OUT[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_ifc_rl_wr_req &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d39 &&
	  ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d40 &&
	  !ifc_axi4_xactor_f_wr_addr_first__7_BITS_92_TO__ETC___d50)
	$display("    base %016h  implementation lim %016h",
		 64'h0000000C00000000,
		 64'h0000000D00000000);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	begin
	  v__h12099 = $stime;
	  #0;
	end
    v__h12093 = v__h12099 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$display("%0d: ERROR: %m::AXI4_Deburster.rl_wr_xaction_master_to_slave: m -> s",
		 v__h12093);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$display("    WLAST not set on last data beat (awlen = %0d)",
		 deburster_xactor_from_master_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("AXI4_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", deburster_xactor_from_master_f_wr_data$D_OUT[576:65]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", deburster_xactor_from_master_f_wr_data$D_OUT[64:1]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wlast: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write(", ", "wuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_deburster_rl_wr_xaction_master_to_slave &&
	  !deburster_rg_w_beat_count_28_ULT_deburster_xac_ETC___d364 &&
	  !deburster_xactor_from_master_f_wr_data$D_OUT[0])
	$write("\n");
  end
  // synopsys translate_on
endmodule  // mkDDR_D_Model

