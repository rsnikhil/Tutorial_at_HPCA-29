//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// axi4L_S_awready                O     1 reg
// axi4L_S_wready                 O     1 reg
// axi4L_S_bvalid                 O     1 reg
// axi4L_S_bresp                  O     2 reg
// axi4L_S_arready                O     1 reg
// axi4L_S_rvalid                 O     1 reg
// axi4L_S_rresp                  O     2 reg
// axi4L_S_rdata                  O    32 reg
// v_from_host_0_first            O    32 reg
// RDY_v_from_host_0_first        O     1 reg
// RDY_v_from_host_0_deq          O     1 reg
// v_from_host_0_notEmpty         O     1 reg
// RDY_v_from_host_0_notEmpty     O     1 const
// v_from_host_1_first            O    32 reg
// RDY_v_from_host_1_first        O     1 reg
// RDY_v_from_host_1_deq          O     1 reg
// v_from_host_1_notEmpty         O     1 reg
// RDY_v_from_host_1_notEmpty     O     1 const
// v_from_host_2_first            O    32 reg
// RDY_v_from_host_2_first        O     1 reg
// RDY_v_from_host_2_deq          O     1 reg
// v_from_host_2_notEmpty         O     1 reg
// RDY_v_from_host_2_notEmpty     O     1 const
// v_from_host_3_first            O    32 reg
// RDY_v_from_host_3_first        O     1 reg
// RDY_v_from_host_3_deq          O     1 reg
// v_from_host_3_notEmpty         O     1 reg
// RDY_v_from_host_3_notEmpty     O     1 const
// v_from_host_4_first            O    32 reg
// RDY_v_from_host_4_first        O     1 reg
// RDY_v_from_host_4_deq          O     1 reg
// v_from_host_4_notEmpty         O     1 reg
// RDY_v_from_host_4_notEmpty     O     1 const
// RDY_v_to_host_0_enq            O     1 reg
// v_to_host_0_notFull            O     1 reg
// RDY_v_to_host_0_notFull        O     1 const
// RDY_v_to_host_1_enq            O     1 reg
// v_to_host_1_notFull            O     1 reg
// RDY_v_to_host_1_notFull        O     1 const
// RDY_v_to_host_2_enq            O     1 reg
// v_to_host_2_notFull            O     1 reg
// RDY_v_to_host_2_notFull        O     1 const
// RDY_v_to_host_3_enq            O     1 reg
// v_to_host_3_notFull            O     1 reg
// RDY_v_to_host_3_notFull        O     1 const
// RDY_v_to_host_4_enq            O     1 reg
// v_to_host_4_notFull            O     1 reg
// RDY_v_to_host_4_notFull        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// axi4L_S_awvalid                I     1
// axi4L_S_awaddr                 I    32 reg
// axi4L_S_awprot                 I     3 reg
// axi4L_S_wvalid                 I     1
// axi4L_S_wdata                  I    32 reg
// axi4L_S_wstrb                  I     4 reg
// axi4L_S_bready                 I     1
// axi4L_S_arvalid                I     1
// axi4L_S_araddr                 I    32 reg
// axi4L_S_arprot                 I     3 reg
// axi4L_S_rready                 I     1
// v_to_host_0_enq_x              I    32 reg
// v_to_host_1_enq_x              I    32 reg
// v_to_host_2_enq_x              I    32 reg
// v_to_host_3_enq_x              I    32 reg
// v_to_host_4_enq_x              I    32 reg
// EN_v_from_host_0_deq           I     1
// EN_v_from_host_1_deq           I     1
// EN_v_from_host_2_deq           I     1
// EN_v_from_host_3_deq           I     1
// EN_v_from_host_4_deq           I     1
// EN_v_to_host_0_enq             I     1
// EN_v_to_host_1_enq             I     1
// EN_v_to_host_2_enq             I     1
// EN_v_to_host_3_enq             I     1
// EN_v_to_host_4_enq             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAXI4L_Channels(CLK,
			RST_N,

			axi4L_S_awvalid,
			axi4L_S_awaddr,
			axi4L_S_awprot,

			axi4L_S_awready,

			axi4L_S_wvalid,
			axi4L_S_wdata,
			axi4L_S_wstrb,

			axi4L_S_wready,

			axi4L_S_bvalid,

			axi4L_S_bresp,

			axi4L_S_bready,

			axi4L_S_arvalid,
			axi4L_S_araddr,
			axi4L_S_arprot,

			axi4L_S_arready,

			axi4L_S_rvalid,

			axi4L_S_rresp,

			axi4L_S_rdata,

			axi4L_S_rready,

			v_from_host_0_first,
			RDY_v_from_host_0_first,

			EN_v_from_host_0_deq,
			RDY_v_from_host_0_deq,

			v_from_host_0_notEmpty,
			RDY_v_from_host_0_notEmpty,

			v_from_host_1_first,
			RDY_v_from_host_1_first,

			EN_v_from_host_1_deq,
			RDY_v_from_host_1_deq,

			v_from_host_1_notEmpty,
			RDY_v_from_host_1_notEmpty,

			v_from_host_2_first,
			RDY_v_from_host_2_first,

			EN_v_from_host_2_deq,
			RDY_v_from_host_2_deq,

			v_from_host_2_notEmpty,
			RDY_v_from_host_2_notEmpty,

			v_from_host_3_first,
			RDY_v_from_host_3_first,

			EN_v_from_host_3_deq,
			RDY_v_from_host_3_deq,

			v_from_host_3_notEmpty,
			RDY_v_from_host_3_notEmpty,

			v_from_host_4_first,
			RDY_v_from_host_4_first,

			EN_v_from_host_4_deq,
			RDY_v_from_host_4_deq,

			v_from_host_4_notEmpty,
			RDY_v_from_host_4_notEmpty,

			v_to_host_0_enq_x,
			EN_v_to_host_0_enq,
			RDY_v_to_host_0_enq,

			v_to_host_0_notFull,
			RDY_v_to_host_0_notFull,

			v_to_host_1_enq_x,
			EN_v_to_host_1_enq,
			RDY_v_to_host_1_enq,

			v_to_host_1_notFull,
			RDY_v_to_host_1_notFull,

			v_to_host_2_enq_x,
			EN_v_to_host_2_enq,
			RDY_v_to_host_2_enq,

			v_to_host_2_notFull,
			RDY_v_to_host_2_notFull,

			v_to_host_3_enq_x,
			EN_v_to_host_3_enq,
			RDY_v_to_host_3_enq,

			v_to_host_3_notFull,
			RDY_v_to_host_3_notFull,

			v_to_host_4_enq_x,
			EN_v_to_host_4_enq,
			RDY_v_to_host_4_enq,

			v_to_host_4_notFull,
			RDY_v_to_host_4_notFull);
  input  CLK;
  input  RST_N;

  // action method axi4L_S_m_awvalid
  input  axi4L_S_awvalid;
  input  [31 : 0] axi4L_S_awaddr;
  input  [2 : 0] axi4L_S_awprot;

  // value method axi4L_S_m_awready
  output axi4L_S_awready;

  // action method axi4L_S_m_wvalid
  input  axi4L_S_wvalid;
  input  [31 : 0] axi4L_S_wdata;
  input  [3 : 0] axi4L_S_wstrb;

  // value method axi4L_S_m_wready
  output axi4L_S_wready;

  // value method axi4L_S_m_bvalid
  output axi4L_S_bvalid;

  // value method axi4L_S_m_bresp
  output [1 : 0] axi4L_S_bresp;

  // value method axi4L_S_m_buser

  // action method axi4L_S_m_bready
  input  axi4L_S_bready;

  // action method axi4L_S_m_arvalid
  input  axi4L_S_arvalid;
  input  [31 : 0] axi4L_S_araddr;
  input  [2 : 0] axi4L_S_arprot;

  // value method axi4L_S_m_arready
  output axi4L_S_arready;

  // value method axi4L_S_m_rvalid
  output axi4L_S_rvalid;

  // value method axi4L_S_m_rresp
  output [1 : 0] axi4L_S_rresp;

  // value method axi4L_S_m_rdata
  output [31 : 0] axi4L_S_rdata;

  // value method axi4L_S_m_ruser

  // action method axi4L_S_m_rready
  input  axi4L_S_rready;

  // value method v_from_host_0_first
  output [31 : 0] v_from_host_0_first;
  output RDY_v_from_host_0_first;

  // action method v_from_host_0_deq
  input  EN_v_from_host_0_deq;
  output RDY_v_from_host_0_deq;

  // value method v_from_host_0_notEmpty
  output v_from_host_0_notEmpty;
  output RDY_v_from_host_0_notEmpty;

  // value method v_from_host_1_first
  output [31 : 0] v_from_host_1_first;
  output RDY_v_from_host_1_first;

  // action method v_from_host_1_deq
  input  EN_v_from_host_1_deq;
  output RDY_v_from_host_1_deq;

  // value method v_from_host_1_notEmpty
  output v_from_host_1_notEmpty;
  output RDY_v_from_host_1_notEmpty;

  // value method v_from_host_2_first
  output [31 : 0] v_from_host_2_first;
  output RDY_v_from_host_2_first;

  // action method v_from_host_2_deq
  input  EN_v_from_host_2_deq;
  output RDY_v_from_host_2_deq;

  // value method v_from_host_2_notEmpty
  output v_from_host_2_notEmpty;
  output RDY_v_from_host_2_notEmpty;

  // value method v_from_host_3_first
  output [31 : 0] v_from_host_3_first;
  output RDY_v_from_host_3_first;

  // action method v_from_host_3_deq
  input  EN_v_from_host_3_deq;
  output RDY_v_from_host_3_deq;

  // value method v_from_host_3_notEmpty
  output v_from_host_3_notEmpty;
  output RDY_v_from_host_3_notEmpty;

  // value method v_from_host_4_first
  output [31 : 0] v_from_host_4_first;
  output RDY_v_from_host_4_first;

  // action method v_from_host_4_deq
  input  EN_v_from_host_4_deq;
  output RDY_v_from_host_4_deq;

  // value method v_from_host_4_notEmpty
  output v_from_host_4_notEmpty;
  output RDY_v_from_host_4_notEmpty;

  // action method v_to_host_0_enq
  input  [31 : 0] v_to_host_0_enq_x;
  input  EN_v_to_host_0_enq;
  output RDY_v_to_host_0_enq;

  // value method v_to_host_0_notFull
  output v_to_host_0_notFull;
  output RDY_v_to_host_0_notFull;

  // action method v_to_host_1_enq
  input  [31 : 0] v_to_host_1_enq_x;
  input  EN_v_to_host_1_enq;
  output RDY_v_to_host_1_enq;

  // value method v_to_host_1_notFull
  output v_to_host_1_notFull;
  output RDY_v_to_host_1_notFull;

  // action method v_to_host_2_enq
  input  [31 : 0] v_to_host_2_enq_x;
  input  EN_v_to_host_2_enq;
  output RDY_v_to_host_2_enq;

  // value method v_to_host_2_notFull
  output v_to_host_2_notFull;
  output RDY_v_to_host_2_notFull;

  // action method v_to_host_3_enq
  input  [31 : 0] v_to_host_3_enq_x;
  input  EN_v_to_host_3_enq;
  output RDY_v_to_host_3_enq;

  // value method v_to_host_3_notFull
  output v_to_host_3_notFull;
  output RDY_v_to_host_3_notFull;

  // action method v_to_host_4_enq
  input  [31 : 0] v_to_host_4_enq_x;
  input  EN_v_to_host_4_enq;
  output RDY_v_to_host_4_enq;

  // value method v_to_host_4_notFull
  output v_to_host_4_notFull;
  output RDY_v_to_host_4_notFull;

  // signals for module outputs
  wire [31 : 0] axi4L_S_rdata,
		v_from_host_0_first,
		v_from_host_1_first,
		v_from_host_2_first,
		v_from_host_3_first,
		v_from_host_4_first;
  wire [1 : 0] axi4L_S_bresp, axi4L_S_rresp;
  wire RDY_v_from_host_0_deq,
       RDY_v_from_host_0_first,
       RDY_v_from_host_0_notEmpty,
       RDY_v_from_host_1_deq,
       RDY_v_from_host_1_first,
       RDY_v_from_host_1_notEmpty,
       RDY_v_from_host_2_deq,
       RDY_v_from_host_2_first,
       RDY_v_from_host_2_notEmpty,
       RDY_v_from_host_3_deq,
       RDY_v_from_host_3_first,
       RDY_v_from_host_3_notEmpty,
       RDY_v_from_host_4_deq,
       RDY_v_from_host_4_first,
       RDY_v_from_host_4_notEmpty,
       RDY_v_to_host_0_enq,
       RDY_v_to_host_0_notFull,
       RDY_v_to_host_1_enq,
       RDY_v_to_host_1_notFull,
       RDY_v_to_host_2_enq,
       RDY_v_to_host_2_notFull,
       RDY_v_to_host_3_enq,
       RDY_v_to_host_3_notFull,
       RDY_v_to_host_4_enq,
       RDY_v_to_host_4_notFull,
       axi4L_S_arready,
       axi4L_S_awready,
       axi4L_S_bvalid,
       axi4L_S_rvalid,
       axi4L_S_wready,
       v_from_host_0_notEmpty,
       v_from_host_1_notEmpty,
       v_from_host_2_notEmpty,
       v_from_host_3_notEmpty,
       v_from_host_4_notEmpty,
       v_to_host_0_notFull,
       v_to_host_1_notFull,
       v_to_host_2_notFull,
       v_to_host_3_notFull,
       v_to_host_4_notFull;

  // register v_f_from_host_0_countReg
  reg [4 : 0] v_f_from_host_0_countReg;
  wire [4 : 0] v_f_from_host_0_countReg$D_IN;
  wire v_f_from_host_0_countReg$EN;

  // register v_f_from_host_0_levelsValid
  reg v_f_from_host_0_levelsValid;
  wire v_f_from_host_0_levelsValid$D_IN, v_f_from_host_0_levelsValid$EN;

  // register v_f_from_host_1_countReg
  reg [4 : 0] v_f_from_host_1_countReg;
  wire [4 : 0] v_f_from_host_1_countReg$D_IN;
  wire v_f_from_host_1_countReg$EN;

  // register v_f_from_host_1_levelsValid
  reg v_f_from_host_1_levelsValid;
  wire v_f_from_host_1_levelsValid$D_IN, v_f_from_host_1_levelsValid$EN;

  // register v_f_from_host_2_countReg
  reg [4 : 0] v_f_from_host_2_countReg;
  wire [4 : 0] v_f_from_host_2_countReg$D_IN;
  wire v_f_from_host_2_countReg$EN;

  // register v_f_from_host_2_levelsValid
  reg v_f_from_host_2_levelsValid;
  wire v_f_from_host_2_levelsValid$D_IN, v_f_from_host_2_levelsValid$EN;

  // register v_f_from_host_3_countReg
  reg [4 : 0] v_f_from_host_3_countReg;
  wire [4 : 0] v_f_from_host_3_countReg$D_IN;
  wire v_f_from_host_3_countReg$EN;

  // register v_f_from_host_3_levelsValid
  reg v_f_from_host_3_levelsValid;
  wire v_f_from_host_3_levelsValid$D_IN, v_f_from_host_3_levelsValid$EN;

  // register v_f_from_host_4_countReg
  reg [4 : 0] v_f_from_host_4_countReg;
  wire [4 : 0] v_f_from_host_4_countReg$D_IN;
  wire v_f_from_host_4_countReg$EN;

  // register v_f_from_host_4_levelsValid
  reg v_f_from_host_4_levelsValid;
  wire v_f_from_host_4_levelsValid$D_IN, v_f_from_host_4_levelsValid$EN;

  // register v_f_to_host_0_countReg
  reg [4 : 0] v_f_to_host_0_countReg;
  wire [4 : 0] v_f_to_host_0_countReg$D_IN;
  wire v_f_to_host_0_countReg$EN;

  // register v_f_to_host_0_levelsValid
  reg v_f_to_host_0_levelsValid;
  wire v_f_to_host_0_levelsValid$D_IN, v_f_to_host_0_levelsValid$EN;

  // register v_f_to_host_1_countReg
  reg [4 : 0] v_f_to_host_1_countReg;
  wire [4 : 0] v_f_to_host_1_countReg$D_IN;
  wire v_f_to_host_1_countReg$EN;

  // register v_f_to_host_1_levelsValid
  reg v_f_to_host_1_levelsValid;
  wire v_f_to_host_1_levelsValid$D_IN, v_f_to_host_1_levelsValid$EN;

  // register v_f_to_host_2_countReg
  reg [4 : 0] v_f_to_host_2_countReg;
  wire [4 : 0] v_f_to_host_2_countReg$D_IN;
  wire v_f_to_host_2_countReg$EN;

  // register v_f_to_host_2_levelsValid
  reg v_f_to_host_2_levelsValid;
  wire v_f_to_host_2_levelsValid$D_IN, v_f_to_host_2_levelsValid$EN;

  // register v_f_to_host_3_countReg
  reg [4 : 0] v_f_to_host_3_countReg;
  wire [4 : 0] v_f_to_host_3_countReg$D_IN;
  wire v_f_to_host_3_countReg$EN;

  // register v_f_to_host_3_levelsValid
  reg v_f_to_host_3_levelsValid;
  wire v_f_to_host_3_levelsValid$D_IN, v_f_to_host_3_levelsValid$EN;

  // register v_f_to_host_4_countReg
  reg [4 : 0] v_f_to_host_4_countReg;
  wire [4 : 0] v_f_to_host_4_countReg$D_IN;
  wire v_f_to_host_4_countReg$EN;

  // register v_f_to_host_4_levelsValid
  reg v_f_to_host_4_levelsValid;
  wire v_f_to_host_4_levelsValid$D_IN, v_f_to_host_4_levelsValid$EN;

  // ports of submodule axi4L_S_xactor_f_rd_addr
  wire [34 : 0] axi4L_S_xactor_f_rd_addr$D_IN, axi4L_S_xactor_f_rd_addr$D_OUT;
  wire axi4L_S_xactor_f_rd_addr$CLR,
       axi4L_S_xactor_f_rd_addr$DEQ,
       axi4L_S_xactor_f_rd_addr$EMPTY_N,
       axi4L_S_xactor_f_rd_addr$ENQ,
       axi4L_S_xactor_f_rd_addr$FULL_N;

  // ports of submodule axi4L_S_xactor_f_rd_data
  wire [33 : 0] axi4L_S_xactor_f_rd_data$D_IN, axi4L_S_xactor_f_rd_data$D_OUT;
  wire axi4L_S_xactor_f_rd_data$CLR,
       axi4L_S_xactor_f_rd_data$DEQ,
       axi4L_S_xactor_f_rd_data$EMPTY_N,
       axi4L_S_xactor_f_rd_data$ENQ,
       axi4L_S_xactor_f_rd_data$FULL_N;

  // ports of submodule axi4L_S_xactor_f_wr_addr
  wire [34 : 0] axi4L_S_xactor_f_wr_addr$D_IN, axi4L_S_xactor_f_wr_addr$D_OUT;
  wire axi4L_S_xactor_f_wr_addr$CLR,
       axi4L_S_xactor_f_wr_addr$DEQ,
       axi4L_S_xactor_f_wr_addr$EMPTY_N,
       axi4L_S_xactor_f_wr_addr$ENQ,
       axi4L_S_xactor_f_wr_addr$FULL_N;

  // ports of submodule axi4L_S_xactor_f_wr_data
  wire [35 : 0] axi4L_S_xactor_f_wr_data$D_IN, axi4L_S_xactor_f_wr_data$D_OUT;
  wire axi4L_S_xactor_f_wr_data$CLR,
       axi4L_S_xactor_f_wr_data$DEQ,
       axi4L_S_xactor_f_wr_data$EMPTY_N,
       axi4L_S_xactor_f_wr_data$ENQ,
       axi4L_S_xactor_f_wr_data$FULL_N;

  // ports of submodule axi4L_S_xactor_f_wr_resp
  wire [1 : 0] axi4L_S_xactor_f_wr_resp$D_IN, axi4L_S_xactor_f_wr_resp$D_OUT;
  wire axi4L_S_xactor_f_wr_resp$CLR,
       axi4L_S_xactor_f_wr_resp$DEQ,
       axi4L_S_xactor_f_wr_resp$EMPTY_N,
       axi4L_S_xactor_f_wr_resp$ENQ,
       axi4L_S_xactor_f_wr_resp$FULL_N;

  // ports of submodule v_f_from_host_0
  wire [31 : 0] v_f_from_host_0$D_IN, v_f_from_host_0$D_OUT;
  wire v_f_from_host_0$CLR,
       v_f_from_host_0$DEQ,
       v_f_from_host_0$EMPTY_N,
       v_f_from_host_0$ENQ,
       v_f_from_host_0$FULL_N;

  // ports of submodule v_f_from_host_1
  wire [31 : 0] v_f_from_host_1$D_IN, v_f_from_host_1$D_OUT;
  wire v_f_from_host_1$CLR,
       v_f_from_host_1$DEQ,
       v_f_from_host_1$EMPTY_N,
       v_f_from_host_1$ENQ,
       v_f_from_host_1$FULL_N;

  // ports of submodule v_f_from_host_2
  wire [31 : 0] v_f_from_host_2$D_IN, v_f_from_host_2$D_OUT;
  wire v_f_from_host_2$CLR,
       v_f_from_host_2$DEQ,
       v_f_from_host_2$EMPTY_N,
       v_f_from_host_2$ENQ,
       v_f_from_host_2$FULL_N;

  // ports of submodule v_f_from_host_3
  wire [31 : 0] v_f_from_host_3$D_IN, v_f_from_host_3$D_OUT;
  wire v_f_from_host_3$CLR,
       v_f_from_host_3$DEQ,
       v_f_from_host_3$EMPTY_N,
       v_f_from_host_3$ENQ,
       v_f_from_host_3$FULL_N;

  // ports of submodule v_f_from_host_4
  wire [31 : 0] v_f_from_host_4$D_IN, v_f_from_host_4$D_OUT;
  wire v_f_from_host_4$CLR,
       v_f_from_host_4$DEQ,
       v_f_from_host_4$EMPTY_N,
       v_f_from_host_4$ENQ,
       v_f_from_host_4$FULL_N;

  // ports of submodule v_f_to_host_0
  wire [31 : 0] v_f_to_host_0$D_IN, v_f_to_host_0$D_OUT;
  wire v_f_to_host_0$CLR,
       v_f_to_host_0$DEQ,
       v_f_to_host_0$EMPTY_N,
       v_f_to_host_0$ENQ,
       v_f_to_host_0$FULL_N;

  // ports of submodule v_f_to_host_1
  wire [31 : 0] v_f_to_host_1$D_IN, v_f_to_host_1$D_OUT;
  wire v_f_to_host_1$CLR,
       v_f_to_host_1$DEQ,
       v_f_to_host_1$EMPTY_N,
       v_f_to_host_1$ENQ,
       v_f_to_host_1$FULL_N;

  // ports of submodule v_f_to_host_2
  wire [31 : 0] v_f_to_host_2$D_IN, v_f_to_host_2$D_OUT;
  wire v_f_to_host_2$CLR,
       v_f_to_host_2$DEQ,
       v_f_to_host_2$EMPTY_N,
       v_f_to_host_2$ENQ,
       v_f_to_host_2$FULL_N;

  // ports of submodule v_f_to_host_3
  wire [31 : 0] v_f_to_host_3$D_IN, v_f_to_host_3$D_OUT;
  wire v_f_to_host_3$CLR,
       v_f_to_host_3$DEQ,
       v_f_to_host_3$EMPTY_N,
       v_f_to_host_3$ENQ,
       v_f_to_host_3$FULL_N;

  // ports of submodule v_f_to_host_4
  wire [31 : 0] v_f_to_host_4$D_IN, v_f_to_host_4$D_OUT;
  wire v_f_to_host_4$CLR,
       v_f_to_host_4$DEQ,
       v_f_to_host_4$EMPTY_N,
       v_f_to_host_4$ENQ,
       v_f_to_host_4$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_AXI4L_rd,
       CAN_FIRE_RL_rl_AXI4L_wr,
       CAN_FIRE_RL_v_f_from_host_0__updateLevelCounter,
       CAN_FIRE_RL_v_f_from_host_0_reset,
       CAN_FIRE_RL_v_f_from_host_1__updateLevelCounter,
       CAN_FIRE_RL_v_f_from_host_1_reset,
       CAN_FIRE_RL_v_f_from_host_2__updateLevelCounter,
       CAN_FIRE_RL_v_f_from_host_2_reset,
       CAN_FIRE_RL_v_f_from_host_3__updateLevelCounter,
       CAN_FIRE_RL_v_f_from_host_3_reset,
       CAN_FIRE_RL_v_f_from_host_4__updateLevelCounter,
       CAN_FIRE_RL_v_f_from_host_4_reset,
       CAN_FIRE_RL_v_f_to_host_0__updateLevelCounter,
       CAN_FIRE_RL_v_f_to_host_0_reset,
       CAN_FIRE_RL_v_f_to_host_1__updateLevelCounter,
       CAN_FIRE_RL_v_f_to_host_1_reset,
       CAN_FIRE_RL_v_f_to_host_2__updateLevelCounter,
       CAN_FIRE_RL_v_f_to_host_2_reset,
       CAN_FIRE_RL_v_f_to_host_3__updateLevelCounter,
       CAN_FIRE_RL_v_f_to_host_3_reset,
       CAN_FIRE_RL_v_f_to_host_4__updateLevelCounter,
       CAN_FIRE_RL_v_f_to_host_4_reset,
       CAN_FIRE_axi4L_S_m_arvalid,
       CAN_FIRE_axi4L_S_m_awvalid,
       CAN_FIRE_axi4L_S_m_bready,
       CAN_FIRE_axi4L_S_m_rready,
       CAN_FIRE_axi4L_S_m_wvalid,
       CAN_FIRE_v_from_host_0_deq,
       CAN_FIRE_v_from_host_1_deq,
       CAN_FIRE_v_from_host_2_deq,
       CAN_FIRE_v_from_host_3_deq,
       CAN_FIRE_v_from_host_4_deq,
       CAN_FIRE_v_to_host_0_enq,
       CAN_FIRE_v_to_host_1_enq,
       CAN_FIRE_v_to_host_2_enq,
       CAN_FIRE_v_to_host_3_enq,
       CAN_FIRE_v_to_host_4_enq,
       WILL_FIRE_RL_rl_AXI4L_rd,
       WILL_FIRE_RL_rl_AXI4L_wr,
       WILL_FIRE_RL_v_f_from_host_0__updateLevelCounter,
       WILL_FIRE_RL_v_f_from_host_0_reset,
       WILL_FIRE_RL_v_f_from_host_1__updateLevelCounter,
       WILL_FIRE_RL_v_f_from_host_1_reset,
       WILL_FIRE_RL_v_f_from_host_2__updateLevelCounter,
       WILL_FIRE_RL_v_f_from_host_2_reset,
       WILL_FIRE_RL_v_f_from_host_3__updateLevelCounter,
       WILL_FIRE_RL_v_f_from_host_3_reset,
       WILL_FIRE_RL_v_f_from_host_4__updateLevelCounter,
       WILL_FIRE_RL_v_f_from_host_4_reset,
       WILL_FIRE_RL_v_f_to_host_0__updateLevelCounter,
       WILL_FIRE_RL_v_f_to_host_0_reset,
       WILL_FIRE_RL_v_f_to_host_1__updateLevelCounter,
       WILL_FIRE_RL_v_f_to_host_1_reset,
       WILL_FIRE_RL_v_f_to_host_2__updateLevelCounter,
       WILL_FIRE_RL_v_f_to_host_2_reset,
       WILL_FIRE_RL_v_f_to_host_3__updateLevelCounter,
       WILL_FIRE_RL_v_f_to_host_3_reset,
       WILL_FIRE_RL_v_f_to_host_4__updateLevelCounter,
       WILL_FIRE_RL_v_f_to_host_4_reset,
       WILL_FIRE_axi4L_S_m_arvalid,
       WILL_FIRE_axi4L_S_m_awvalid,
       WILL_FIRE_axi4L_S_m_bready,
       WILL_FIRE_axi4L_S_m_rready,
       WILL_FIRE_axi4L_S_m_wvalid,
       WILL_FIRE_v_from_host_0_deq,
       WILL_FIRE_v_from_host_1_deq,
       WILL_FIRE_v_from_host_2_deq,
       WILL_FIRE_v_from_host_3_deq,
       WILL_FIRE_v_from_host_4_deq,
       WILL_FIRE_v_to_host_0_enq,
       WILL_FIRE_v_to_host_1_enq,
       WILL_FIRE_v_to_host_2_enq,
       WILL_FIRE_v_to_host_3_enq,
       WILL_FIRE_v_to_host_4_enq;

  // inputs to muxes for submodule ports
  wire MUX_v_f_from_host_0_levelsValid$write_1__SEL_3,
       MUX_v_f_from_host_1_levelsValid$write_1__SEL_3,
       MUX_v_f_from_host_2_levelsValid$write_1__SEL_3,
       MUX_v_f_from_host_3_levelsValid$write_1__SEL_3,
       MUX_v_f_from_host_4_levelsValid$write_1__SEL_3,
       MUX_v_f_to_host_0_levelsValid$write_1__SEL_3,
       MUX_v_f_to_host_1_levelsValid$write_1__SEL_3,
       MUX_v_f_to_host_2_levelsValid$write_1__SEL_3,
       MUX_v_f_to_host_3_levelsValid$write_1__SEL_3,
       MUX_v_f_to_host_4_levelsValid$write_1__SEL_3;

  // remaining internal signals
  reg [31 : 0] y_avValue_rdata__h7836;
  reg [4 : 0] x__h7988, x__h8027;
  reg CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229,
      CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249,
      CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258,
      CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186,
      SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179,
      SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241;
  wire [31 : 0] axi4L_S_xactor_f_rd_addrD_OUT_BITS_34_TO_3_MI_ETC__q2,
		axi4L_S_xactor_f_wr_addrD_OUT_BITS_34_TO_3_MI_ETC__q1,
		data_count__h7189,
		space_count__h6980,
		x1_avValue_rdata__h7855,
		x1_avValue_rdata__h7885,
		x__h5872,
		x__h6918,
		x__h7130;
  wire IF_NOT_axi4L_S_xactor_f_rd_addr_first__12_BITS_ETC___d262,
       IF_axi4L_S_xactor_f_rd_addr_first__12_BITS_5_T_ETC___d259,
       _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219,
       _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233,
       _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170,
       _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d196,
       _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d200,
       _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d202,
       _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d204,
       _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d206,
       axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214,
       axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271,
       axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166,
       axi4L_S_xactor_f_wr_resp_i_notFull__63_AND_axi_ETC___d189;

  // action method axi4L_S_m_awvalid
  assign CAN_FIRE_axi4L_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4L_S_m_awvalid = 1'd1 ;

  // value method axi4L_S_m_awready
  assign axi4L_S_awready = axi4L_S_xactor_f_wr_addr$FULL_N ;

  // action method axi4L_S_m_wvalid
  assign CAN_FIRE_axi4L_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4L_S_m_wvalid = 1'd1 ;

  // value method axi4L_S_m_wready
  assign axi4L_S_wready = axi4L_S_xactor_f_wr_data$FULL_N ;

  // value method axi4L_S_m_bvalid
  assign axi4L_S_bvalid = axi4L_S_xactor_f_wr_resp$EMPTY_N ;

  // value method axi4L_S_m_bresp
  assign axi4L_S_bresp = axi4L_S_xactor_f_wr_resp$D_OUT ;

  // action method axi4L_S_m_bready
  assign CAN_FIRE_axi4L_S_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4L_S_m_bready = 1'd1 ;

  // action method axi4L_S_m_arvalid
  assign CAN_FIRE_axi4L_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4L_S_m_arvalid = 1'd1 ;

  // value method axi4L_S_m_arready
  assign axi4L_S_arready = axi4L_S_xactor_f_rd_addr$FULL_N ;

  // value method axi4L_S_m_rvalid
  assign axi4L_S_rvalid = axi4L_S_xactor_f_rd_data$EMPTY_N ;

  // value method axi4L_S_m_rresp
  assign axi4L_S_rresp = axi4L_S_xactor_f_rd_data$D_OUT[33:32] ;

  // value method axi4L_S_m_rdata
  assign axi4L_S_rdata = axi4L_S_xactor_f_rd_data$D_OUT[31:0] ;

  // action method axi4L_S_m_rready
  assign CAN_FIRE_axi4L_S_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4L_S_m_rready = 1'd1 ;

  // value method v_from_host_0_first
  assign v_from_host_0_first = v_f_from_host_0$D_OUT ;
  assign RDY_v_from_host_0_first = v_f_from_host_0$EMPTY_N ;

  // action method v_from_host_0_deq
  assign RDY_v_from_host_0_deq = v_f_from_host_0$EMPTY_N ;
  assign CAN_FIRE_v_from_host_0_deq = v_f_from_host_0$EMPTY_N ;
  assign WILL_FIRE_v_from_host_0_deq = EN_v_from_host_0_deq ;

  // value method v_from_host_0_notEmpty
  assign v_from_host_0_notEmpty = v_f_from_host_0$EMPTY_N ;
  assign RDY_v_from_host_0_notEmpty = 1'd1 ;

  // value method v_from_host_1_first
  assign v_from_host_1_first = v_f_from_host_1$D_OUT ;
  assign RDY_v_from_host_1_first = v_f_from_host_1$EMPTY_N ;

  // action method v_from_host_1_deq
  assign RDY_v_from_host_1_deq = v_f_from_host_1$EMPTY_N ;
  assign CAN_FIRE_v_from_host_1_deq = v_f_from_host_1$EMPTY_N ;
  assign WILL_FIRE_v_from_host_1_deq = EN_v_from_host_1_deq ;

  // value method v_from_host_1_notEmpty
  assign v_from_host_1_notEmpty = v_f_from_host_1$EMPTY_N ;
  assign RDY_v_from_host_1_notEmpty = 1'd1 ;

  // value method v_from_host_2_first
  assign v_from_host_2_first = v_f_from_host_2$D_OUT ;
  assign RDY_v_from_host_2_first = v_f_from_host_2$EMPTY_N ;

  // action method v_from_host_2_deq
  assign RDY_v_from_host_2_deq = v_f_from_host_2$EMPTY_N ;
  assign CAN_FIRE_v_from_host_2_deq = v_f_from_host_2$EMPTY_N ;
  assign WILL_FIRE_v_from_host_2_deq = EN_v_from_host_2_deq ;

  // value method v_from_host_2_notEmpty
  assign v_from_host_2_notEmpty = v_f_from_host_2$EMPTY_N ;
  assign RDY_v_from_host_2_notEmpty = 1'd1 ;

  // value method v_from_host_3_first
  assign v_from_host_3_first = v_f_from_host_3$D_OUT ;
  assign RDY_v_from_host_3_first = v_f_from_host_3$EMPTY_N ;

  // action method v_from_host_3_deq
  assign RDY_v_from_host_3_deq = v_f_from_host_3$EMPTY_N ;
  assign CAN_FIRE_v_from_host_3_deq = v_f_from_host_3$EMPTY_N ;
  assign WILL_FIRE_v_from_host_3_deq = EN_v_from_host_3_deq ;

  // value method v_from_host_3_notEmpty
  assign v_from_host_3_notEmpty = v_f_from_host_3$EMPTY_N ;
  assign RDY_v_from_host_3_notEmpty = 1'd1 ;

  // value method v_from_host_4_first
  assign v_from_host_4_first = v_f_from_host_4$D_OUT ;
  assign RDY_v_from_host_4_first = v_f_from_host_4$EMPTY_N ;

  // action method v_from_host_4_deq
  assign RDY_v_from_host_4_deq = v_f_from_host_4$EMPTY_N ;
  assign CAN_FIRE_v_from_host_4_deq = v_f_from_host_4$EMPTY_N ;
  assign WILL_FIRE_v_from_host_4_deq = EN_v_from_host_4_deq ;

  // value method v_from_host_4_notEmpty
  assign v_from_host_4_notEmpty = v_f_from_host_4$EMPTY_N ;
  assign RDY_v_from_host_4_notEmpty = 1'd1 ;

  // action method v_to_host_0_enq
  assign RDY_v_to_host_0_enq = v_f_to_host_0$FULL_N ;
  assign CAN_FIRE_v_to_host_0_enq = v_f_to_host_0$FULL_N ;
  assign WILL_FIRE_v_to_host_0_enq = EN_v_to_host_0_enq ;

  // value method v_to_host_0_notFull
  assign v_to_host_0_notFull = v_f_to_host_0$FULL_N ;
  assign RDY_v_to_host_0_notFull = 1'd1 ;

  // action method v_to_host_1_enq
  assign RDY_v_to_host_1_enq = v_f_to_host_1$FULL_N ;
  assign CAN_FIRE_v_to_host_1_enq = v_f_to_host_1$FULL_N ;
  assign WILL_FIRE_v_to_host_1_enq = EN_v_to_host_1_enq ;

  // value method v_to_host_1_notFull
  assign v_to_host_1_notFull = v_f_to_host_1$FULL_N ;
  assign RDY_v_to_host_1_notFull = 1'd1 ;

  // action method v_to_host_2_enq
  assign RDY_v_to_host_2_enq = v_f_to_host_2$FULL_N ;
  assign CAN_FIRE_v_to_host_2_enq = v_f_to_host_2$FULL_N ;
  assign WILL_FIRE_v_to_host_2_enq = EN_v_to_host_2_enq ;

  // value method v_to_host_2_notFull
  assign v_to_host_2_notFull = v_f_to_host_2$FULL_N ;
  assign RDY_v_to_host_2_notFull = 1'd1 ;

  // action method v_to_host_3_enq
  assign RDY_v_to_host_3_enq = v_f_to_host_3$FULL_N ;
  assign CAN_FIRE_v_to_host_3_enq = v_f_to_host_3$FULL_N ;
  assign WILL_FIRE_v_to_host_3_enq = EN_v_to_host_3_enq ;

  // value method v_to_host_3_notFull
  assign v_to_host_3_notFull = v_f_to_host_3$FULL_N ;
  assign RDY_v_to_host_3_notFull = 1'd1 ;

  // action method v_to_host_4_enq
  assign RDY_v_to_host_4_enq = v_f_to_host_4$FULL_N ;
  assign CAN_FIRE_v_to_host_4_enq = v_f_to_host_4$FULL_N ;
  assign WILL_FIRE_v_to_host_4_enq = EN_v_to_host_4_enq ;

  // value method v_to_host_4_notFull
  assign v_to_host_4_notFull = v_f_to_host_4$FULL_N ;
  assign RDY_v_to_host_4_notFull = 1'd1 ;

  // submodule axi4L_S_xactor_f_rd_addr
  FIFO2 #(.width(32'd35),
	  .guarded(1'd1)) axi4L_S_xactor_f_rd_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(axi4L_S_xactor_f_rd_addr$D_IN),
						   .ENQ(axi4L_S_xactor_f_rd_addr$ENQ),
						   .DEQ(axi4L_S_xactor_f_rd_addr$DEQ),
						   .CLR(axi4L_S_xactor_f_rd_addr$CLR),
						   .D_OUT(axi4L_S_xactor_f_rd_addr$D_OUT),
						   .FULL_N(axi4L_S_xactor_f_rd_addr$FULL_N),
						   .EMPTY_N(axi4L_S_xactor_f_rd_addr$EMPTY_N));

  // submodule axi4L_S_xactor_f_rd_data
  FIFO2 #(.width(32'd34),
	  .guarded(1'd1)) axi4L_S_xactor_f_rd_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(axi4L_S_xactor_f_rd_data$D_IN),
						   .ENQ(axi4L_S_xactor_f_rd_data$ENQ),
						   .DEQ(axi4L_S_xactor_f_rd_data$DEQ),
						   .CLR(axi4L_S_xactor_f_rd_data$CLR),
						   .D_OUT(axi4L_S_xactor_f_rd_data$D_OUT),
						   .FULL_N(axi4L_S_xactor_f_rd_data$FULL_N),
						   .EMPTY_N(axi4L_S_xactor_f_rd_data$EMPTY_N));

  // submodule axi4L_S_xactor_f_wr_addr
  FIFO2 #(.width(32'd35),
	  .guarded(1'd1)) axi4L_S_xactor_f_wr_addr(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(axi4L_S_xactor_f_wr_addr$D_IN),
						   .ENQ(axi4L_S_xactor_f_wr_addr$ENQ),
						   .DEQ(axi4L_S_xactor_f_wr_addr$DEQ),
						   .CLR(axi4L_S_xactor_f_wr_addr$CLR),
						   .D_OUT(axi4L_S_xactor_f_wr_addr$D_OUT),
						   .FULL_N(axi4L_S_xactor_f_wr_addr$FULL_N),
						   .EMPTY_N(axi4L_S_xactor_f_wr_addr$EMPTY_N));

  // submodule axi4L_S_xactor_f_wr_data
  FIFO2 #(.width(32'd36),
	  .guarded(1'd1)) axi4L_S_xactor_f_wr_data(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(axi4L_S_xactor_f_wr_data$D_IN),
						   .ENQ(axi4L_S_xactor_f_wr_data$ENQ),
						   .DEQ(axi4L_S_xactor_f_wr_data$DEQ),
						   .CLR(axi4L_S_xactor_f_wr_data$CLR),
						   .D_OUT(axi4L_S_xactor_f_wr_data$D_OUT),
						   .FULL_N(axi4L_S_xactor_f_wr_data$FULL_N),
						   .EMPTY_N(axi4L_S_xactor_f_wr_data$EMPTY_N));

  // submodule axi4L_S_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(1'd1)) axi4L_S_xactor_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(axi4L_S_xactor_f_wr_resp$D_IN),
								  .ENQ(axi4L_S_xactor_f_wr_resp$ENQ),
								  .DEQ(axi4L_S_xactor_f_wr_resp$DEQ),
								  .CLR(axi4L_S_xactor_f_wr_resp$CLR),
								  .D_OUT(axi4L_S_xactor_f_wr_resp$D_OUT),
								  .FULL_N(axi4L_S_xactor_f_wr_resp$FULL_N),
								  .EMPTY_N(axi4L_S_xactor_f_wr_resp$EMPTY_N));

  // submodule v_f_from_host_0
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_from_host_0(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(v_f_from_host_0$D_IN),
					      .ENQ(v_f_from_host_0$ENQ),
					      .DEQ(v_f_from_host_0$DEQ),
					      .CLR(v_f_from_host_0$CLR),
					      .D_OUT(v_f_from_host_0$D_OUT),
					      .FULL_N(v_f_from_host_0$FULL_N),
					      .EMPTY_N(v_f_from_host_0$EMPTY_N));

  // submodule v_f_from_host_1
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_from_host_1(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(v_f_from_host_1$D_IN),
					      .ENQ(v_f_from_host_1$ENQ),
					      .DEQ(v_f_from_host_1$DEQ),
					      .CLR(v_f_from_host_1$CLR),
					      .D_OUT(v_f_from_host_1$D_OUT),
					      .FULL_N(v_f_from_host_1$FULL_N),
					      .EMPTY_N(v_f_from_host_1$EMPTY_N));

  // submodule v_f_from_host_2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_from_host_2(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(v_f_from_host_2$D_IN),
					      .ENQ(v_f_from_host_2$ENQ),
					      .DEQ(v_f_from_host_2$DEQ),
					      .CLR(v_f_from_host_2$CLR),
					      .D_OUT(v_f_from_host_2$D_OUT),
					      .FULL_N(v_f_from_host_2$FULL_N),
					      .EMPTY_N(v_f_from_host_2$EMPTY_N));

  // submodule v_f_from_host_3
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_from_host_3(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(v_f_from_host_3$D_IN),
					      .ENQ(v_f_from_host_3$ENQ),
					      .DEQ(v_f_from_host_3$DEQ),
					      .CLR(v_f_from_host_3$CLR),
					      .D_OUT(v_f_from_host_3$D_OUT),
					      .FULL_N(v_f_from_host_3$FULL_N),
					      .EMPTY_N(v_f_from_host_3$EMPTY_N));

  // submodule v_f_from_host_4
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_from_host_4(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(v_f_from_host_4$D_IN),
					      .ENQ(v_f_from_host_4$ENQ),
					      .DEQ(v_f_from_host_4$DEQ),
					      .CLR(v_f_from_host_4$CLR),
					      .D_OUT(v_f_from_host_4$D_OUT),
					      .FULL_N(v_f_from_host_4$FULL_N),
					      .EMPTY_N(v_f_from_host_4$EMPTY_N));

  // submodule v_f_to_host_0
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_to_host_0(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(v_f_to_host_0$D_IN),
					    .ENQ(v_f_to_host_0$ENQ),
					    .DEQ(v_f_to_host_0$DEQ),
					    .CLR(v_f_to_host_0$CLR),
					    .D_OUT(v_f_to_host_0$D_OUT),
					    .FULL_N(v_f_to_host_0$FULL_N),
					    .EMPTY_N(v_f_to_host_0$EMPTY_N));

  // submodule v_f_to_host_1
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_to_host_1(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(v_f_to_host_1$D_IN),
					    .ENQ(v_f_to_host_1$ENQ),
					    .DEQ(v_f_to_host_1$DEQ),
					    .CLR(v_f_to_host_1$CLR),
					    .D_OUT(v_f_to_host_1$D_OUT),
					    .FULL_N(v_f_to_host_1$FULL_N),
					    .EMPTY_N(v_f_to_host_1$EMPTY_N));

  // submodule v_f_to_host_2
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_to_host_2(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(v_f_to_host_2$D_IN),
					    .ENQ(v_f_to_host_2$ENQ),
					    .DEQ(v_f_to_host_2$DEQ),
					    .CLR(v_f_to_host_2$CLR),
					    .D_OUT(v_f_to_host_2$D_OUT),
					    .FULL_N(v_f_to_host_2$FULL_N),
					    .EMPTY_N(v_f_to_host_2$EMPTY_N));

  // submodule v_f_to_host_3
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_to_host_3(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(v_f_to_host_3$D_IN),
					    .ENQ(v_f_to_host_3$ENQ),
					    .DEQ(v_f_to_host_3$DEQ),
					    .CLR(v_f_to_host_3$CLR),
					    .D_OUT(v_f_to_host_3$D_OUT),
					    .FULL_N(v_f_to_host_3$FULL_N),
					    .EMPTY_N(v_f_to_host_3$EMPTY_N));

  // submodule v_f_to_host_4
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd16),
	      .p3cntr_width(32'd4),
	      .guarded(1'd1)) v_f_to_host_4(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(v_f_to_host_4$D_IN),
					    .ENQ(v_f_to_host_4$ENQ),
					    .DEQ(v_f_to_host_4$DEQ),
					    .CLR(v_f_to_host_4$CLR),
					    .D_OUT(v_f_to_host_4$D_OUT),
					    .FULL_N(v_f_to_host_4$FULL_N),
					    .EMPTY_N(v_f_to_host_4$EMPTY_N));

  // rule RL_rl_AXI4L_rd
  assign CAN_FIRE_RL_rl_AXI4L_rd =
	     axi4L_S_xactor_f_rd_addr$EMPTY_N &&
	     axi4L_S_xactor_f_rd_data$FULL_N &&
	     IF_NOT_axi4L_S_xactor_f_rd_addr_first__12_BITS_ETC___d262 ;
  assign WILL_FIRE_RL_rl_AXI4L_rd = CAN_FIRE_RL_rl_AXI4L_rd ;

  // rule RL_rl_AXI4L_wr
  assign CAN_FIRE_RL_rl_AXI4L_wr =
	     axi4L_S_xactor_f_wr_addr$EMPTY_N &&
	     axi4L_S_xactor_f_wr_data$EMPTY_N &&
	     axi4L_S_xactor_f_wr_resp_i_notFull__63_AND_axi_ETC___d189 ;
  assign WILL_FIRE_RL_rl_AXI4L_wr = CAN_FIRE_RL_rl_AXI4L_wr ;

  // rule RL_v_f_from_host_0__updateLevelCounter
  assign CAN_FIRE_RL_v_f_from_host_0__updateLevelCounter =
	     MUX_v_f_from_host_0_levelsValid$write_1__SEL_3 !=
	     EN_v_from_host_0_deq ;
  assign WILL_FIRE_RL_v_f_from_host_0__updateLevelCounter =
	     CAN_FIRE_RL_v_f_from_host_0__updateLevelCounter ;

  // rule RL_v_f_from_host_0_reset
  assign CAN_FIRE_RL_v_f_from_host_0_reset =
	     MUX_v_f_from_host_0_levelsValid$write_1__SEL_3 ||
	     EN_v_from_host_0_deq ;
  assign WILL_FIRE_RL_v_f_from_host_0_reset =
	     CAN_FIRE_RL_v_f_from_host_0_reset ;

  // rule RL_v_f_from_host_1__updateLevelCounter
  assign CAN_FIRE_RL_v_f_from_host_1__updateLevelCounter =
	     MUX_v_f_from_host_1_levelsValid$write_1__SEL_3 !=
	     EN_v_from_host_1_deq ;
  assign WILL_FIRE_RL_v_f_from_host_1__updateLevelCounter =
	     CAN_FIRE_RL_v_f_from_host_1__updateLevelCounter ;

  // rule RL_v_f_from_host_1_reset
  assign CAN_FIRE_RL_v_f_from_host_1_reset =
	     MUX_v_f_from_host_1_levelsValid$write_1__SEL_3 ||
	     EN_v_from_host_1_deq ;
  assign WILL_FIRE_RL_v_f_from_host_1_reset =
	     CAN_FIRE_RL_v_f_from_host_1_reset ;

  // rule RL_v_f_from_host_2__updateLevelCounter
  assign CAN_FIRE_RL_v_f_from_host_2__updateLevelCounter =
	     MUX_v_f_from_host_2_levelsValid$write_1__SEL_3 !=
	     EN_v_from_host_2_deq ;
  assign WILL_FIRE_RL_v_f_from_host_2__updateLevelCounter =
	     CAN_FIRE_RL_v_f_from_host_2__updateLevelCounter ;

  // rule RL_v_f_from_host_2_reset
  assign CAN_FIRE_RL_v_f_from_host_2_reset =
	     MUX_v_f_from_host_2_levelsValid$write_1__SEL_3 ||
	     EN_v_from_host_2_deq ;
  assign WILL_FIRE_RL_v_f_from_host_2_reset =
	     CAN_FIRE_RL_v_f_from_host_2_reset ;

  // rule RL_v_f_from_host_3__updateLevelCounter
  assign CAN_FIRE_RL_v_f_from_host_3__updateLevelCounter =
	     MUX_v_f_from_host_3_levelsValid$write_1__SEL_3 !=
	     EN_v_from_host_3_deq ;
  assign WILL_FIRE_RL_v_f_from_host_3__updateLevelCounter =
	     CAN_FIRE_RL_v_f_from_host_3__updateLevelCounter ;

  // rule RL_v_f_from_host_3_reset
  assign CAN_FIRE_RL_v_f_from_host_3_reset =
	     MUX_v_f_from_host_3_levelsValid$write_1__SEL_3 ||
	     EN_v_from_host_3_deq ;
  assign WILL_FIRE_RL_v_f_from_host_3_reset =
	     CAN_FIRE_RL_v_f_from_host_3_reset ;

  // rule RL_v_f_from_host_4__updateLevelCounter
  assign CAN_FIRE_RL_v_f_from_host_4__updateLevelCounter =
	     MUX_v_f_from_host_4_levelsValid$write_1__SEL_3 !=
	     EN_v_from_host_4_deq ;
  assign WILL_FIRE_RL_v_f_from_host_4__updateLevelCounter =
	     CAN_FIRE_RL_v_f_from_host_4__updateLevelCounter ;

  // rule RL_v_f_from_host_4_reset
  assign CAN_FIRE_RL_v_f_from_host_4_reset =
	     MUX_v_f_from_host_4_levelsValid$write_1__SEL_3 ||
	     EN_v_from_host_4_deq ;
  assign WILL_FIRE_RL_v_f_from_host_4_reset =
	     CAN_FIRE_RL_v_f_from_host_4_reset ;

  // rule RL_v_f_to_host_0__updateLevelCounter
  assign CAN_FIRE_RL_v_f_to_host_0__updateLevelCounter =
	     EN_v_to_host_0_enq !=
	     MUX_v_f_to_host_0_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_0__updateLevelCounter =
	     CAN_FIRE_RL_v_f_to_host_0__updateLevelCounter ;

  // rule RL_v_f_to_host_0_reset
  assign CAN_FIRE_RL_v_f_to_host_0_reset =
	     EN_v_to_host_0_enq ||
	     MUX_v_f_to_host_0_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_0_reset = CAN_FIRE_RL_v_f_to_host_0_reset ;

  // rule RL_v_f_to_host_1__updateLevelCounter
  assign CAN_FIRE_RL_v_f_to_host_1__updateLevelCounter =
	     EN_v_to_host_1_enq !=
	     MUX_v_f_to_host_1_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_1__updateLevelCounter =
	     CAN_FIRE_RL_v_f_to_host_1__updateLevelCounter ;

  // rule RL_v_f_to_host_1_reset
  assign CAN_FIRE_RL_v_f_to_host_1_reset =
	     EN_v_to_host_1_enq ||
	     MUX_v_f_to_host_1_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_1_reset = CAN_FIRE_RL_v_f_to_host_1_reset ;

  // rule RL_v_f_to_host_2__updateLevelCounter
  assign CAN_FIRE_RL_v_f_to_host_2__updateLevelCounter =
	     EN_v_to_host_2_enq !=
	     MUX_v_f_to_host_2_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_2__updateLevelCounter =
	     CAN_FIRE_RL_v_f_to_host_2__updateLevelCounter ;

  // rule RL_v_f_to_host_2_reset
  assign CAN_FIRE_RL_v_f_to_host_2_reset =
	     EN_v_to_host_2_enq ||
	     MUX_v_f_to_host_2_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_2_reset = CAN_FIRE_RL_v_f_to_host_2_reset ;

  // rule RL_v_f_to_host_3__updateLevelCounter
  assign CAN_FIRE_RL_v_f_to_host_3__updateLevelCounter =
	     EN_v_to_host_3_enq !=
	     MUX_v_f_to_host_3_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_3__updateLevelCounter =
	     CAN_FIRE_RL_v_f_to_host_3__updateLevelCounter ;

  // rule RL_v_f_to_host_3_reset
  assign CAN_FIRE_RL_v_f_to_host_3_reset =
	     EN_v_to_host_3_enq ||
	     MUX_v_f_to_host_3_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_3_reset = CAN_FIRE_RL_v_f_to_host_3_reset ;

  // rule RL_v_f_to_host_4__updateLevelCounter
  assign CAN_FIRE_RL_v_f_to_host_4__updateLevelCounter =
	     EN_v_to_host_4_enq !=
	     MUX_v_f_to_host_4_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_4__updateLevelCounter =
	     CAN_FIRE_RL_v_f_to_host_4__updateLevelCounter ;

  // rule RL_v_f_to_host_4_reset
  assign CAN_FIRE_RL_v_f_to_host_4_reset =
	     EN_v_to_host_4_enq ||
	     MUX_v_f_to_host_4_levelsValid$write_1__SEL_3 ;
  assign WILL_FIRE_RL_v_f_to_host_4_reset = CAN_FIRE_RL_v_f_to_host_4_reset ;

  // inputs to muxes for submodule ports
  assign MUX_v_f_from_host_0_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d196 ;
  assign MUX_v_f_from_host_1_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d200 ;
  assign MUX_v_f_from_host_2_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d202 ;
  assign MUX_v_f_from_host_3_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d204 ;
  assign MUX_v_f_from_host_4_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d206 ;
  assign MUX_v_f_to_host_0_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd0 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ;
  assign MUX_v_f_to_host_1_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd1 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ;
  assign MUX_v_f_to_host_2_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd2 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ;
  assign MUX_v_f_to_host_3_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd3 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ;
  assign MUX_v_f_to_host_4_levelsValid$write_1__SEL_3 =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd4 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ;

  // register v_f_from_host_0_countReg
  assign v_f_from_host_0_countReg$D_IN =
	     MUX_v_f_from_host_0_levelsValid$write_1__SEL_3 ?
	       v_f_from_host_0_countReg + 5'd1 :
	       v_f_from_host_0_countReg - 5'd1 ;
  assign v_f_from_host_0_countReg$EN =
	     CAN_FIRE_RL_v_f_from_host_0__updateLevelCounter ;

  // register v_f_from_host_0_levelsValid
  assign v_f_from_host_0_levelsValid$D_IN =
	     WILL_FIRE_RL_v_f_from_host_0_reset ;
  assign v_f_from_host_0_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d196 ||
	     EN_v_from_host_0_deq ||
	     WILL_FIRE_RL_v_f_from_host_0_reset ;

  // register v_f_from_host_1_countReg
  assign v_f_from_host_1_countReg$D_IN =
	     MUX_v_f_from_host_1_levelsValid$write_1__SEL_3 ?
	       v_f_from_host_1_countReg + 5'd1 :
	       v_f_from_host_1_countReg - 5'd1 ;
  assign v_f_from_host_1_countReg$EN =
	     CAN_FIRE_RL_v_f_from_host_1__updateLevelCounter ;

  // register v_f_from_host_1_levelsValid
  assign v_f_from_host_1_levelsValid$D_IN =
	     WILL_FIRE_RL_v_f_from_host_1_reset ;
  assign v_f_from_host_1_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d200 ||
	     EN_v_from_host_1_deq ||
	     WILL_FIRE_RL_v_f_from_host_1_reset ;

  // register v_f_from_host_2_countReg
  assign v_f_from_host_2_countReg$D_IN =
	     MUX_v_f_from_host_2_levelsValid$write_1__SEL_3 ?
	       v_f_from_host_2_countReg + 5'd1 :
	       v_f_from_host_2_countReg - 5'd1 ;
  assign v_f_from_host_2_countReg$EN =
	     CAN_FIRE_RL_v_f_from_host_2__updateLevelCounter ;

  // register v_f_from_host_2_levelsValid
  assign v_f_from_host_2_levelsValid$D_IN =
	     WILL_FIRE_RL_v_f_from_host_2_reset ;
  assign v_f_from_host_2_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d202 ||
	     EN_v_from_host_2_deq ||
	     WILL_FIRE_RL_v_f_from_host_2_reset ;

  // register v_f_from_host_3_countReg
  assign v_f_from_host_3_countReg$D_IN =
	     MUX_v_f_from_host_3_levelsValid$write_1__SEL_3 ?
	       v_f_from_host_3_countReg + 5'd1 :
	       v_f_from_host_3_countReg - 5'd1 ;
  assign v_f_from_host_3_countReg$EN =
	     CAN_FIRE_RL_v_f_from_host_3__updateLevelCounter ;

  // register v_f_from_host_3_levelsValid
  assign v_f_from_host_3_levelsValid$D_IN =
	     WILL_FIRE_RL_v_f_from_host_3_reset ;
  assign v_f_from_host_3_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d204 ||
	     EN_v_from_host_3_deq ||
	     WILL_FIRE_RL_v_f_from_host_3_reset ;

  // register v_f_from_host_4_countReg
  assign v_f_from_host_4_countReg$D_IN =
	     MUX_v_f_from_host_4_levelsValid$write_1__SEL_3 ?
	       v_f_from_host_4_countReg + 5'd1 :
	       v_f_from_host_4_countReg - 5'd1 ;
  assign v_f_from_host_4_countReg$EN =
	     CAN_FIRE_RL_v_f_from_host_4__updateLevelCounter ;

  // register v_f_from_host_4_levelsValid
  assign v_f_from_host_4_levelsValid$D_IN =
	     WILL_FIRE_RL_v_f_from_host_4_reset ;
  assign v_f_from_host_4_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_wr &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d206 ||
	     EN_v_from_host_4_deq ||
	     WILL_FIRE_RL_v_f_from_host_4_reset ;

  // register v_f_to_host_0_countReg
  assign v_f_to_host_0_countReg$D_IN =
	     EN_v_to_host_0_enq ?
	       v_f_to_host_0_countReg + 5'd1 :
	       v_f_to_host_0_countReg - 5'd1 ;
  assign v_f_to_host_0_countReg$EN =
	     CAN_FIRE_RL_v_f_to_host_0__updateLevelCounter ;

  // register v_f_to_host_0_levelsValid
  assign v_f_to_host_0_levelsValid$D_IN = WILL_FIRE_RL_v_f_to_host_0_reset ;
  assign v_f_to_host_0_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd0 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ||
	     EN_v_to_host_0_enq ||
	     WILL_FIRE_RL_v_f_to_host_0_reset ;

  // register v_f_to_host_1_countReg
  assign v_f_to_host_1_countReg$D_IN =
	     EN_v_to_host_1_enq ?
	       v_f_to_host_1_countReg + 5'd1 :
	       v_f_to_host_1_countReg - 5'd1 ;
  assign v_f_to_host_1_countReg$EN =
	     CAN_FIRE_RL_v_f_to_host_1__updateLevelCounter ;

  // register v_f_to_host_1_levelsValid
  assign v_f_to_host_1_levelsValid$D_IN = WILL_FIRE_RL_v_f_to_host_1_reset ;
  assign v_f_to_host_1_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd1 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ||
	     EN_v_to_host_1_enq ||
	     WILL_FIRE_RL_v_f_to_host_1_reset ;

  // register v_f_to_host_2_countReg
  assign v_f_to_host_2_countReg$D_IN =
	     EN_v_to_host_2_enq ?
	       v_f_to_host_2_countReg + 5'd1 :
	       v_f_to_host_2_countReg - 5'd1 ;
  assign v_f_to_host_2_countReg$EN =
	     CAN_FIRE_RL_v_f_to_host_2__updateLevelCounter ;

  // register v_f_to_host_2_levelsValid
  assign v_f_to_host_2_levelsValid$D_IN = WILL_FIRE_RL_v_f_to_host_2_reset ;
  assign v_f_to_host_2_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd2 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ||
	     EN_v_to_host_2_enq ||
	     WILL_FIRE_RL_v_f_to_host_2_reset ;

  // register v_f_to_host_3_countReg
  assign v_f_to_host_3_countReg$D_IN =
	     EN_v_to_host_3_enq ?
	       v_f_to_host_3_countReg + 5'd1 :
	       v_f_to_host_3_countReg - 5'd1 ;
  assign v_f_to_host_3_countReg$EN =
	     CAN_FIRE_RL_v_f_to_host_3__updateLevelCounter ;

  // register v_f_to_host_3_levelsValid
  assign v_f_to_host_3_levelsValid$D_IN = WILL_FIRE_RL_v_f_to_host_3_reset ;
  assign v_f_to_host_3_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd3 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ||
	     EN_v_to_host_3_enq ||
	     WILL_FIRE_RL_v_f_to_host_3_reset ;

  // register v_f_to_host_4_countReg
  assign v_f_to_host_4_countReg$D_IN =
	     EN_v_to_host_4_enq ?
	       v_f_to_host_4_countReg + 5'd1 :
	       v_f_to_host_4_countReg - 5'd1 ;
  assign v_f_to_host_4_countReg$EN =
	     CAN_FIRE_RL_v_f_to_host_4__updateLevelCounter ;

  // register v_f_to_host_4_levelsValid
  assign v_f_to_host_4_levelsValid$D_IN = WILL_FIRE_RL_v_f_to_host_4_reset ;
  assign v_f_to_host_4_levelsValid$EN =
	     WILL_FIRE_RL_rl_AXI4L_rd && x__h7130 == 32'd4 &&
	     axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 ||
	     EN_v_to_host_4_enq ||
	     WILL_FIRE_RL_v_f_to_host_4_reset ;

  // submodule axi4L_S_xactor_f_rd_addr
  assign axi4L_S_xactor_f_rd_addr$D_IN = { axi4L_S_araddr, axi4L_S_arprot } ;
  assign axi4L_S_xactor_f_rd_addr$ENQ =
	     axi4L_S_arvalid && axi4L_S_xactor_f_rd_addr$FULL_N ;
  assign axi4L_S_xactor_f_rd_addr$DEQ =
	     axi4L_S_xactor_f_rd_addr$EMPTY_N &&
	     axi4L_S_xactor_f_rd_data$FULL_N &&
	     IF_NOT_axi4L_S_xactor_f_rd_addr_first__12_BITS_ETC___d262 ;
  assign axi4L_S_xactor_f_rd_addr$CLR = 1'b0 ;

  // submodule axi4L_S_xactor_f_rd_data
  assign axi4L_S_xactor_f_rd_data$D_IN =
	     (!axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 &&
	      _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219) ?
	       ((axi4L_S_xactor_f_rd_addr$D_OUT[5:3] == 3'b100) ?
		  { 2'd0, space_count__h6980 } :
		  34'h2DEADBEEF) :
	       (_0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233 ?
		  { 2'd0, x1_avValue_rdata__h7885 } :
		  34'h3DEADBEEF) ;
  assign axi4L_S_xactor_f_rd_data$ENQ =
	     axi4L_S_xactor_f_rd_addr$EMPTY_N &&
	     axi4L_S_xactor_f_rd_data$FULL_N &&
	     IF_NOT_axi4L_S_xactor_f_rd_addr_first__12_BITS_ETC___d262 ;
  assign axi4L_S_xactor_f_rd_data$DEQ =
	     axi4L_S_rready && axi4L_S_xactor_f_rd_data$EMPTY_N ;
  assign axi4L_S_xactor_f_rd_data$CLR = 1'b0 ;

  // submodule axi4L_S_xactor_f_wr_addr
  assign axi4L_S_xactor_f_wr_addr$D_IN = { axi4L_S_awaddr, axi4L_S_awprot } ;
  assign axi4L_S_xactor_f_wr_addr$ENQ =
	     axi4L_S_awvalid && axi4L_S_xactor_f_wr_addr$FULL_N ;
  assign axi4L_S_xactor_f_wr_addr$DEQ =
	     axi4L_S_xactor_f_wr_addr$EMPTY_N &&
	     axi4L_S_xactor_f_wr_data$EMPTY_N &&
	     axi4L_S_xactor_f_wr_resp_i_notFull__63_AND_axi_ETC___d189 ;
  assign axi4L_S_xactor_f_wr_addr$CLR = 1'b0 ;

  // submodule axi4L_S_xactor_f_wr_data
  assign axi4L_S_xactor_f_wr_data$D_IN = { axi4L_S_wdata, axi4L_S_wstrb } ;
  assign axi4L_S_xactor_f_wr_data$ENQ =
	     axi4L_S_wvalid && axi4L_S_xactor_f_wr_data$FULL_N ;
  assign axi4L_S_xactor_f_wr_data$DEQ =
	     axi4L_S_xactor_f_wr_addr$EMPTY_N &&
	     axi4L_S_xactor_f_wr_data$EMPTY_N &&
	     axi4L_S_xactor_f_wr_resp_i_notFull__63_AND_axi_ETC___d189 ;
  assign axi4L_S_xactor_f_wr_data$CLR = 1'b0 ;

  // submodule axi4L_S_xactor_f_wr_resp
  assign axi4L_S_xactor_f_wr_resp$D_IN =
	     (!axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	      _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170) ?
	       (SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ?
		  2'd0 :
		  2'd2) :
	       2'd3 ;
  assign axi4L_S_xactor_f_wr_resp$ENQ =
	     axi4L_S_xactor_f_wr_addr$EMPTY_N &&
	     axi4L_S_xactor_f_wr_data$EMPTY_N &&
	     axi4L_S_xactor_f_wr_resp_i_notFull__63_AND_axi_ETC___d189 ;
  assign axi4L_S_xactor_f_wr_resp$DEQ =
	     axi4L_S_bready && axi4L_S_xactor_f_wr_resp$EMPTY_N ;
  assign axi4L_S_xactor_f_wr_resp$CLR = 1'b0 ;

  // submodule v_f_from_host_0
  assign v_f_from_host_0$D_IN = axi4L_S_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_0$ENQ =
	     MUX_v_f_from_host_0_levelsValid$write_1__SEL_3 ;
  assign v_f_from_host_0$DEQ = EN_v_from_host_0_deq ;
  assign v_f_from_host_0$CLR = 1'b0 ;

  // submodule v_f_from_host_1
  assign v_f_from_host_1$D_IN = axi4L_S_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_1$ENQ =
	     MUX_v_f_from_host_1_levelsValid$write_1__SEL_3 ;
  assign v_f_from_host_1$DEQ = EN_v_from_host_1_deq ;
  assign v_f_from_host_1$CLR = 1'b0 ;

  // submodule v_f_from_host_2
  assign v_f_from_host_2$D_IN = axi4L_S_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_2$ENQ =
	     MUX_v_f_from_host_2_levelsValid$write_1__SEL_3 ;
  assign v_f_from_host_2$DEQ = EN_v_from_host_2_deq ;
  assign v_f_from_host_2$CLR = 1'b0 ;

  // submodule v_f_from_host_3
  assign v_f_from_host_3$D_IN = axi4L_S_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_3$ENQ =
	     MUX_v_f_from_host_3_levelsValid$write_1__SEL_3 ;
  assign v_f_from_host_3$DEQ = EN_v_from_host_3_deq ;
  assign v_f_from_host_3$CLR = 1'b0 ;

  // submodule v_f_from_host_4
  assign v_f_from_host_4$D_IN = axi4L_S_xactor_f_wr_data$D_OUT[35:4] ;
  assign v_f_from_host_4$ENQ =
	     MUX_v_f_from_host_4_levelsValid$write_1__SEL_3 ;
  assign v_f_from_host_4$DEQ = EN_v_from_host_4_deq ;
  assign v_f_from_host_4$CLR = 1'b0 ;

  // submodule v_f_to_host_0
  assign v_f_to_host_0$D_IN = v_to_host_0_enq_x ;
  assign v_f_to_host_0$ENQ = EN_v_to_host_0_enq ;
  assign v_f_to_host_0$DEQ = MUX_v_f_to_host_0_levelsValid$write_1__SEL_3 ;
  assign v_f_to_host_0$CLR = 1'b0 ;

  // submodule v_f_to_host_1
  assign v_f_to_host_1$D_IN = v_to_host_1_enq_x ;
  assign v_f_to_host_1$ENQ = EN_v_to_host_1_enq ;
  assign v_f_to_host_1$DEQ = MUX_v_f_to_host_1_levelsValid$write_1__SEL_3 ;
  assign v_f_to_host_1$CLR = 1'b0 ;

  // submodule v_f_to_host_2
  assign v_f_to_host_2$D_IN = v_to_host_2_enq_x ;
  assign v_f_to_host_2$ENQ = EN_v_to_host_2_enq ;
  assign v_f_to_host_2$DEQ = MUX_v_f_to_host_2_levelsValid$write_1__SEL_3 ;
  assign v_f_to_host_2$CLR = 1'b0 ;

  // submodule v_f_to_host_3
  assign v_f_to_host_3$D_IN = v_to_host_3_enq_x ;
  assign v_f_to_host_3$ENQ = EN_v_to_host_3_enq ;
  assign v_f_to_host_3$DEQ = MUX_v_f_to_host_3_levelsValid$write_1__SEL_3 ;
  assign v_f_to_host_3$CLR = 1'b0 ;

  // submodule v_f_to_host_4
  assign v_f_to_host_4$D_IN = v_to_host_4_enq_x ;
  assign v_f_to_host_4$ENQ = EN_v_to_host_4_enq ;
  assign v_f_to_host_4$DEQ = MUX_v_f_to_host_4_levelsValid$write_1__SEL_3 ;
  assign v_f_to_host_4$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_axi4L_S_xactor_f_rd_addr_first__12_BITS_ETC___d262 =
	     (!axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 &&
	      _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219) ?
	       axi4L_S_xactor_f_rd_addr$D_OUT[5:3] != 3'b100 ||
	       CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 :
	       (!_0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233 ||
		axi4L_S_xactor_f_rd_addr$D_OUT[5:3] == 3'b100 ||
		!SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 ||
		CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249) &&
	       (!_0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233 ||
		IF_axi4L_S_xactor_f_rd_addr_first__12_BITS_5_T_ETC___d259) ;
  assign IF_axi4L_S_xactor_f_rd_addr_first__12_BITS_5_T_ETC___d259 =
	     (axi4L_S_xactor_f_rd_addr$D_OUT[5:3] == 3'b100) ?
	       CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 :
	       !SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 ||
	       CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 ;
  assign _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219 =
	     x__h6918 < 32'd5 ;
  assign _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233 =
	     x__h7130 < 32'd5 ;
  assign _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 =
	     x__h5872 < 32'd5 ;
  assign _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d196 =
	     x__h5872 == 32'd0 &&
	     !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	     SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ;
  assign _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d200 =
	     x__h5872 == 32'd1 &&
	     !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	     SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ;
  assign _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d202 =
	     x__h5872 == 32'd2 &&
	     !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	     SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ;
  assign _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d204 =
	     x__h5872 == 32'd3 &&
	     !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	     SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ;
  assign _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d206 =
	     x__h5872 == 32'd4 &&
	     !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	     _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	     SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ;
  assign axi4L_S_xactor_f_rd_addrD_OUT_BITS_34_TO_3_MI_ETC__q2 =
	     axi4L_S_xactor_f_rd_addr$D_OUT[34:3] - 32'h00001000 ;
  assign axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 =
	     axi4L_S_xactor_f_rd_addr$D_OUT[34:3] < 32'h00001000 ;
  assign axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d271 =
	     (axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 ||
	      !_0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219) &&
	     _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233 &&
	     axi4L_S_xactor_f_rd_addr$D_OUT[5:3] != 3'b100 &&
	     SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 ;
  assign axi4L_S_xactor_f_wr_addrD_OUT_BITS_34_TO_3_MI_ETC__q1 =
	     axi4L_S_xactor_f_wr_addr$D_OUT[34:3] - 32'h00001000 ;
  assign axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 =
	     axi4L_S_xactor_f_wr_addr$D_OUT[34:3] < 32'h00001000 ;
  assign axi4L_S_xactor_f_wr_resp_i_notFull__63_AND_axi_ETC___d189 =
	     axi4L_S_xactor_f_wr_resp$FULL_N &&
	     (axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 ||
	      !_0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 ||
	      !SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 ||
	      CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186) ;
  assign data_count__h7189 = { 27'd0, x__h8027 } ;
  assign space_count__h6980 = 32'd16 - { 27'd0, x__h7988 } ;
  assign x1_avValue_rdata__h7855 =
	     SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 ?
	       y_avValue_rdata__h7836 :
	       32'hDEADBEEF ;
  assign x1_avValue_rdata__h7885 =
	     (axi4L_S_xactor_f_rd_addr$D_OUT[5:3] == 3'b100) ?
	       data_count__h7189 :
	       x1_avValue_rdata__h7855 ;
  assign x__h5872 =
	     { 3'd0,
	       axi4L_S_xactor_f_wr_addrD_OUT_BITS_34_TO_3_MI_ETC__q1[31:3] } ;
  assign x__h6918 =
	     { 3'd0,
	       axi4L_S_xactor_f_rd_addrD_OUT_BITS_34_TO_3_MI_ETC__q2[31:3] } ;
  assign x__h7130 = { 3'd0, axi4L_S_xactor_f_rd_addr$D_OUT[34:6] } ;
  always@(x__h7130 or
	  v_f_to_host_0$D_OUT or
	  v_f_to_host_1$D_OUT or
	  v_f_to_host_2$D_OUT or v_f_to_host_3$D_OUT or v_f_to_host_4$D_OUT)
  begin
    case (x__h7130)
      32'd0: y_avValue_rdata__h7836 = v_f_to_host_0$D_OUT;
      32'd1: y_avValue_rdata__h7836 = v_f_to_host_1$D_OUT;
      32'd2: y_avValue_rdata__h7836 = v_f_to_host_2$D_OUT;
      32'd3: y_avValue_rdata__h7836 = v_f_to_host_3$D_OUT;
      32'd4: y_avValue_rdata__h7836 = v_f_to_host_4$D_OUT;
      default: y_avValue_rdata__h7836 = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(x__h6918 or
	  v_f_from_host_0_countReg or
	  v_f_from_host_1_countReg or
	  v_f_from_host_2_countReg or
	  v_f_from_host_3_countReg or v_f_from_host_4_countReg)
  begin
    case (x__h6918)
      32'd0: x__h7988 = v_f_from_host_0_countReg;
      32'd1: x__h7988 = v_f_from_host_1_countReg;
      32'd2: x__h7988 = v_f_from_host_2_countReg;
      32'd3: x__h7988 = v_f_from_host_3_countReg;
      32'd4: x__h7988 = v_f_from_host_4_countReg;
      default: x__h7988 = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(x__h7130 or
	  v_f_to_host_0_countReg or
	  v_f_to_host_1_countReg or
	  v_f_to_host_2_countReg or
	  v_f_to_host_3_countReg or v_f_to_host_4_countReg)
  begin
    case (x__h7130)
      32'd0: x__h8027 = v_f_to_host_0_countReg;
      32'd1: x__h8027 = v_f_to_host_1_countReg;
      32'd2: x__h8027 = v_f_to_host_2_countReg;
      32'd3: x__h8027 = v_f_to_host_3_countReg;
      32'd4: x__h8027 = v_f_to_host_4_countReg;
      default: x__h8027 = 5'b01010 /* unspecified value */ ;
    endcase
  end
  always@(x__h5872 or
	  v_f_from_host_0$FULL_N or
	  v_f_from_host_1$FULL_N or
	  v_f_from_host_2$FULL_N or
	  v_f_from_host_3$FULL_N or v_f_from_host_4$FULL_N)
  begin
    case (x__h5872)
      32'd0:
	  SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 =
	      v_f_from_host_0$FULL_N;
      32'd1:
	  SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 =
	      v_f_from_host_1$FULL_N;
      32'd2:
	  SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 =
	      v_f_from_host_2$FULL_N;
      32'd3:
	  SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 =
	      v_f_from_host_3$FULL_N;
      32'd4:
	  SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 =
	      v_f_from_host_4$FULL_N;
      default: SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h7130 or
	  v_f_to_host_0_levelsValid or
	  v_f_to_host_1_levelsValid or
	  v_f_to_host_2_levelsValid or
	  v_f_to_host_3_levelsValid or v_f_to_host_4_levelsValid)
  begin
    case (x__h7130)
      32'd0:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 =
	      v_f_to_host_0_levelsValid;
      32'd1:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 =
	      v_f_to_host_1_levelsValid;
      32'd2:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 =
	      v_f_to_host_2_levelsValid;
      32'd3:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 =
	      v_f_to_host_3_levelsValid;
      32'd4:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 =
	      v_f_to_host_4_levelsValid;
      default: CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d258 =
		   1'd1;
    endcase
  end
  always@(x__h7130 or
	  v_f_to_host_0$EMPTY_N or
	  v_f_to_host_1$EMPTY_N or
	  v_f_to_host_2$EMPTY_N or
	  v_f_to_host_3$EMPTY_N or v_f_to_host_4$EMPTY_N)
  begin
    case (x__h7130)
      32'd0:
	  SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 =
	      v_f_to_host_0$EMPTY_N;
      32'd1:
	  SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 =
	      v_f_to_host_1$EMPTY_N;
      32'd2:
	  SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 =
	      v_f_to_host_2$EMPTY_N;
      32'd3:
	  SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 =
	      v_f_to_host_3$EMPTY_N;
      32'd4:
	  SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 =
	      v_f_to_host_4$EMPTY_N;
      default: SEL_ARR_v_f_to_host_0_notEmpty__35_v_f_to_host_ETC___d241 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(x__h7130 or
	  v_f_to_host_0$EMPTY_N or
	  v_f_to_host_1$EMPTY_N or
	  v_f_to_host_2$EMPTY_N or
	  v_f_to_host_3$EMPTY_N or v_f_to_host_4$EMPTY_N)
  begin
    case (x__h7130)
      32'd0:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 =
	      v_f_to_host_0$EMPTY_N;
      32'd1:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 =
	      v_f_to_host_1$EMPTY_N;
      32'd2:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 =
	      v_f_to_host_2$EMPTY_N;
      32'd3:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 =
	      v_f_to_host_3$EMPTY_N;
      32'd4:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 =
	      v_f_to_host_4$EMPTY_N;
      default: CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d249 =
		   1'd1;
    endcase
  end
  always@(x__h5872 or
	  v_f_from_host_0$FULL_N or
	  v_f_from_host_1$FULL_N or
	  v_f_from_host_2$FULL_N or
	  v_f_from_host_3$FULL_N or v_f_from_host_4$FULL_N)
  begin
    case (x__h5872)
      32'd0:
	  CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186 =
	      v_f_from_host_0$FULL_N;
      32'd1:
	  CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186 =
	      v_f_from_host_1$FULL_N;
      32'd2:
	  CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186 =
	      v_f_from_host_2$FULL_N;
      32'd3:
	  CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186 =
	      v_f_from_host_3$FULL_N;
      32'd4:
	  CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186 =
	      v_f_from_host_4$FULL_N;
      default: CASE_0_CONCAT_axi4L_S_xactor_f_wr_addr_first___ETC___d186 =
		   1'd1;
    endcase
  end
  always@(x__h6918 or
	  v_f_from_host_0_levelsValid or
	  v_f_from_host_1_levelsValid or
	  v_f_from_host_2_levelsValid or
	  v_f_from_host_3_levelsValid or v_f_from_host_4_levelsValid)
  begin
    case (x__h6918)
      32'd0:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 =
	      v_f_from_host_0_levelsValid;
      32'd1:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 =
	      v_f_from_host_1_levelsValid;
      32'd2:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 =
	      v_f_from_host_2_levelsValid;
      32'd3:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 =
	      v_f_from_host_3_levelsValid;
      32'd4:
	  CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 =
	      v_f_from_host_4_levelsValid;
      default: CASE_0_CONCAT_axi4L_S_xactor_f_rd_addr_first___ETC___d229 =
		   1'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        v_f_from_host_0_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_from_host_0_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_from_host_1_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_from_host_1_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_from_host_2_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_from_host_2_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_from_host_3_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_from_host_3_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_from_host_4_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_from_host_4_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_to_host_0_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_to_host_0_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_to_host_1_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_to_host_1_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_to_host_2_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_to_host_2_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_to_host_3_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_to_host_3_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
	v_f_to_host_4_countReg <= `BSV_ASSIGNMENT_DELAY 5'd0;
	v_f_to_host_4_levelsValid <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (v_f_from_host_0_countReg$EN)
	  v_f_from_host_0_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_0_countReg$D_IN;
	if (v_f_from_host_0_levelsValid$EN)
	  v_f_from_host_0_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_0_levelsValid$D_IN;
	if (v_f_from_host_1_countReg$EN)
	  v_f_from_host_1_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_1_countReg$D_IN;
	if (v_f_from_host_1_levelsValid$EN)
	  v_f_from_host_1_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_1_levelsValid$D_IN;
	if (v_f_from_host_2_countReg$EN)
	  v_f_from_host_2_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_2_countReg$D_IN;
	if (v_f_from_host_2_levelsValid$EN)
	  v_f_from_host_2_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_2_levelsValid$D_IN;
	if (v_f_from_host_3_countReg$EN)
	  v_f_from_host_3_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_3_countReg$D_IN;
	if (v_f_from_host_3_levelsValid$EN)
	  v_f_from_host_3_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_3_levelsValid$D_IN;
	if (v_f_from_host_4_countReg$EN)
	  v_f_from_host_4_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_4_countReg$D_IN;
	if (v_f_from_host_4_levelsValid$EN)
	  v_f_from_host_4_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_from_host_4_levelsValid$D_IN;
	if (v_f_to_host_0_countReg$EN)
	  v_f_to_host_0_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_0_countReg$D_IN;
	if (v_f_to_host_0_levelsValid$EN)
	  v_f_to_host_0_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_0_levelsValid$D_IN;
	if (v_f_to_host_1_countReg$EN)
	  v_f_to_host_1_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_1_countReg$D_IN;
	if (v_f_to_host_1_levelsValid$EN)
	  v_f_to_host_1_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_1_levelsValid$D_IN;
	if (v_f_to_host_2_countReg$EN)
	  v_f_to_host_2_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_2_countReg$D_IN;
	if (v_f_to_host_2_levelsValid$EN)
	  v_f_to_host_2_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_2_levelsValid$D_IN;
	if (v_f_to_host_3_countReg$EN)
	  v_f_to_host_3_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_3_countReg$D_IN;
	if (v_f_to_host_3_levelsValid$EN)
	  v_f_to_host_3_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_3_levelsValid$D_IN;
	if (v_f_to_host_4_countReg$EN)
	  v_f_to_host_4_countReg <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_4_countReg$D_IN;
	if (v_f_to_host_4_levelsValid$EN)
	  v_f_to_host_4_levelsValid <= `BSV_ASSIGNMENT_DELAY
	      v_f_to_host_4_levelsValid$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    v_f_from_host_0_countReg = 5'h0A;
    v_f_from_host_0_levelsValid = 1'h0;
    v_f_from_host_1_countReg = 5'h0A;
    v_f_from_host_1_levelsValid = 1'h0;
    v_f_from_host_2_countReg = 5'h0A;
    v_f_from_host_2_levelsValid = 1'h0;
    v_f_from_host_3_countReg = 5'h0A;
    v_f_from_host_3_levelsValid = 1'h0;
    v_f_from_host_4_countReg = 5'h0A;
    v_f_from_host_4_levelsValid = 1'h0;
    v_f_to_host_0_countReg = 5'h0A;
    v_f_to_host_0_levelsValid = 1'h0;
    v_f_to_host_1_countReg = 5'h0A;
    v_f_to_host_1_levelsValid = 1'h0;
    v_f_to_host_2_countReg = 5'h0A;
    v_f_to_host_2_levelsValid = 1'h0;
    v_f_to_host_3_countReg = 5'h0A;
    v_f_to_host_3_levelsValid = 1'h0;
    v_f_to_host_4_countReg = 5'h0A;
    v_f_to_host_4_levelsValid = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  !axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 &&
	  _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219 &&
	  axi4L_S_xactor_f_rd_addr$D_OUT[5:3] != 3'b100)
	$display("ERROR: unknown rd addr %0h",
		 axi4L_S_xactor_f_rd_addr$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  !axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 &&
	  _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219 &&
	  axi4L_S_xactor_f_rd_addr$D_OUT[5:3] != 3'b100)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  !axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 &&
	  _0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219 &&
	  axi4L_S_xactor_f_rd_addr$D_OUT[5:3] != 3'b100)
	$display("    Rule rl_AXI4L_rd");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_rd &&
	  (axi4L_S_xactor_f_rd_addr_first__12_BITS_34_TO__ETC___d214 ||
	   !_0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d219) &&
	  !_0_CONCAT_axi4L_S_xactor_f_rd_addr_first__12_BI_ETC___d233)
	$display("ERROR: %m.rl_AXI4L_rd: unknown read addr %0h",
		 axi4L_S_xactor_f_rd_addr$D_OUT[34:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	  _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	  !SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179)
	$display("ERROR: addr %0h data %0h; chan [%0d] overflow",
		 axi4L_S_xactor_f_wr_addr$D_OUT[34:3],
		 axi4L_S_xactor_f_wr_data$D_OUT[35:4],
		 x__h5872);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	  _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	  !SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179)
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  !axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 &&
	  _0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170 &&
	  !SEL_ARR_v_f_from_host_0_notFull__73_v_f_from_h_ETC___d179)
	$display("    Rule rl_AXI4L_wr");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  (axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 ||
	   !_0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170))
	$display("ERROR: addr %0h data %0h; unknown addr",
		 axi4L_S_xactor_f_wr_addr$D_OUT[34:3],
		 axi4L_S_xactor_f_wr_data$D_OUT[35:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  (axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 ||
	   !_0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170))
	$display("    %m");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_AXI4L_wr &&
	  (axi4L_S_xactor_f_wr_addr_first__64_BITS_34_TO__ETC___d166 ||
	   !_0_CONCAT_axi4L_S_xactor_f_wr_addr_first__64_BI_ETC___d170))
	$display("    Rule rl_AXI4L_wr");
  end
  // synopsys translate_on
endmodule  // mkAXI4L_Channels

