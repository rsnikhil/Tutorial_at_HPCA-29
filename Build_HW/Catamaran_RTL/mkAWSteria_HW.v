//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// host_AXI4_S_awready            O     1 reg
// host_AXI4_S_wready             O     1 reg
// host_AXI4_S_bvalid             O     1 reg
// host_AXI4_S_bid                O    16 reg
// host_AXI4_S_bresp              O     2 reg
// host_AXI4_S_arready            O     1 reg
// host_AXI4_S_rvalid             O     1 reg
// host_AXI4_S_rid                O    16 reg
// host_AXI4_S_rdata              O   512 reg
// host_AXI4_S_rresp              O     2 reg
// host_AXI4_S_rlast              O     1 reg
// host_AXI4L_S_awready           O     1 reg
// host_AXI4L_S_wready            O     1 reg
// host_AXI4L_S_bvalid            O     1 reg
// host_AXI4L_S_bresp             O     2 reg
// host_AXI4L_S_arready           O     1 reg
// host_AXI4L_S_rvalid            O     1 reg
// host_AXI4L_S_rresp             O     2 reg
// host_AXI4L_S_rdata             O    32 reg
// ddr_A_M_awvalid                O     1 reg
// ddr_A_M_awid                   O    16 reg
// ddr_A_M_awaddr                 O    64 reg
// ddr_A_M_awlen                  O     8 reg
// ddr_A_M_awsize                 O     3 reg
// ddr_A_M_awburst                O     2 reg
// ddr_A_M_awlock                 O     1 reg
// ddr_A_M_awcache                O     4 reg
// ddr_A_M_awprot                 O     3 reg
// ddr_A_M_awqos                  O     4 reg
// ddr_A_M_awregion               O     4 reg
// ddr_A_M_wvalid                 O     1 reg
// ddr_A_M_wdata                  O   512 reg
// ddr_A_M_wstrb                  O    64 reg
// ddr_A_M_wlast                  O     1 reg
// ddr_A_M_bready                 O     1 reg
// ddr_A_M_arvalid                O     1 reg
// ddr_A_M_arid                   O    16 reg
// ddr_A_M_araddr                 O    64 reg
// ddr_A_M_arlen                  O     8 reg
// ddr_A_M_arsize                 O     3 reg
// ddr_A_M_arburst                O     2 reg
// ddr_A_M_arlock                 O     1 reg
// ddr_A_M_arcache                O     4 reg
// ddr_A_M_arprot                 O     3 reg
// ddr_A_M_arqos                  O     4 reg
// ddr_A_M_arregion               O     4 reg
// ddr_A_M_rready                 O     1 reg
// ddr_B_M_awvalid                O     1 reg
// ddr_B_M_awid                   O    16 reg
// ddr_B_M_awaddr                 O    64 reg
// ddr_B_M_awlen                  O     8 reg
// ddr_B_M_awsize                 O     3 reg
// ddr_B_M_awburst                O     2 reg
// ddr_B_M_awlock                 O     1 reg
// ddr_B_M_awcache                O     4 reg
// ddr_B_M_awprot                 O     3 reg
// ddr_B_M_awqos                  O     4 reg
// ddr_B_M_awregion               O     4 reg
// ddr_B_M_wvalid                 O     1 reg
// ddr_B_M_wdata                  O   512 reg
// ddr_B_M_wstrb                  O    64 reg
// ddr_B_M_wlast                  O     1 reg
// ddr_B_M_bready                 O     1 reg
// ddr_B_M_arvalid                O     1 reg
// ddr_B_M_arid                   O    16 reg
// ddr_B_M_araddr                 O    64 reg
// ddr_B_M_arlen                  O     8 reg
// ddr_B_M_arsize                 O     3 reg
// ddr_B_M_arburst                O     2 reg
// ddr_B_M_arlock                 O     1 reg
// ddr_B_M_arcache                O     4 reg
// ddr_B_M_arprot                 O     3 reg
// ddr_B_M_arqos                  O     4 reg
// ddr_B_M_arregion               O     4 reg
// ddr_B_M_rready                 O     1 reg
// ddr_C_M_awvalid                O     1 reg
// ddr_C_M_awid                   O    16 reg
// ddr_C_M_awaddr                 O    64 reg
// ddr_C_M_awlen                  O     8 reg
// ddr_C_M_awsize                 O     3 reg
// ddr_C_M_awburst                O     2 reg
// ddr_C_M_awlock                 O     1 reg
// ddr_C_M_awcache                O     4 reg
// ddr_C_M_awprot                 O     3 reg
// ddr_C_M_awqos                  O     4 reg
// ddr_C_M_awregion               O     4 reg
// ddr_C_M_wvalid                 O     1 reg
// ddr_C_M_wdata                  O   512 reg
// ddr_C_M_wstrb                  O    64 reg
// ddr_C_M_wlast                  O     1 reg
// ddr_C_M_bready                 O     1 reg
// ddr_C_M_arvalid                O     1 reg
// ddr_C_M_arid                   O    16 reg
// ddr_C_M_araddr                 O    64 reg
// ddr_C_M_arlen                  O     8 reg
// ddr_C_M_arsize                 O     3 reg
// ddr_C_M_arburst                O     2 reg
// ddr_C_M_arlock                 O     1 reg
// ddr_C_M_arcache                O     4 reg
// ddr_C_M_arprot                 O     3 reg
// ddr_C_M_arqos                  O     4 reg
// ddr_C_M_arregion               O     4 reg
// ddr_C_M_rready                 O     1 reg
// ddr_D_M_awvalid                O     1 reg
// ddr_D_M_awid                   O    16 reg
// ddr_D_M_awaddr                 O    64 reg
// ddr_D_M_awlen                  O     8 reg
// ddr_D_M_awsize                 O     3 reg
// ddr_D_M_awburst                O     2 reg
// ddr_D_M_awlock                 O     1 reg
// ddr_D_M_awcache                O     4 reg
// ddr_D_M_awprot                 O     3 reg
// ddr_D_M_awqos                  O     4 reg
// ddr_D_M_awregion               O     4 reg
// ddr_D_M_wvalid                 O     1 reg
// ddr_D_M_wdata                  O   512 reg
// ddr_D_M_wstrb                  O    64 reg
// ddr_D_M_wlast                  O     1 reg
// ddr_D_M_bready                 O     1 reg
// ddr_D_M_arvalid                O     1 reg
// ddr_D_M_arid                   O    16 reg
// ddr_D_M_araddr                 O    64 reg
// ddr_D_M_arlen                  O     8 reg
// ddr_D_M_arsize                 O     3 reg
// ddr_D_M_arburst                O     2 reg
// ddr_D_M_arlock                 O     1 reg
// ddr_D_M_arcache                O     4 reg
// ddr_D_M_arprot                 O     3 reg
// ddr_D_M_arqos                  O     4 reg
// ddr_D_M_arregion               O     4 reg
// ddr_D_M_rready                 O     1 reg
// m_halted                       O     1 const
// CLK_clk1                       I     1 clock
// CLK_clk2                       I     1 clock
// CLK_clk3                       I     1 clock
// CLK_clk4                       I     1 clock
// CLK_clk5                       I     1 clock
// CLK                            I     1 clock
// RST_N                          I     1 reset
// host_AXI4_S_awvalid            I     1
// host_AXI4_S_awid               I    16 reg
// host_AXI4_S_awaddr             I    64 reg
// host_AXI4_S_awlen              I     8 reg
// host_AXI4_S_awsize             I     3 reg
// host_AXI4_S_awburst            I     2 reg
// host_AXI4_S_awlock             I     1 reg
// host_AXI4_S_awcache            I     4 reg
// host_AXI4_S_awprot             I     3 reg
// host_AXI4_S_awqos              I     4 reg
// host_AXI4_S_awregion           I     4 reg
// host_AXI4_S_wvalid             I     1
// host_AXI4_S_wdata              I   512 reg
// host_AXI4_S_wstrb              I    64 reg
// host_AXI4_S_wlast              I     1 reg
// host_AXI4_S_bready             I     1
// host_AXI4_S_arvalid            I     1
// host_AXI4_S_arid               I    16 reg
// host_AXI4_S_araddr             I    64 reg
// host_AXI4_S_arlen              I     8 reg
// host_AXI4_S_arsize             I     3 reg
// host_AXI4_S_arburst            I     2 reg
// host_AXI4_S_arlock             I     1 reg
// host_AXI4_S_arcache            I     4 reg
// host_AXI4_S_arprot             I     3 reg
// host_AXI4_S_arqos              I     4 reg
// host_AXI4_S_arregion           I     4 reg
// host_AXI4_S_rready             I     1
// host_AXI4L_S_awvalid           I     1
// host_AXI4L_S_awaddr            I    32 reg
// host_AXI4L_S_awprot            I     3 reg
// host_AXI4L_S_wvalid            I     1
// host_AXI4L_S_wdata             I    32 reg
// host_AXI4L_S_wstrb             I     4 reg
// host_AXI4L_S_bready            I     1
// host_AXI4L_S_arvalid           I     1
// host_AXI4L_S_araddr            I    32 reg
// host_AXI4L_S_arprot            I     3 reg
// host_AXI4L_S_rready            I     1
// ddr_A_M_awready                I     1
// ddr_A_M_wready                 I     1
// ddr_A_M_bvalid                 I     1
// ddr_A_M_bid                    I    16 reg
// ddr_A_M_bresp                  I     2 reg
// ddr_A_M_arready                I     1
// ddr_A_M_rvalid                 I     1
// ddr_A_M_rid                    I    16 reg
// ddr_A_M_rdata                  I   512 reg
// ddr_A_M_rresp                  I     2 reg
// ddr_A_M_rlast                  I     1 reg
// ddr_B_M_awready                I     1
// ddr_B_M_wready                 I     1
// ddr_B_M_bvalid                 I     1
// ddr_B_M_bid                    I    16 reg
// ddr_B_M_bresp                  I     2 reg
// ddr_B_M_arready                I     1
// ddr_B_M_rvalid                 I     1
// ddr_B_M_rid                    I    16 reg
// ddr_B_M_rdata                  I   512 reg
// ddr_B_M_rresp                  I     2 reg
// ddr_B_M_rlast                  I     1 reg
// ddr_C_M_awready                I     1
// ddr_C_M_wready                 I     1
// ddr_C_M_bvalid                 I     1
// ddr_C_M_bid                    I    16 reg
// ddr_C_M_bresp                  I     2 reg
// ddr_C_M_arready                I     1
// ddr_C_M_rvalid                 I     1
// ddr_C_M_rid                    I    16 reg
// ddr_C_M_rdata                  I   512 reg
// ddr_C_M_rresp                  I     2 reg
// ddr_C_M_rlast                  I     1 reg
// ddr_D_M_awready                I     1
// ddr_D_M_wready                 I     1
// ddr_D_M_bvalid                 I     1
// ddr_D_M_bid                    I    16 reg
// ddr_D_M_bresp                  I     2 reg
// ddr_D_M_arready                I     1
// ddr_D_M_rvalid                 I     1
// ddr_D_M_rid                    I    16 reg
// ddr_D_M_rdata                  I   512 reg
// ddr_D_M_rresp                  I     2 reg
// ddr_D_M_rlast                  I     1 reg
// m_env_ready_env_ready          I     1 reg
// m_glcount_glcount              I    64 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAWSteria_HW(CLK_clk1,
		     CLK_clk2,
		     CLK_clk3,
		     CLK_clk4,
		     CLK_clk5,
		     CLK,
		     RST_N,

		     host_AXI4_S_awvalid,
		     host_AXI4_S_awid,
		     host_AXI4_S_awaddr,
		     host_AXI4_S_awlen,
		     host_AXI4_S_awsize,
		     host_AXI4_S_awburst,
		     host_AXI4_S_awlock,
		     host_AXI4_S_awcache,
		     host_AXI4_S_awprot,
		     host_AXI4_S_awqos,
		     host_AXI4_S_awregion,

		     host_AXI4_S_awready,

		     host_AXI4_S_wvalid,
		     host_AXI4_S_wdata,
		     host_AXI4_S_wstrb,
		     host_AXI4_S_wlast,

		     host_AXI4_S_wready,

		     host_AXI4_S_bvalid,

		     host_AXI4_S_bid,

		     host_AXI4_S_bresp,

		     host_AXI4_S_bready,

		     host_AXI4_S_arvalid,
		     host_AXI4_S_arid,
		     host_AXI4_S_araddr,
		     host_AXI4_S_arlen,
		     host_AXI4_S_arsize,
		     host_AXI4_S_arburst,
		     host_AXI4_S_arlock,
		     host_AXI4_S_arcache,
		     host_AXI4_S_arprot,
		     host_AXI4_S_arqos,
		     host_AXI4_S_arregion,

		     host_AXI4_S_arready,

		     host_AXI4_S_rvalid,

		     host_AXI4_S_rid,

		     host_AXI4_S_rdata,

		     host_AXI4_S_rresp,

		     host_AXI4_S_rlast,

		     host_AXI4_S_rready,

		     host_AXI4L_S_awvalid,
		     host_AXI4L_S_awaddr,
		     host_AXI4L_S_awprot,

		     host_AXI4L_S_awready,

		     host_AXI4L_S_wvalid,
		     host_AXI4L_S_wdata,
		     host_AXI4L_S_wstrb,

		     host_AXI4L_S_wready,

		     host_AXI4L_S_bvalid,

		     host_AXI4L_S_bresp,

		     host_AXI4L_S_bready,

		     host_AXI4L_S_arvalid,
		     host_AXI4L_S_araddr,
		     host_AXI4L_S_arprot,

		     host_AXI4L_S_arready,

		     host_AXI4L_S_rvalid,

		     host_AXI4L_S_rresp,

		     host_AXI4L_S_rdata,

		     host_AXI4L_S_rready,

		     ddr_A_M_awvalid,

		     ddr_A_M_awid,

		     ddr_A_M_awaddr,

		     ddr_A_M_awlen,

		     ddr_A_M_awsize,

		     ddr_A_M_awburst,

		     ddr_A_M_awlock,

		     ddr_A_M_awcache,

		     ddr_A_M_awprot,

		     ddr_A_M_awqos,

		     ddr_A_M_awregion,

		     ddr_A_M_awready,

		     ddr_A_M_wvalid,

		     ddr_A_M_wdata,

		     ddr_A_M_wstrb,

		     ddr_A_M_wlast,

		     ddr_A_M_wready,

		     ddr_A_M_bvalid,
		     ddr_A_M_bid,
		     ddr_A_M_bresp,

		     ddr_A_M_bready,

		     ddr_A_M_arvalid,

		     ddr_A_M_arid,

		     ddr_A_M_araddr,

		     ddr_A_M_arlen,

		     ddr_A_M_arsize,

		     ddr_A_M_arburst,

		     ddr_A_M_arlock,

		     ddr_A_M_arcache,

		     ddr_A_M_arprot,

		     ddr_A_M_arqos,

		     ddr_A_M_arregion,

		     ddr_A_M_arready,

		     ddr_A_M_rvalid,
		     ddr_A_M_rid,
		     ddr_A_M_rdata,
		     ddr_A_M_rresp,
		     ddr_A_M_rlast,

		     ddr_A_M_rready,

		     ddr_B_M_awvalid,

		     ddr_B_M_awid,

		     ddr_B_M_awaddr,

		     ddr_B_M_awlen,

		     ddr_B_M_awsize,

		     ddr_B_M_awburst,

		     ddr_B_M_awlock,

		     ddr_B_M_awcache,

		     ddr_B_M_awprot,

		     ddr_B_M_awqos,

		     ddr_B_M_awregion,

		     ddr_B_M_awready,

		     ddr_B_M_wvalid,

		     ddr_B_M_wdata,

		     ddr_B_M_wstrb,

		     ddr_B_M_wlast,

		     ddr_B_M_wready,

		     ddr_B_M_bvalid,
		     ddr_B_M_bid,
		     ddr_B_M_bresp,

		     ddr_B_M_bready,

		     ddr_B_M_arvalid,

		     ddr_B_M_arid,

		     ddr_B_M_araddr,

		     ddr_B_M_arlen,

		     ddr_B_M_arsize,

		     ddr_B_M_arburst,

		     ddr_B_M_arlock,

		     ddr_B_M_arcache,

		     ddr_B_M_arprot,

		     ddr_B_M_arqos,

		     ddr_B_M_arregion,

		     ddr_B_M_arready,

		     ddr_B_M_rvalid,
		     ddr_B_M_rid,
		     ddr_B_M_rdata,
		     ddr_B_M_rresp,
		     ddr_B_M_rlast,

		     ddr_B_M_rready,

		     ddr_C_M_awvalid,

		     ddr_C_M_awid,

		     ddr_C_M_awaddr,

		     ddr_C_M_awlen,

		     ddr_C_M_awsize,

		     ddr_C_M_awburst,

		     ddr_C_M_awlock,

		     ddr_C_M_awcache,

		     ddr_C_M_awprot,

		     ddr_C_M_awqos,

		     ddr_C_M_awregion,

		     ddr_C_M_awready,

		     ddr_C_M_wvalid,

		     ddr_C_M_wdata,

		     ddr_C_M_wstrb,

		     ddr_C_M_wlast,

		     ddr_C_M_wready,

		     ddr_C_M_bvalid,
		     ddr_C_M_bid,
		     ddr_C_M_bresp,

		     ddr_C_M_bready,

		     ddr_C_M_arvalid,

		     ddr_C_M_arid,

		     ddr_C_M_araddr,

		     ddr_C_M_arlen,

		     ddr_C_M_arsize,

		     ddr_C_M_arburst,

		     ddr_C_M_arlock,

		     ddr_C_M_arcache,

		     ddr_C_M_arprot,

		     ddr_C_M_arqos,

		     ddr_C_M_arregion,

		     ddr_C_M_arready,

		     ddr_C_M_rvalid,
		     ddr_C_M_rid,
		     ddr_C_M_rdata,
		     ddr_C_M_rresp,
		     ddr_C_M_rlast,

		     ddr_C_M_rready,

		     ddr_D_M_awvalid,

		     ddr_D_M_awid,

		     ddr_D_M_awaddr,

		     ddr_D_M_awlen,

		     ddr_D_M_awsize,

		     ddr_D_M_awburst,

		     ddr_D_M_awlock,

		     ddr_D_M_awcache,

		     ddr_D_M_awprot,

		     ddr_D_M_awqos,

		     ddr_D_M_awregion,

		     ddr_D_M_awready,

		     ddr_D_M_wvalid,

		     ddr_D_M_wdata,

		     ddr_D_M_wstrb,

		     ddr_D_M_wlast,

		     ddr_D_M_wready,

		     ddr_D_M_bvalid,
		     ddr_D_M_bid,
		     ddr_D_M_bresp,

		     ddr_D_M_bready,

		     ddr_D_M_arvalid,

		     ddr_D_M_arid,

		     ddr_D_M_araddr,

		     ddr_D_M_arlen,

		     ddr_D_M_arsize,

		     ddr_D_M_arburst,

		     ddr_D_M_arlock,

		     ddr_D_M_arcache,

		     ddr_D_M_arprot,

		     ddr_D_M_arqos,

		     ddr_D_M_arregion,

		     ddr_D_M_arready,

		     ddr_D_M_rvalid,
		     ddr_D_M_rid,
		     ddr_D_M_rdata,
		     ddr_D_M_rresp,
		     ddr_D_M_rlast,

		     ddr_D_M_rready,

		     m_env_ready_env_ready,

		     m_halted,

		     m_glcount_glcount);
  input  CLK_clk1;
  input  CLK_clk2;
  input  CLK_clk3;
  input  CLK_clk4;
  input  CLK_clk5;
  input  CLK;
  input  RST_N;

  // action method host_AXI4_S_m_awvalid
  input  host_AXI4_S_awvalid;
  input  [15 : 0] host_AXI4_S_awid;
  input  [63 : 0] host_AXI4_S_awaddr;
  input  [7 : 0] host_AXI4_S_awlen;
  input  [2 : 0] host_AXI4_S_awsize;
  input  [1 : 0] host_AXI4_S_awburst;
  input  host_AXI4_S_awlock;
  input  [3 : 0] host_AXI4_S_awcache;
  input  [2 : 0] host_AXI4_S_awprot;
  input  [3 : 0] host_AXI4_S_awqos;
  input  [3 : 0] host_AXI4_S_awregion;

  // value method host_AXI4_S_m_awready
  output host_AXI4_S_awready;

  // action method host_AXI4_S_m_wvalid
  input  host_AXI4_S_wvalid;
  input  [511 : 0] host_AXI4_S_wdata;
  input  [63 : 0] host_AXI4_S_wstrb;
  input  host_AXI4_S_wlast;

  // value method host_AXI4_S_m_wready
  output host_AXI4_S_wready;

  // value method host_AXI4_S_m_bvalid
  output host_AXI4_S_bvalid;

  // value method host_AXI4_S_m_bid
  output [15 : 0] host_AXI4_S_bid;

  // value method host_AXI4_S_m_bresp
  output [1 : 0] host_AXI4_S_bresp;

  // value method host_AXI4_S_m_buser

  // action method host_AXI4_S_m_bready
  input  host_AXI4_S_bready;

  // action method host_AXI4_S_m_arvalid
  input  host_AXI4_S_arvalid;
  input  [15 : 0] host_AXI4_S_arid;
  input  [63 : 0] host_AXI4_S_araddr;
  input  [7 : 0] host_AXI4_S_arlen;
  input  [2 : 0] host_AXI4_S_arsize;
  input  [1 : 0] host_AXI4_S_arburst;
  input  host_AXI4_S_arlock;
  input  [3 : 0] host_AXI4_S_arcache;
  input  [2 : 0] host_AXI4_S_arprot;
  input  [3 : 0] host_AXI4_S_arqos;
  input  [3 : 0] host_AXI4_S_arregion;

  // value method host_AXI4_S_m_arready
  output host_AXI4_S_arready;

  // value method host_AXI4_S_m_rvalid
  output host_AXI4_S_rvalid;

  // value method host_AXI4_S_m_rid
  output [15 : 0] host_AXI4_S_rid;

  // value method host_AXI4_S_m_rdata
  output [511 : 0] host_AXI4_S_rdata;

  // value method host_AXI4_S_m_rresp
  output [1 : 0] host_AXI4_S_rresp;

  // value method host_AXI4_S_m_rlast
  output host_AXI4_S_rlast;

  // value method host_AXI4_S_m_ruser

  // action method host_AXI4_S_m_rready
  input  host_AXI4_S_rready;

  // action method host_AXI4L_S_m_awvalid
  input  host_AXI4L_S_awvalid;
  input  [31 : 0] host_AXI4L_S_awaddr;
  input  [2 : 0] host_AXI4L_S_awprot;

  // value method host_AXI4L_S_m_awready
  output host_AXI4L_S_awready;

  // action method host_AXI4L_S_m_wvalid
  input  host_AXI4L_S_wvalid;
  input  [31 : 0] host_AXI4L_S_wdata;
  input  [3 : 0] host_AXI4L_S_wstrb;

  // value method host_AXI4L_S_m_wready
  output host_AXI4L_S_wready;

  // value method host_AXI4L_S_m_bvalid
  output host_AXI4L_S_bvalid;

  // value method host_AXI4L_S_m_bresp
  output [1 : 0] host_AXI4L_S_bresp;

  // value method host_AXI4L_S_m_buser

  // action method host_AXI4L_S_m_bready
  input  host_AXI4L_S_bready;

  // action method host_AXI4L_S_m_arvalid
  input  host_AXI4L_S_arvalid;
  input  [31 : 0] host_AXI4L_S_araddr;
  input  [2 : 0] host_AXI4L_S_arprot;

  // value method host_AXI4L_S_m_arready
  output host_AXI4L_S_arready;

  // value method host_AXI4L_S_m_rvalid
  output host_AXI4L_S_rvalid;

  // value method host_AXI4L_S_m_rresp
  output [1 : 0] host_AXI4L_S_rresp;

  // value method host_AXI4L_S_m_rdata
  output [31 : 0] host_AXI4L_S_rdata;

  // value method host_AXI4L_S_m_ruser

  // action method host_AXI4L_S_m_rready
  input  host_AXI4L_S_rready;

  // value method ddr_A_M_m_awvalid
  output ddr_A_M_awvalid;

  // value method ddr_A_M_m_awid
  output [15 : 0] ddr_A_M_awid;

  // value method ddr_A_M_m_awaddr
  output [63 : 0] ddr_A_M_awaddr;

  // value method ddr_A_M_m_awlen
  output [7 : 0] ddr_A_M_awlen;

  // value method ddr_A_M_m_awsize
  output [2 : 0] ddr_A_M_awsize;

  // value method ddr_A_M_m_awburst
  output [1 : 0] ddr_A_M_awburst;

  // value method ddr_A_M_m_awlock
  output ddr_A_M_awlock;

  // value method ddr_A_M_m_awcache
  output [3 : 0] ddr_A_M_awcache;

  // value method ddr_A_M_m_awprot
  output [2 : 0] ddr_A_M_awprot;

  // value method ddr_A_M_m_awqos
  output [3 : 0] ddr_A_M_awqos;

  // value method ddr_A_M_m_awregion
  output [3 : 0] ddr_A_M_awregion;

  // value method ddr_A_M_m_awuser

  // action method ddr_A_M_m_awready
  input  ddr_A_M_awready;

  // value method ddr_A_M_m_wvalid
  output ddr_A_M_wvalid;

  // value method ddr_A_M_m_wdata
  output [511 : 0] ddr_A_M_wdata;

  // value method ddr_A_M_m_wstrb
  output [63 : 0] ddr_A_M_wstrb;

  // value method ddr_A_M_m_wlast
  output ddr_A_M_wlast;

  // value method ddr_A_M_m_wuser

  // action method ddr_A_M_m_wready
  input  ddr_A_M_wready;

  // action method ddr_A_M_m_bvalid
  input  ddr_A_M_bvalid;
  input  [15 : 0] ddr_A_M_bid;
  input  [1 : 0] ddr_A_M_bresp;

  // value method ddr_A_M_m_bready
  output ddr_A_M_bready;

  // value method ddr_A_M_m_arvalid
  output ddr_A_M_arvalid;

  // value method ddr_A_M_m_arid
  output [15 : 0] ddr_A_M_arid;

  // value method ddr_A_M_m_araddr
  output [63 : 0] ddr_A_M_araddr;

  // value method ddr_A_M_m_arlen
  output [7 : 0] ddr_A_M_arlen;

  // value method ddr_A_M_m_arsize
  output [2 : 0] ddr_A_M_arsize;

  // value method ddr_A_M_m_arburst
  output [1 : 0] ddr_A_M_arburst;

  // value method ddr_A_M_m_arlock
  output ddr_A_M_arlock;

  // value method ddr_A_M_m_arcache
  output [3 : 0] ddr_A_M_arcache;

  // value method ddr_A_M_m_arprot
  output [2 : 0] ddr_A_M_arprot;

  // value method ddr_A_M_m_arqos
  output [3 : 0] ddr_A_M_arqos;

  // value method ddr_A_M_m_arregion
  output [3 : 0] ddr_A_M_arregion;

  // value method ddr_A_M_m_aruser

  // action method ddr_A_M_m_arready
  input  ddr_A_M_arready;

  // action method ddr_A_M_m_rvalid
  input  ddr_A_M_rvalid;
  input  [15 : 0] ddr_A_M_rid;
  input  [511 : 0] ddr_A_M_rdata;
  input  [1 : 0] ddr_A_M_rresp;
  input  ddr_A_M_rlast;

  // value method ddr_A_M_m_rready
  output ddr_A_M_rready;

  // value method ddr_B_M_m_awvalid
  output ddr_B_M_awvalid;

  // value method ddr_B_M_m_awid
  output [15 : 0] ddr_B_M_awid;

  // value method ddr_B_M_m_awaddr
  output [63 : 0] ddr_B_M_awaddr;

  // value method ddr_B_M_m_awlen
  output [7 : 0] ddr_B_M_awlen;

  // value method ddr_B_M_m_awsize
  output [2 : 0] ddr_B_M_awsize;

  // value method ddr_B_M_m_awburst
  output [1 : 0] ddr_B_M_awburst;

  // value method ddr_B_M_m_awlock
  output ddr_B_M_awlock;

  // value method ddr_B_M_m_awcache
  output [3 : 0] ddr_B_M_awcache;

  // value method ddr_B_M_m_awprot
  output [2 : 0] ddr_B_M_awprot;

  // value method ddr_B_M_m_awqos
  output [3 : 0] ddr_B_M_awqos;

  // value method ddr_B_M_m_awregion
  output [3 : 0] ddr_B_M_awregion;

  // value method ddr_B_M_m_awuser

  // action method ddr_B_M_m_awready
  input  ddr_B_M_awready;

  // value method ddr_B_M_m_wvalid
  output ddr_B_M_wvalid;

  // value method ddr_B_M_m_wdata
  output [511 : 0] ddr_B_M_wdata;

  // value method ddr_B_M_m_wstrb
  output [63 : 0] ddr_B_M_wstrb;

  // value method ddr_B_M_m_wlast
  output ddr_B_M_wlast;

  // value method ddr_B_M_m_wuser

  // action method ddr_B_M_m_wready
  input  ddr_B_M_wready;

  // action method ddr_B_M_m_bvalid
  input  ddr_B_M_bvalid;
  input  [15 : 0] ddr_B_M_bid;
  input  [1 : 0] ddr_B_M_bresp;

  // value method ddr_B_M_m_bready
  output ddr_B_M_bready;

  // value method ddr_B_M_m_arvalid
  output ddr_B_M_arvalid;

  // value method ddr_B_M_m_arid
  output [15 : 0] ddr_B_M_arid;

  // value method ddr_B_M_m_araddr
  output [63 : 0] ddr_B_M_araddr;

  // value method ddr_B_M_m_arlen
  output [7 : 0] ddr_B_M_arlen;

  // value method ddr_B_M_m_arsize
  output [2 : 0] ddr_B_M_arsize;

  // value method ddr_B_M_m_arburst
  output [1 : 0] ddr_B_M_arburst;

  // value method ddr_B_M_m_arlock
  output ddr_B_M_arlock;

  // value method ddr_B_M_m_arcache
  output [3 : 0] ddr_B_M_arcache;

  // value method ddr_B_M_m_arprot
  output [2 : 0] ddr_B_M_arprot;

  // value method ddr_B_M_m_arqos
  output [3 : 0] ddr_B_M_arqos;

  // value method ddr_B_M_m_arregion
  output [3 : 0] ddr_B_M_arregion;

  // value method ddr_B_M_m_aruser

  // action method ddr_B_M_m_arready
  input  ddr_B_M_arready;

  // action method ddr_B_M_m_rvalid
  input  ddr_B_M_rvalid;
  input  [15 : 0] ddr_B_M_rid;
  input  [511 : 0] ddr_B_M_rdata;
  input  [1 : 0] ddr_B_M_rresp;
  input  ddr_B_M_rlast;

  // value method ddr_B_M_m_rready
  output ddr_B_M_rready;

  // value method ddr_C_M_m_awvalid
  output ddr_C_M_awvalid;

  // value method ddr_C_M_m_awid
  output [15 : 0] ddr_C_M_awid;

  // value method ddr_C_M_m_awaddr
  output [63 : 0] ddr_C_M_awaddr;

  // value method ddr_C_M_m_awlen
  output [7 : 0] ddr_C_M_awlen;

  // value method ddr_C_M_m_awsize
  output [2 : 0] ddr_C_M_awsize;

  // value method ddr_C_M_m_awburst
  output [1 : 0] ddr_C_M_awburst;

  // value method ddr_C_M_m_awlock
  output ddr_C_M_awlock;

  // value method ddr_C_M_m_awcache
  output [3 : 0] ddr_C_M_awcache;

  // value method ddr_C_M_m_awprot
  output [2 : 0] ddr_C_M_awprot;

  // value method ddr_C_M_m_awqos
  output [3 : 0] ddr_C_M_awqos;

  // value method ddr_C_M_m_awregion
  output [3 : 0] ddr_C_M_awregion;

  // value method ddr_C_M_m_awuser

  // action method ddr_C_M_m_awready
  input  ddr_C_M_awready;

  // value method ddr_C_M_m_wvalid
  output ddr_C_M_wvalid;

  // value method ddr_C_M_m_wdata
  output [511 : 0] ddr_C_M_wdata;

  // value method ddr_C_M_m_wstrb
  output [63 : 0] ddr_C_M_wstrb;

  // value method ddr_C_M_m_wlast
  output ddr_C_M_wlast;

  // value method ddr_C_M_m_wuser

  // action method ddr_C_M_m_wready
  input  ddr_C_M_wready;

  // action method ddr_C_M_m_bvalid
  input  ddr_C_M_bvalid;
  input  [15 : 0] ddr_C_M_bid;
  input  [1 : 0] ddr_C_M_bresp;

  // value method ddr_C_M_m_bready
  output ddr_C_M_bready;

  // value method ddr_C_M_m_arvalid
  output ddr_C_M_arvalid;

  // value method ddr_C_M_m_arid
  output [15 : 0] ddr_C_M_arid;

  // value method ddr_C_M_m_araddr
  output [63 : 0] ddr_C_M_araddr;

  // value method ddr_C_M_m_arlen
  output [7 : 0] ddr_C_M_arlen;

  // value method ddr_C_M_m_arsize
  output [2 : 0] ddr_C_M_arsize;

  // value method ddr_C_M_m_arburst
  output [1 : 0] ddr_C_M_arburst;

  // value method ddr_C_M_m_arlock
  output ddr_C_M_arlock;

  // value method ddr_C_M_m_arcache
  output [3 : 0] ddr_C_M_arcache;

  // value method ddr_C_M_m_arprot
  output [2 : 0] ddr_C_M_arprot;

  // value method ddr_C_M_m_arqos
  output [3 : 0] ddr_C_M_arqos;

  // value method ddr_C_M_m_arregion
  output [3 : 0] ddr_C_M_arregion;

  // value method ddr_C_M_m_aruser

  // action method ddr_C_M_m_arready
  input  ddr_C_M_arready;

  // action method ddr_C_M_m_rvalid
  input  ddr_C_M_rvalid;
  input  [15 : 0] ddr_C_M_rid;
  input  [511 : 0] ddr_C_M_rdata;
  input  [1 : 0] ddr_C_M_rresp;
  input  ddr_C_M_rlast;

  // value method ddr_C_M_m_rready
  output ddr_C_M_rready;

  // value method ddr_D_M_m_awvalid
  output ddr_D_M_awvalid;

  // value method ddr_D_M_m_awid
  output [15 : 0] ddr_D_M_awid;

  // value method ddr_D_M_m_awaddr
  output [63 : 0] ddr_D_M_awaddr;

  // value method ddr_D_M_m_awlen
  output [7 : 0] ddr_D_M_awlen;

  // value method ddr_D_M_m_awsize
  output [2 : 0] ddr_D_M_awsize;

  // value method ddr_D_M_m_awburst
  output [1 : 0] ddr_D_M_awburst;

  // value method ddr_D_M_m_awlock
  output ddr_D_M_awlock;

  // value method ddr_D_M_m_awcache
  output [3 : 0] ddr_D_M_awcache;

  // value method ddr_D_M_m_awprot
  output [2 : 0] ddr_D_M_awprot;

  // value method ddr_D_M_m_awqos
  output [3 : 0] ddr_D_M_awqos;

  // value method ddr_D_M_m_awregion
  output [3 : 0] ddr_D_M_awregion;

  // value method ddr_D_M_m_awuser

  // action method ddr_D_M_m_awready
  input  ddr_D_M_awready;

  // value method ddr_D_M_m_wvalid
  output ddr_D_M_wvalid;

  // value method ddr_D_M_m_wdata
  output [511 : 0] ddr_D_M_wdata;

  // value method ddr_D_M_m_wstrb
  output [63 : 0] ddr_D_M_wstrb;

  // value method ddr_D_M_m_wlast
  output ddr_D_M_wlast;

  // value method ddr_D_M_m_wuser

  // action method ddr_D_M_m_wready
  input  ddr_D_M_wready;

  // action method ddr_D_M_m_bvalid
  input  ddr_D_M_bvalid;
  input  [15 : 0] ddr_D_M_bid;
  input  [1 : 0] ddr_D_M_bresp;

  // value method ddr_D_M_m_bready
  output ddr_D_M_bready;

  // value method ddr_D_M_m_arvalid
  output ddr_D_M_arvalid;

  // value method ddr_D_M_m_arid
  output [15 : 0] ddr_D_M_arid;

  // value method ddr_D_M_m_araddr
  output [63 : 0] ddr_D_M_araddr;

  // value method ddr_D_M_m_arlen
  output [7 : 0] ddr_D_M_arlen;

  // value method ddr_D_M_m_arsize
  output [2 : 0] ddr_D_M_arsize;

  // value method ddr_D_M_m_arburst
  output [1 : 0] ddr_D_M_arburst;

  // value method ddr_D_M_m_arlock
  output ddr_D_M_arlock;

  // value method ddr_D_M_m_arcache
  output [3 : 0] ddr_D_M_arcache;

  // value method ddr_D_M_m_arprot
  output [2 : 0] ddr_D_M_arprot;

  // value method ddr_D_M_m_arqos
  output [3 : 0] ddr_D_M_arqos;

  // value method ddr_D_M_m_arregion
  output [3 : 0] ddr_D_M_arregion;

  // value method ddr_D_M_m_aruser

  // action method ddr_D_M_m_arready
  input  ddr_D_M_arready;

  // action method ddr_D_M_m_rvalid
  input  ddr_D_M_rvalid;
  input  [15 : 0] ddr_D_M_rid;
  input  [511 : 0] ddr_D_M_rdata;
  input  [1 : 0] ddr_D_M_rresp;
  input  ddr_D_M_rlast;

  // value method ddr_D_M_m_rready
  output ddr_D_M_rready;

  // action method m_env_ready
  input  m_env_ready_env_ready;

  // value method m_halted
  output m_halted;

  // action method m_glcount
  input  [63 : 0] m_glcount_glcount;

  // signals for module outputs
  wire [511 : 0] ddr_A_M_wdata,
		 ddr_B_M_wdata,
		 ddr_C_M_wdata,
		 ddr_D_M_wdata,
		 host_AXI4_S_rdata;
  wire [63 : 0] ddr_A_M_araddr,
		ddr_A_M_awaddr,
		ddr_A_M_wstrb,
		ddr_B_M_araddr,
		ddr_B_M_awaddr,
		ddr_B_M_wstrb,
		ddr_C_M_araddr,
		ddr_C_M_awaddr,
		ddr_C_M_wstrb,
		ddr_D_M_araddr,
		ddr_D_M_awaddr,
		ddr_D_M_wstrb;
  wire [31 : 0] host_AXI4L_S_rdata;
  wire [15 : 0] ddr_A_M_arid,
		ddr_A_M_awid,
		ddr_B_M_arid,
		ddr_B_M_awid,
		ddr_C_M_arid,
		ddr_C_M_awid,
		ddr_D_M_arid,
		ddr_D_M_awid,
		host_AXI4_S_bid,
		host_AXI4_S_rid;
  wire [7 : 0] ddr_A_M_arlen,
	       ddr_A_M_awlen,
	       ddr_B_M_arlen,
	       ddr_B_M_awlen,
	       ddr_C_M_arlen,
	       ddr_C_M_awlen,
	       ddr_D_M_arlen,
	       ddr_D_M_awlen;
  wire [3 : 0] ddr_A_M_arcache,
	       ddr_A_M_arqos,
	       ddr_A_M_arregion,
	       ddr_A_M_awcache,
	       ddr_A_M_awqos,
	       ddr_A_M_awregion,
	       ddr_B_M_arcache,
	       ddr_B_M_arqos,
	       ddr_B_M_arregion,
	       ddr_B_M_awcache,
	       ddr_B_M_awqos,
	       ddr_B_M_awregion,
	       ddr_C_M_arcache,
	       ddr_C_M_arqos,
	       ddr_C_M_arregion,
	       ddr_C_M_awcache,
	       ddr_C_M_awqos,
	       ddr_C_M_awregion,
	       ddr_D_M_arcache,
	       ddr_D_M_arqos,
	       ddr_D_M_arregion,
	       ddr_D_M_awcache,
	       ddr_D_M_awqos,
	       ddr_D_M_awregion;
  wire [2 : 0] ddr_A_M_arprot,
	       ddr_A_M_arsize,
	       ddr_A_M_awprot,
	       ddr_A_M_awsize,
	       ddr_B_M_arprot,
	       ddr_B_M_arsize,
	       ddr_B_M_awprot,
	       ddr_B_M_awsize,
	       ddr_C_M_arprot,
	       ddr_C_M_arsize,
	       ddr_C_M_awprot,
	       ddr_C_M_awsize,
	       ddr_D_M_arprot,
	       ddr_D_M_arsize,
	       ddr_D_M_awprot,
	       ddr_D_M_awsize;
  wire [1 : 0] ddr_A_M_arburst,
	       ddr_A_M_awburst,
	       ddr_B_M_arburst,
	       ddr_B_M_awburst,
	       ddr_C_M_arburst,
	       ddr_C_M_awburst,
	       ddr_D_M_arburst,
	       ddr_D_M_awburst,
	       host_AXI4L_S_bresp,
	       host_AXI4L_S_rresp,
	       host_AXI4_S_bresp,
	       host_AXI4_S_rresp;
  wire ddr_A_M_arlock,
       ddr_A_M_arvalid,
       ddr_A_M_awlock,
       ddr_A_M_awvalid,
       ddr_A_M_bready,
       ddr_A_M_rready,
       ddr_A_M_wlast,
       ddr_A_M_wvalid,
       ddr_B_M_arlock,
       ddr_B_M_arvalid,
       ddr_B_M_awlock,
       ddr_B_M_awvalid,
       ddr_B_M_bready,
       ddr_B_M_rready,
       ddr_B_M_wlast,
       ddr_B_M_wvalid,
       ddr_C_M_arlock,
       ddr_C_M_arvalid,
       ddr_C_M_awlock,
       ddr_C_M_awvalid,
       ddr_C_M_bready,
       ddr_C_M_rready,
       ddr_C_M_wlast,
       ddr_C_M_wvalid,
       ddr_D_M_arlock,
       ddr_D_M_arvalid,
       ddr_D_M_awlock,
       ddr_D_M_awvalid,
       ddr_D_M_bready,
       ddr_D_M_rready,
       ddr_D_M_wlast,
       ddr_D_M_wvalid,
       host_AXI4L_S_arready,
       host_AXI4L_S_awready,
       host_AXI4L_S_bvalid,
       host_AXI4L_S_rvalid,
       host_AXI4L_S_wready,
       host_AXI4_S_arready,
       host_AXI4_S_awready,
       host_AXI4_S_bvalid,
       host_AXI4_S_rlast,
       host_AXI4_S_rvalid,
       host_AXI4_S_wready,
       m_halted;

  // register rg_env_ready
  reg rg_env_ready;
  wire rg_env_ready$D_IN, rg_env_ready$EN;

  // ports of submodule awsteria_system
  wire [511 : 0] awsteria_system$ddr_A_M_rdata,
		 awsteria_system$ddr_A_M_wdata,
		 awsteria_system$ddr_B_M_rdata,
		 awsteria_system$ddr_B_M_wdata,
		 awsteria_system$ddr_C_M_rdata,
		 awsteria_system$ddr_C_M_wdata,
		 awsteria_system$ddr_D_M_rdata,
		 awsteria_system$ddr_D_M_wdata,
		 awsteria_system$host_AXI4_S_rdata,
		 awsteria_system$host_AXI4_S_wdata;
  wire [63 : 0] awsteria_system$ddr_A_M_araddr,
		awsteria_system$ddr_A_M_awaddr,
		awsteria_system$ddr_A_M_wstrb,
		awsteria_system$ddr_B_M_araddr,
		awsteria_system$ddr_B_M_awaddr,
		awsteria_system$ddr_B_M_wstrb,
		awsteria_system$ddr_C_M_araddr,
		awsteria_system$ddr_C_M_awaddr,
		awsteria_system$ddr_C_M_wstrb,
		awsteria_system$ddr_D_M_araddr,
		awsteria_system$ddr_D_M_awaddr,
		awsteria_system$ddr_D_M_wstrb,
		awsteria_system$host_AXI4_S_araddr,
		awsteria_system$host_AXI4_S_awaddr,
		awsteria_system$host_AXI4_S_wstrb,
		awsteria_system$m_glcount_glcount;
  wire [31 : 0] awsteria_system$host_AXI4L_S_araddr,
		awsteria_system$host_AXI4L_S_awaddr,
		awsteria_system$host_AXI4L_S_rdata,
		awsteria_system$host_AXI4L_S_wdata;
  wire [15 : 0] awsteria_system$ddr_A_M_arid,
		awsteria_system$ddr_A_M_awid,
		awsteria_system$ddr_A_M_bid,
		awsteria_system$ddr_A_M_rid,
		awsteria_system$ddr_B_M_arid,
		awsteria_system$ddr_B_M_awid,
		awsteria_system$ddr_B_M_bid,
		awsteria_system$ddr_B_M_rid,
		awsteria_system$ddr_C_M_arid,
		awsteria_system$ddr_C_M_awid,
		awsteria_system$ddr_C_M_bid,
		awsteria_system$ddr_C_M_rid,
		awsteria_system$ddr_D_M_arid,
		awsteria_system$ddr_D_M_awid,
		awsteria_system$ddr_D_M_bid,
		awsteria_system$ddr_D_M_rid,
		awsteria_system$host_AXI4_S_arid,
		awsteria_system$host_AXI4_S_awid,
		awsteria_system$host_AXI4_S_bid,
		awsteria_system$host_AXI4_S_rid;
  wire [7 : 0] awsteria_system$ddr_A_M_arlen,
	       awsteria_system$ddr_A_M_awlen,
	       awsteria_system$ddr_B_M_arlen,
	       awsteria_system$ddr_B_M_awlen,
	       awsteria_system$ddr_C_M_arlen,
	       awsteria_system$ddr_C_M_awlen,
	       awsteria_system$ddr_D_M_arlen,
	       awsteria_system$ddr_D_M_awlen,
	       awsteria_system$host_AXI4_S_arlen,
	       awsteria_system$host_AXI4_S_awlen;
  wire [3 : 0] awsteria_system$ddr_A_M_arcache,
	       awsteria_system$ddr_A_M_arqos,
	       awsteria_system$ddr_A_M_arregion,
	       awsteria_system$ddr_A_M_awcache,
	       awsteria_system$ddr_A_M_awqos,
	       awsteria_system$ddr_A_M_awregion,
	       awsteria_system$ddr_B_M_arcache,
	       awsteria_system$ddr_B_M_arqos,
	       awsteria_system$ddr_B_M_arregion,
	       awsteria_system$ddr_B_M_awcache,
	       awsteria_system$ddr_B_M_awqos,
	       awsteria_system$ddr_B_M_awregion,
	       awsteria_system$ddr_C_M_arcache,
	       awsteria_system$ddr_C_M_arqos,
	       awsteria_system$ddr_C_M_arregion,
	       awsteria_system$ddr_C_M_awcache,
	       awsteria_system$ddr_C_M_awqos,
	       awsteria_system$ddr_C_M_awregion,
	       awsteria_system$ddr_D_M_arcache,
	       awsteria_system$ddr_D_M_arqos,
	       awsteria_system$ddr_D_M_arregion,
	       awsteria_system$ddr_D_M_awcache,
	       awsteria_system$ddr_D_M_awqos,
	       awsteria_system$ddr_D_M_awregion,
	       awsteria_system$host_AXI4L_S_wstrb,
	       awsteria_system$host_AXI4_S_arcache,
	       awsteria_system$host_AXI4_S_arqos,
	       awsteria_system$host_AXI4_S_arregion,
	       awsteria_system$host_AXI4_S_awcache,
	       awsteria_system$host_AXI4_S_awqos,
	       awsteria_system$host_AXI4_S_awregion;
  wire [2 : 0] awsteria_system$ddr_A_M_arprot,
	       awsteria_system$ddr_A_M_arsize,
	       awsteria_system$ddr_A_M_awprot,
	       awsteria_system$ddr_A_M_awsize,
	       awsteria_system$ddr_B_M_arprot,
	       awsteria_system$ddr_B_M_arsize,
	       awsteria_system$ddr_B_M_awprot,
	       awsteria_system$ddr_B_M_awsize,
	       awsteria_system$ddr_C_M_arprot,
	       awsteria_system$ddr_C_M_arsize,
	       awsteria_system$ddr_C_M_awprot,
	       awsteria_system$ddr_C_M_awsize,
	       awsteria_system$ddr_D_M_arprot,
	       awsteria_system$ddr_D_M_arsize,
	       awsteria_system$ddr_D_M_awprot,
	       awsteria_system$ddr_D_M_awsize,
	       awsteria_system$host_AXI4L_S_arprot,
	       awsteria_system$host_AXI4L_S_awprot,
	       awsteria_system$host_AXI4_S_arprot,
	       awsteria_system$host_AXI4_S_arsize,
	       awsteria_system$host_AXI4_S_awprot,
	       awsteria_system$host_AXI4_S_awsize;
  wire [1 : 0] awsteria_system$ddr_A_M_arburst,
	       awsteria_system$ddr_A_M_awburst,
	       awsteria_system$ddr_A_M_bresp,
	       awsteria_system$ddr_A_M_rresp,
	       awsteria_system$ddr_B_M_arburst,
	       awsteria_system$ddr_B_M_awburst,
	       awsteria_system$ddr_B_M_bresp,
	       awsteria_system$ddr_B_M_rresp,
	       awsteria_system$ddr_C_M_arburst,
	       awsteria_system$ddr_C_M_awburst,
	       awsteria_system$ddr_C_M_bresp,
	       awsteria_system$ddr_C_M_rresp,
	       awsteria_system$ddr_D_M_arburst,
	       awsteria_system$ddr_D_M_awburst,
	       awsteria_system$ddr_D_M_bresp,
	       awsteria_system$ddr_D_M_rresp,
	       awsteria_system$host_AXI4L_S_bresp,
	       awsteria_system$host_AXI4L_S_rresp,
	       awsteria_system$host_AXI4_S_arburst,
	       awsteria_system$host_AXI4_S_awburst,
	       awsteria_system$host_AXI4_S_bresp,
	       awsteria_system$host_AXI4_S_rresp;
  wire awsteria_system$ddr_A_M_arlock,
       awsteria_system$ddr_A_M_arready,
       awsteria_system$ddr_A_M_arvalid,
       awsteria_system$ddr_A_M_awlock,
       awsteria_system$ddr_A_M_awready,
       awsteria_system$ddr_A_M_awvalid,
       awsteria_system$ddr_A_M_bready,
       awsteria_system$ddr_A_M_bvalid,
       awsteria_system$ddr_A_M_rlast,
       awsteria_system$ddr_A_M_rready,
       awsteria_system$ddr_A_M_rvalid,
       awsteria_system$ddr_A_M_wlast,
       awsteria_system$ddr_A_M_wready,
       awsteria_system$ddr_A_M_wvalid,
       awsteria_system$ddr_B_M_arlock,
       awsteria_system$ddr_B_M_arready,
       awsteria_system$ddr_B_M_arvalid,
       awsteria_system$ddr_B_M_awlock,
       awsteria_system$ddr_B_M_awready,
       awsteria_system$ddr_B_M_awvalid,
       awsteria_system$ddr_B_M_bready,
       awsteria_system$ddr_B_M_bvalid,
       awsteria_system$ddr_B_M_rlast,
       awsteria_system$ddr_B_M_rready,
       awsteria_system$ddr_B_M_rvalid,
       awsteria_system$ddr_B_M_wlast,
       awsteria_system$ddr_B_M_wready,
       awsteria_system$ddr_B_M_wvalid,
       awsteria_system$ddr_C_M_arlock,
       awsteria_system$ddr_C_M_arready,
       awsteria_system$ddr_C_M_arvalid,
       awsteria_system$ddr_C_M_awlock,
       awsteria_system$ddr_C_M_awready,
       awsteria_system$ddr_C_M_awvalid,
       awsteria_system$ddr_C_M_bready,
       awsteria_system$ddr_C_M_bvalid,
       awsteria_system$ddr_C_M_rlast,
       awsteria_system$ddr_C_M_rready,
       awsteria_system$ddr_C_M_rvalid,
       awsteria_system$ddr_C_M_wlast,
       awsteria_system$ddr_C_M_wready,
       awsteria_system$ddr_C_M_wvalid,
       awsteria_system$ddr_D_M_arlock,
       awsteria_system$ddr_D_M_arready,
       awsteria_system$ddr_D_M_arvalid,
       awsteria_system$ddr_D_M_awlock,
       awsteria_system$ddr_D_M_awready,
       awsteria_system$ddr_D_M_awvalid,
       awsteria_system$ddr_D_M_bready,
       awsteria_system$ddr_D_M_bvalid,
       awsteria_system$ddr_D_M_rlast,
       awsteria_system$ddr_D_M_rready,
       awsteria_system$ddr_D_M_rvalid,
       awsteria_system$ddr_D_M_wlast,
       awsteria_system$ddr_D_M_wready,
       awsteria_system$ddr_D_M_wvalid,
       awsteria_system$host_AXI4L_S_arready,
       awsteria_system$host_AXI4L_S_arvalid,
       awsteria_system$host_AXI4L_S_awready,
       awsteria_system$host_AXI4L_S_awvalid,
       awsteria_system$host_AXI4L_S_bready,
       awsteria_system$host_AXI4L_S_bvalid,
       awsteria_system$host_AXI4L_S_rready,
       awsteria_system$host_AXI4L_S_rvalid,
       awsteria_system$host_AXI4L_S_wready,
       awsteria_system$host_AXI4L_S_wvalid,
       awsteria_system$host_AXI4_S_arlock,
       awsteria_system$host_AXI4_S_arready,
       awsteria_system$host_AXI4_S_arvalid,
       awsteria_system$host_AXI4_S_awlock,
       awsteria_system$host_AXI4_S_awready,
       awsteria_system$host_AXI4_S_awvalid,
       awsteria_system$host_AXI4_S_bready,
       awsteria_system$host_AXI4_S_bvalid,
       awsteria_system$host_AXI4_S_rlast,
       awsteria_system$host_AXI4_S_rready,
       awsteria_system$host_AXI4_S_rvalid,
       awsteria_system$host_AXI4_S_wlast,
       awsteria_system$host_AXI4_S_wready,
       awsteria_system$host_AXI4_S_wvalid,
       awsteria_system$m_env_ready_env_ready,
       awsteria_system$m_halted;

  // ports of submodule axi4L_gate
  wire [31 : 0] axi4L_gate$axi4L_M_araddr,
		axi4L_gate$axi4L_M_awaddr,
		axi4L_gate$axi4L_M_rdata,
		axi4L_gate$axi4L_M_wdata,
		axi4L_gate$axi4L_S_araddr,
		axi4L_gate$axi4L_S_awaddr,
		axi4L_gate$axi4L_S_rdata,
		axi4L_gate$axi4L_S_wdata;
  wire [3 : 0] axi4L_gate$axi4L_M_wstrb, axi4L_gate$axi4L_S_wstrb;
  wire [2 : 0] axi4L_gate$axi4L_M_arprot,
	       axi4L_gate$axi4L_M_awprot,
	       axi4L_gate$axi4L_S_arprot,
	       axi4L_gate$axi4L_S_awprot;
  wire [1 : 0] axi4L_gate$axi4L_M_bresp,
	       axi4L_gate$axi4L_M_rresp,
	       axi4L_gate$axi4L_S_bresp,
	       axi4L_gate$axi4L_S_rresp;
  wire axi4L_gate$axi4L_M_arready,
       axi4L_gate$axi4L_M_arvalid,
       axi4L_gate$axi4L_M_awready,
       axi4L_gate$axi4L_M_awvalid,
       axi4L_gate$axi4L_M_bready,
       axi4L_gate$axi4L_M_bvalid,
       axi4L_gate$axi4L_M_rready,
       axi4L_gate$axi4L_M_rvalid,
       axi4L_gate$axi4L_M_wready,
       axi4L_gate$axi4L_M_wvalid,
       axi4L_gate$axi4L_S_arready,
       axi4L_gate$axi4L_S_arvalid,
       axi4L_gate$axi4L_S_awready,
       axi4L_gate$axi4L_S_awvalid,
       axi4L_gate$axi4L_S_bready,
       axi4L_gate$axi4L_S_bvalid,
       axi4L_gate$axi4L_S_rready,
       axi4L_gate$axi4L_S_rvalid,
       axi4L_gate$axi4L_S_wready,
       axi4L_gate$axi4L_S_wvalid,
       axi4L_gate$m_enable_enabled;

  // ports of submodule axi4L_switch
  wire [31 : 0] axi4L_switch$v_from_masters_0_araddr,
		axi4L_switch$v_from_masters_0_awaddr,
		axi4L_switch$v_from_masters_0_rdata,
		axi4L_switch$v_from_masters_0_wdata,
		axi4L_switch$v_to_slaves_0_araddr,
		axi4L_switch$v_to_slaves_0_awaddr,
		axi4L_switch$v_to_slaves_0_rdata,
		axi4L_switch$v_to_slaves_0_wdata,
		axi4L_switch$v_to_slaves_1_araddr,
		axi4L_switch$v_to_slaves_1_awaddr,
		axi4L_switch$v_to_slaves_1_rdata,
		axi4L_switch$v_to_slaves_1_wdata;
  wire [3 : 0] axi4L_switch$set_verbosity_verbosity,
	       axi4L_switch$v_from_masters_0_wstrb,
	       axi4L_switch$v_to_slaves_0_wstrb,
	       axi4L_switch$v_to_slaves_1_wstrb;
  wire [2 : 0] axi4L_switch$v_from_masters_0_arprot,
	       axi4L_switch$v_from_masters_0_awprot,
	       axi4L_switch$v_to_slaves_0_arprot,
	       axi4L_switch$v_to_slaves_0_awprot,
	       axi4L_switch$v_to_slaves_1_arprot,
	       axi4L_switch$v_to_slaves_1_awprot;
  wire [1 : 0] axi4L_switch$v_from_masters_0_bresp,
	       axi4L_switch$v_from_masters_0_rresp,
	       axi4L_switch$v_to_slaves_0_bresp,
	       axi4L_switch$v_to_slaves_0_rresp,
	       axi4L_switch$v_to_slaves_1_bresp,
	       axi4L_switch$v_to_slaves_1_rresp;
  wire axi4L_switch$EN_reset,
       axi4L_switch$EN_set_verbosity,
       axi4L_switch$v_from_masters_0_arready,
       axi4L_switch$v_from_masters_0_arvalid,
       axi4L_switch$v_from_masters_0_awready,
       axi4L_switch$v_from_masters_0_awvalid,
       axi4L_switch$v_from_masters_0_bready,
       axi4L_switch$v_from_masters_0_bvalid,
       axi4L_switch$v_from_masters_0_rready,
       axi4L_switch$v_from_masters_0_rvalid,
       axi4L_switch$v_from_masters_0_wready,
       axi4L_switch$v_from_masters_0_wvalid,
       axi4L_switch$v_to_slaves_0_arready,
       axi4L_switch$v_to_slaves_0_arvalid,
       axi4L_switch$v_to_slaves_0_awready,
       axi4L_switch$v_to_slaves_0_awvalid,
       axi4L_switch$v_to_slaves_0_bready,
       axi4L_switch$v_to_slaves_0_bvalid,
       axi4L_switch$v_to_slaves_0_rready,
       axi4L_switch$v_to_slaves_0_rvalid,
       axi4L_switch$v_to_slaves_0_wready,
       axi4L_switch$v_to_slaves_0_wvalid,
       axi4L_switch$v_to_slaves_1_arready,
       axi4L_switch$v_to_slaves_1_arvalid,
       axi4L_switch$v_to_slaves_1_awready,
       axi4L_switch$v_to_slaves_1_awvalid,
       axi4L_switch$v_to_slaves_1_bready,
       axi4L_switch$v_to_slaves_1_bvalid,
       axi4L_switch$v_to_slaves_1_rready,
       axi4L_switch$v_to_slaves_1_rvalid,
       axi4L_switch$v_to_slaves_1_wready,
       axi4L_switch$v_to_slaves_1_wvalid;

  // ports of submodule axi4_gate
  wire [511 : 0] axi4_gate$axi4_M_rdata,
		 axi4_gate$axi4_M_wdata,
		 axi4_gate$axi4_S_rdata,
		 axi4_gate$axi4_S_wdata;
  wire [63 : 0] axi4_gate$axi4_M_araddr,
		axi4_gate$axi4_M_awaddr,
		axi4_gate$axi4_M_wstrb,
		axi4_gate$axi4_S_araddr,
		axi4_gate$axi4_S_awaddr,
		axi4_gate$axi4_S_wstrb;
  wire [15 : 0] axi4_gate$axi4_M_arid,
		axi4_gate$axi4_M_awid,
		axi4_gate$axi4_M_bid,
		axi4_gate$axi4_M_rid,
		axi4_gate$axi4_S_arid,
		axi4_gate$axi4_S_awid,
		axi4_gate$axi4_S_bid,
		axi4_gate$axi4_S_rid;
  wire [7 : 0] axi4_gate$axi4_M_arlen,
	       axi4_gate$axi4_M_awlen,
	       axi4_gate$axi4_S_arlen,
	       axi4_gate$axi4_S_awlen;
  wire [3 : 0] axi4_gate$axi4_M_arcache,
	       axi4_gate$axi4_M_arqos,
	       axi4_gate$axi4_M_arregion,
	       axi4_gate$axi4_M_awcache,
	       axi4_gate$axi4_M_awqos,
	       axi4_gate$axi4_M_awregion,
	       axi4_gate$axi4_S_arcache,
	       axi4_gate$axi4_S_arqos,
	       axi4_gate$axi4_S_arregion,
	       axi4_gate$axi4_S_awcache,
	       axi4_gate$axi4_S_awqos,
	       axi4_gate$axi4_S_awregion;
  wire [2 : 0] axi4_gate$axi4_M_arprot,
	       axi4_gate$axi4_M_arsize,
	       axi4_gate$axi4_M_awprot,
	       axi4_gate$axi4_M_awsize,
	       axi4_gate$axi4_S_arprot,
	       axi4_gate$axi4_S_arsize,
	       axi4_gate$axi4_S_awprot,
	       axi4_gate$axi4_S_awsize;
  wire [1 : 0] axi4_gate$axi4_M_arburst,
	       axi4_gate$axi4_M_awburst,
	       axi4_gate$axi4_M_bresp,
	       axi4_gate$axi4_M_rresp,
	       axi4_gate$axi4_S_arburst,
	       axi4_gate$axi4_S_awburst,
	       axi4_gate$axi4_S_bresp,
	       axi4_gate$axi4_S_rresp;
  wire axi4_gate$axi4_M_arlock,
       axi4_gate$axi4_M_arready,
       axi4_gate$axi4_M_arvalid,
       axi4_gate$axi4_M_awlock,
       axi4_gate$axi4_M_awready,
       axi4_gate$axi4_M_awvalid,
       axi4_gate$axi4_M_bready,
       axi4_gate$axi4_M_bvalid,
       axi4_gate$axi4_M_rlast,
       axi4_gate$axi4_M_rready,
       axi4_gate$axi4_M_rvalid,
       axi4_gate$axi4_M_wlast,
       axi4_gate$axi4_M_wready,
       axi4_gate$axi4_M_wvalid,
       axi4_gate$axi4_S_arlock,
       axi4_gate$axi4_S_arready,
       axi4_gate$axi4_S_arvalid,
       axi4_gate$axi4_S_awlock,
       axi4_gate$axi4_S_awready,
       axi4_gate$axi4_S_awvalid,
       axi4_gate$axi4_S_bready,
       axi4_gate$axi4_S_bvalid,
       axi4_gate$axi4_S_rlast,
       axi4_gate$axi4_S_rready,
       axi4_gate$axi4_S_rvalid,
       axi4_gate$axi4_S_wlast,
       axi4_gate$axi4_S_wready,
       axi4_gate$axi4_S_wvalid,
       axi4_gate$m_enable_enabled;

  // ports of submodule drm
  wire [31 : 0] drm$axi4L_S_araddr,
		drm$axi4L_S_awaddr,
		drm$axi4L_S_rdata,
		drm$axi4L_S_wdata;
  wire [3 : 0] drm$axi4L_S_wstrb;
  wire [2 : 0] drm$axi4L_S_arprot, drm$axi4L_S_awprot;
  wire [1 : 0] drm$axi4L_S_bresp, drm$axi4L_S_rresp;
  wire drm$axi4L_S_arready,
       drm$axi4L_S_arvalid,
       drm$axi4L_S_awready,
       drm$axi4L_S_awvalid,
       drm$axi4L_S_bready,
       drm$axi4L_S_bvalid,
       drm$axi4L_S_rready,
       drm$axi4L_S_rvalid,
       drm$axi4L_S_wready,
       drm$axi4L_S_wvalid,
       drm$ip_enable;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_drm_control,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_addr_channel_2,
       CAN_FIRE_RL_rl_rd_addr_channel_3,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel_2,
       CAN_FIRE_RL_rl_rd_data_channel_3,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel_2,
       CAN_FIRE_RL_rl_wr_addr_channel_3,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel_2,
       CAN_FIRE_RL_rl_wr_data_channel_3,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel_2,
       CAN_FIRE_RL_rl_wr_response_channel_3,
       CAN_FIRE_ddr_A_M_m_arready,
       CAN_FIRE_ddr_A_M_m_awready,
       CAN_FIRE_ddr_A_M_m_bvalid,
       CAN_FIRE_ddr_A_M_m_rvalid,
       CAN_FIRE_ddr_A_M_m_wready,
       CAN_FIRE_ddr_B_M_m_arready,
       CAN_FIRE_ddr_B_M_m_awready,
       CAN_FIRE_ddr_B_M_m_bvalid,
       CAN_FIRE_ddr_B_M_m_rvalid,
       CAN_FIRE_ddr_B_M_m_wready,
       CAN_FIRE_ddr_C_M_m_arready,
       CAN_FIRE_ddr_C_M_m_awready,
       CAN_FIRE_ddr_C_M_m_bvalid,
       CAN_FIRE_ddr_C_M_m_rvalid,
       CAN_FIRE_ddr_C_M_m_wready,
       CAN_FIRE_ddr_D_M_m_arready,
       CAN_FIRE_ddr_D_M_m_awready,
       CAN_FIRE_ddr_D_M_m_bvalid,
       CAN_FIRE_ddr_D_M_m_rvalid,
       CAN_FIRE_ddr_D_M_m_wready,
       CAN_FIRE_host_AXI4L_S_m_arvalid,
       CAN_FIRE_host_AXI4L_S_m_awvalid,
       CAN_FIRE_host_AXI4L_S_m_bready,
       CAN_FIRE_host_AXI4L_S_m_rready,
       CAN_FIRE_host_AXI4L_S_m_wvalid,
       CAN_FIRE_host_AXI4_S_m_arvalid,
       CAN_FIRE_host_AXI4_S_m_awvalid,
       CAN_FIRE_host_AXI4_S_m_bready,
       CAN_FIRE_host_AXI4_S_m_rready,
       CAN_FIRE_host_AXI4_S_m_wvalid,
       CAN_FIRE_m_env_ready,
       CAN_FIRE_m_glcount,
       WILL_FIRE_RL_rl_drm_control,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_addr_channel_2,
       WILL_FIRE_RL_rl_rd_addr_channel_3,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel_2,
       WILL_FIRE_RL_rl_rd_data_channel_3,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel_2,
       WILL_FIRE_RL_rl_wr_addr_channel_3,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel_2,
       WILL_FIRE_RL_rl_wr_data_channel_3,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel_2,
       WILL_FIRE_RL_rl_wr_response_channel_3,
       WILL_FIRE_ddr_A_M_m_arready,
       WILL_FIRE_ddr_A_M_m_awready,
       WILL_FIRE_ddr_A_M_m_bvalid,
       WILL_FIRE_ddr_A_M_m_rvalid,
       WILL_FIRE_ddr_A_M_m_wready,
       WILL_FIRE_ddr_B_M_m_arready,
       WILL_FIRE_ddr_B_M_m_awready,
       WILL_FIRE_ddr_B_M_m_bvalid,
       WILL_FIRE_ddr_B_M_m_rvalid,
       WILL_FIRE_ddr_B_M_m_wready,
       WILL_FIRE_ddr_C_M_m_arready,
       WILL_FIRE_ddr_C_M_m_awready,
       WILL_FIRE_ddr_C_M_m_bvalid,
       WILL_FIRE_ddr_C_M_m_rvalid,
       WILL_FIRE_ddr_C_M_m_wready,
       WILL_FIRE_ddr_D_M_m_arready,
       WILL_FIRE_ddr_D_M_m_awready,
       WILL_FIRE_ddr_D_M_m_bvalid,
       WILL_FIRE_ddr_D_M_m_rvalid,
       WILL_FIRE_ddr_D_M_m_wready,
       WILL_FIRE_host_AXI4L_S_m_arvalid,
       WILL_FIRE_host_AXI4L_S_m_awvalid,
       WILL_FIRE_host_AXI4L_S_m_bready,
       WILL_FIRE_host_AXI4L_S_m_rready,
       WILL_FIRE_host_AXI4L_S_m_wvalid,
       WILL_FIRE_host_AXI4_S_m_arvalid,
       WILL_FIRE_host_AXI4_S_m_awvalid,
       WILL_FIRE_host_AXI4_S_m_bready,
       WILL_FIRE_host_AXI4_S_m_rready,
       WILL_FIRE_host_AXI4_S_m_wvalid,
       WILL_FIRE_m_env_ready,
       WILL_FIRE_m_glcount;

  // action method host_AXI4_S_m_awvalid
  assign CAN_FIRE_host_AXI4_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_awvalid = 1'd1 ;

  // value method host_AXI4_S_m_awready
  assign host_AXI4_S_awready = axi4_gate$axi4_S_awready ;

  // action method host_AXI4_S_m_wvalid
  assign CAN_FIRE_host_AXI4_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_wvalid = 1'd1 ;

  // value method host_AXI4_S_m_wready
  assign host_AXI4_S_wready = axi4_gate$axi4_S_wready ;

  // value method host_AXI4_S_m_bvalid
  assign host_AXI4_S_bvalid = axi4_gate$axi4_S_bvalid ;

  // value method host_AXI4_S_m_bid
  assign host_AXI4_S_bid = axi4_gate$axi4_S_bid ;

  // value method host_AXI4_S_m_bresp
  assign host_AXI4_S_bresp = axi4_gate$axi4_S_bresp ;

  // action method host_AXI4_S_m_bready
  assign CAN_FIRE_host_AXI4_S_m_bready = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_bready = 1'd1 ;

  // action method host_AXI4_S_m_arvalid
  assign CAN_FIRE_host_AXI4_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_arvalid = 1'd1 ;

  // value method host_AXI4_S_m_arready
  assign host_AXI4_S_arready = axi4_gate$axi4_S_arready ;

  // value method host_AXI4_S_m_rvalid
  assign host_AXI4_S_rvalid = axi4_gate$axi4_S_rvalid ;

  // value method host_AXI4_S_m_rid
  assign host_AXI4_S_rid = axi4_gate$axi4_S_rid ;

  // value method host_AXI4_S_m_rdata
  assign host_AXI4_S_rdata = axi4_gate$axi4_S_rdata ;

  // value method host_AXI4_S_m_rresp
  assign host_AXI4_S_rresp = axi4_gate$axi4_S_rresp ;

  // value method host_AXI4_S_m_rlast
  assign host_AXI4_S_rlast = axi4_gate$axi4_S_rlast ;

  // action method host_AXI4_S_m_rready
  assign CAN_FIRE_host_AXI4_S_m_rready = 1'd1 ;
  assign WILL_FIRE_host_AXI4_S_m_rready = 1'd1 ;

  // action method host_AXI4L_S_m_awvalid
  assign CAN_FIRE_host_AXI4L_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_awvalid = 1'd1 ;

  // value method host_AXI4L_S_m_awready
  assign host_AXI4L_S_awready = axi4L_switch$v_from_masters_0_awready ;

  // action method host_AXI4L_S_m_wvalid
  assign CAN_FIRE_host_AXI4L_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_wvalid = 1'd1 ;

  // value method host_AXI4L_S_m_wready
  assign host_AXI4L_S_wready = axi4L_switch$v_from_masters_0_wready ;

  // value method host_AXI4L_S_m_bvalid
  assign host_AXI4L_S_bvalid = axi4L_switch$v_from_masters_0_bvalid ;

  // value method host_AXI4L_S_m_bresp
  assign host_AXI4L_S_bresp = axi4L_switch$v_from_masters_0_bresp ;

  // action method host_AXI4L_S_m_bready
  assign CAN_FIRE_host_AXI4L_S_m_bready = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_bready = 1'd1 ;

  // action method host_AXI4L_S_m_arvalid
  assign CAN_FIRE_host_AXI4L_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_arvalid = 1'd1 ;

  // value method host_AXI4L_S_m_arready
  assign host_AXI4L_S_arready = axi4L_switch$v_from_masters_0_arready ;

  // value method host_AXI4L_S_m_rvalid
  assign host_AXI4L_S_rvalid = axi4L_switch$v_from_masters_0_rvalid ;

  // value method host_AXI4L_S_m_rresp
  assign host_AXI4L_S_rresp = axi4L_switch$v_from_masters_0_rresp ;

  // value method host_AXI4L_S_m_rdata
  assign host_AXI4L_S_rdata = axi4L_switch$v_from_masters_0_rdata ;

  // action method host_AXI4L_S_m_rready
  assign CAN_FIRE_host_AXI4L_S_m_rready = 1'd1 ;
  assign WILL_FIRE_host_AXI4L_S_m_rready = 1'd1 ;

  // value method ddr_A_M_m_awvalid
  assign ddr_A_M_awvalid = awsteria_system$ddr_A_M_awvalid ;

  // value method ddr_A_M_m_awid
  assign ddr_A_M_awid = awsteria_system$ddr_A_M_awid ;

  // value method ddr_A_M_m_awaddr
  assign ddr_A_M_awaddr = awsteria_system$ddr_A_M_awaddr ;

  // value method ddr_A_M_m_awlen
  assign ddr_A_M_awlen = awsteria_system$ddr_A_M_awlen ;

  // value method ddr_A_M_m_awsize
  assign ddr_A_M_awsize = awsteria_system$ddr_A_M_awsize ;

  // value method ddr_A_M_m_awburst
  assign ddr_A_M_awburst = awsteria_system$ddr_A_M_awburst ;

  // value method ddr_A_M_m_awlock
  assign ddr_A_M_awlock = awsteria_system$ddr_A_M_awlock ;

  // value method ddr_A_M_m_awcache
  assign ddr_A_M_awcache = awsteria_system$ddr_A_M_awcache ;

  // value method ddr_A_M_m_awprot
  assign ddr_A_M_awprot = awsteria_system$ddr_A_M_awprot ;

  // value method ddr_A_M_m_awqos
  assign ddr_A_M_awqos = awsteria_system$ddr_A_M_awqos ;

  // value method ddr_A_M_m_awregion
  assign ddr_A_M_awregion = awsteria_system$ddr_A_M_awregion ;

  // action method ddr_A_M_m_awready
  assign CAN_FIRE_ddr_A_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr_A_M_m_awready = 1'd1 ;

  // value method ddr_A_M_m_wvalid
  assign ddr_A_M_wvalid = awsteria_system$ddr_A_M_wvalid ;

  // value method ddr_A_M_m_wdata
  assign ddr_A_M_wdata = awsteria_system$ddr_A_M_wdata ;

  // value method ddr_A_M_m_wstrb
  assign ddr_A_M_wstrb = awsteria_system$ddr_A_M_wstrb ;

  // value method ddr_A_M_m_wlast
  assign ddr_A_M_wlast = awsteria_system$ddr_A_M_wlast ;

  // action method ddr_A_M_m_wready
  assign CAN_FIRE_ddr_A_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr_A_M_m_wready = 1'd1 ;

  // action method ddr_A_M_m_bvalid
  assign CAN_FIRE_ddr_A_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr_A_M_m_bvalid = 1'd1 ;

  // value method ddr_A_M_m_bready
  assign ddr_A_M_bready = awsteria_system$ddr_A_M_bready ;

  // value method ddr_A_M_m_arvalid
  assign ddr_A_M_arvalid = awsteria_system$ddr_A_M_arvalid ;

  // value method ddr_A_M_m_arid
  assign ddr_A_M_arid = awsteria_system$ddr_A_M_arid ;

  // value method ddr_A_M_m_araddr
  assign ddr_A_M_araddr = awsteria_system$ddr_A_M_araddr ;

  // value method ddr_A_M_m_arlen
  assign ddr_A_M_arlen = awsteria_system$ddr_A_M_arlen ;

  // value method ddr_A_M_m_arsize
  assign ddr_A_M_arsize = awsteria_system$ddr_A_M_arsize ;

  // value method ddr_A_M_m_arburst
  assign ddr_A_M_arburst = awsteria_system$ddr_A_M_arburst ;

  // value method ddr_A_M_m_arlock
  assign ddr_A_M_arlock = awsteria_system$ddr_A_M_arlock ;

  // value method ddr_A_M_m_arcache
  assign ddr_A_M_arcache = awsteria_system$ddr_A_M_arcache ;

  // value method ddr_A_M_m_arprot
  assign ddr_A_M_arprot = awsteria_system$ddr_A_M_arprot ;

  // value method ddr_A_M_m_arqos
  assign ddr_A_M_arqos = awsteria_system$ddr_A_M_arqos ;

  // value method ddr_A_M_m_arregion
  assign ddr_A_M_arregion = awsteria_system$ddr_A_M_arregion ;

  // action method ddr_A_M_m_arready
  assign CAN_FIRE_ddr_A_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr_A_M_m_arready = 1'd1 ;

  // action method ddr_A_M_m_rvalid
  assign CAN_FIRE_ddr_A_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr_A_M_m_rvalid = 1'd1 ;

  // value method ddr_A_M_m_rready
  assign ddr_A_M_rready = awsteria_system$ddr_A_M_rready ;

  // value method ddr_B_M_m_awvalid
  assign ddr_B_M_awvalid = awsteria_system$ddr_B_M_awvalid ;

  // value method ddr_B_M_m_awid
  assign ddr_B_M_awid = awsteria_system$ddr_B_M_awid ;

  // value method ddr_B_M_m_awaddr
  assign ddr_B_M_awaddr = awsteria_system$ddr_B_M_awaddr ;

  // value method ddr_B_M_m_awlen
  assign ddr_B_M_awlen = awsteria_system$ddr_B_M_awlen ;

  // value method ddr_B_M_m_awsize
  assign ddr_B_M_awsize = awsteria_system$ddr_B_M_awsize ;

  // value method ddr_B_M_m_awburst
  assign ddr_B_M_awburst = awsteria_system$ddr_B_M_awburst ;

  // value method ddr_B_M_m_awlock
  assign ddr_B_M_awlock = awsteria_system$ddr_B_M_awlock ;

  // value method ddr_B_M_m_awcache
  assign ddr_B_M_awcache = awsteria_system$ddr_B_M_awcache ;

  // value method ddr_B_M_m_awprot
  assign ddr_B_M_awprot = awsteria_system$ddr_B_M_awprot ;

  // value method ddr_B_M_m_awqos
  assign ddr_B_M_awqos = awsteria_system$ddr_B_M_awqos ;

  // value method ddr_B_M_m_awregion
  assign ddr_B_M_awregion = awsteria_system$ddr_B_M_awregion ;

  // action method ddr_B_M_m_awready
  assign CAN_FIRE_ddr_B_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr_B_M_m_awready = 1'd1 ;

  // value method ddr_B_M_m_wvalid
  assign ddr_B_M_wvalid = awsteria_system$ddr_B_M_wvalid ;

  // value method ddr_B_M_m_wdata
  assign ddr_B_M_wdata = awsteria_system$ddr_B_M_wdata ;

  // value method ddr_B_M_m_wstrb
  assign ddr_B_M_wstrb = awsteria_system$ddr_B_M_wstrb ;

  // value method ddr_B_M_m_wlast
  assign ddr_B_M_wlast = awsteria_system$ddr_B_M_wlast ;

  // action method ddr_B_M_m_wready
  assign CAN_FIRE_ddr_B_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr_B_M_m_wready = 1'd1 ;

  // action method ddr_B_M_m_bvalid
  assign CAN_FIRE_ddr_B_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr_B_M_m_bvalid = 1'd1 ;

  // value method ddr_B_M_m_bready
  assign ddr_B_M_bready = awsteria_system$ddr_B_M_bready ;

  // value method ddr_B_M_m_arvalid
  assign ddr_B_M_arvalid = awsteria_system$ddr_B_M_arvalid ;

  // value method ddr_B_M_m_arid
  assign ddr_B_M_arid = awsteria_system$ddr_B_M_arid ;

  // value method ddr_B_M_m_araddr
  assign ddr_B_M_araddr = awsteria_system$ddr_B_M_araddr ;

  // value method ddr_B_M_m_arlen
  assign ddr_B_M_arlen = awsteria_system$ddr_B_M_arlen ;

  // value method ddr_B_M_m_arsize
  assign ddr_B_M_arsize = awsteria_system$ddr_B_M_arsize ;

  // value method ddr_B_M_m_arburst
  assign ddr_B_M_arburst = awsteria_system$ddr_B_M_arburst ;

  // value method ddr_B_M_m_arlock
  assign ddr_B_M_arlock = awsteria_system$ddr_B_M_arlock ;

  // value method ddr_B_M_m_arcache
  assign ddr_B_M_arcache = awsteria_system$ddr_B_M_arcache ;

  // value method ddr_B_M_m_arprot
  assign ddr_B_M_arprot = awsteria_system$ddr_B_M_arprot ;

  // value method ddr_B_M_m_arqos
  assign ddr_B_M_arqos = awsteria_system$ddr_B_M_arqos ;

  // value method ddr_B_M_m_arregion
  assign ddr_B_M_arregion = awsteria_system$ddr_B_M_arregion ;

  // action method ddr_B_M_m_arready
  assign CAN_FIRE_ddr_B_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr_B_M_m_arready = 1'd1 ;

  // action method ddr_B_M_m_rvalid
  assign CAN_FIRE_ddr_B_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr_B_M_m_rvalid = 1'd1 ;

  // value method ddr_B_M_m_rready
  assign ddr_B_M_rready = awsteria_system$ddr_B_M_rready ;

  // value method ddr_C_M_m_awvalid
  assign ddr_C_M_awvalid = awsteria_system$ddr_C_M_awvalid ;

  // value method ddr_C_M_m_awid
  assign ddr_C_M_awid = awsteria_system$ddr_C_M_awid ;

  // value method ddr_C_M_m_awaddr
  assign ddr_C_M_awaddr = awsteria_system$ddr_C_M_awaddr ;

  // value method ddr_C_M_m_awlen
  assign ddr_C_M_awlen = awsteria_system$ddr_C_M_awlen ;

  // value method ddr_C_M_m_awsize
  assign ddr_C_M_awsize = awsteria_system$ddr_C_M_awsize ;

  // value method ddr_C_M_m_awburst
  assign ddr_C_M_awburst = awsteria_system$ddr_C_M_awburst ;

  // value method ddr_C_M_m_awlock
  assign ddr_C_M_awlock = awsteria_system$ddr_C_M_awlock ;

  // value method ddr_C_M_m_awcache
  assign ddr_C_M_awcache = awsteria_system$ddr_C_M_awcache ;

  // value method ddr_C_M_m_awprot
  assign ddr_C_M_awprot = awsteria_system$ddr_C_M_awprot ;

  // value method ddr_C_M_m_awqos
  assign ddr_C_M_awqos = awsteria_system$ddr_C_M_awqos ;

  // value method ddr_C_M_m_awregion
  assign ddr_C_M_awregion = awsteria_system$ddr_C_M_awregion ;

  // action method ddr_C_M_m_awready
  assign CAN_FIRE_ddr_C_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr_C_M_m_awready = 1'd1 ;

  // value method ddr_C_M_m_wvalid
  assign ddr_C_M_wvalid = awsteria_system$ddr_C_M_wvalid ;

  // value method ddr_C_M_m_wdata
  assign ddr_C_M_wdata = awsteria_system$ddr_C_M_wdata ;

  // value method ddr_C_M_m_wstrb
  assign ddr_C_M_wstrb = awsteria_system$ddr_C_M_wstrb ;

  // value method ddr_C_M_m_wlast
  assign ddr_C_M_wlast = awsteria_system$ddr_C_M_wlast ;

  // action method ddr_C_M_m_wready
  assign CAN_FIRE_ddr_C_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr_C_M_m_wready = 1'd1 ;

  // action method ddr_C_M_m_bvalid
  assign CAN_FIRE_ddr_C_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr_C_M_m_bvalid = 1'd1 ;

  // value method ddr_C_M_m_bready
  assign ddr_C_M_bready = awsteria_system$ddr_C_M_bready ;

  // value method ddr_C_M_m_arvalid
  assign ddr_C_M_arvalid = awsteria_system$ddr_C_M_arvalid ;

  // value method ddr_C_M_m_arid
  assign ddr_C_M_arid = awsteria_system$ddr_C_M_arid ;

  // value method ddr_C_M_m_araddr
  assign ddr_C_M_araddr = awsteria_system$ddr_C_M_araddr ;

  // value method ddr_C_M_m_arlen
  assign ddr_C_M_arlen = awsteria_system$ddr_C_M_arlen ;

  // value method ddr_C_M_m_arsize
  assign ddr_C_M_arsize = awsteria_system$ddr_C_M_arsize ;

  // value method ddr_C_M_m_arburst
  assign ddr_C_M_arburst = awsteria_system$ddr_C_M_arburst ;

  // value method ddr_C_M_m_arlock
  assign ddr_C_M_arlock = awsteria_system$ddr_C_M_arlock ;

  // value method ddr_C_M_m_arcache
  assign ddr_C_M_arcache = awsteria_system$ddr_C_M_arcache ;

  // value method ddr_C_M_m_arprot
  assign ddr_C_M_arprot = awsteria_system$ddr_C_M_arprot ;

  // value method ddr_C_M_m_arqos
  assign ddr_C_M_arqos = awsteria_system$ddr_C_M_arqos ;

  // value method ddr_C_M_m_arregion
  assign ddr_C_M_arregion = awsteria_system$ddr_C_M_arregion ;

  // action method ddr_C_M_m_arready
  assign CAN_FIRE_ddr_C_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr_C_M_m_arready = 1'd1 ;

  // action method ddr_C_M_m_rvalid
  assign CAN_FIRE_ddr_C_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr_C_M_m_rvalid = 1'd1 ;

  // value method ddr_C_M_m_rready
  assign ddr_C_M_rready = awsteria_system$ddr_C_M_rready ;

  // value method ddr_D_M_m_awvalid
  assign ddr_D_M_awvalid = awsteria_system$ddr_D_M_awvalid ;

  // value method ddr_D_M_m_awid
  assign ddr_D_M_awid = awsteria_system$ddr_D_M_awid ;

  // value method ddr_D_M_m_awaddr
  assign ddr_D_M_awaddr = awsteria_system$ddr_D_M_awaddr ;

  // value method ddr_D_M_m_awlen
  assign ddr_D_M_awlen = awsteria_system$ddr_D_M_awlen ;

  // value method ddr_D_M_m_awsize
  assign ddr_D_M_awsize = awsteria_system$ddr_D_M_awsize ;

  // value method ddr_D_M_m_awburst
  assign ddr_D_M_awburst = awsteria_system$ddr_D_M_awburst ;

  // value method ddr_D_M_m_awlock
  assign ddr_D_M_awlock = awsteria_system$ddr_D_M_awlock ;

  // value method ddr_D_M_m_awcache
  assign ddr_D_M_awcache = awsteria_system$ddr_D_M_awcache ;

  // value method ddr_D_M_m_awprot
  assign ddr_D_M_awprot = awsteria_system$ddr_D_M_awprot ;

  // value method ddr_D_M_m_awqos
  assign ddr_D_M_awqos = awsteria_system$ddr_D_M_awqos ;

  // value method ddr_D_M_m_awregion
  assign ddr_D_M_awregion = awsteria_system$ddr_D_M_awregion ;

  // action method ddr_D_M_m_awready
  assign CAN_FIRE_ddr_D_M_m_awready = 1'd1 ;
  assign WILL_FIRE_ddr_D_M_m_awready = 1'd1 ;

  // value method ddr_D_M_m_wvalid
  assign ddr_D_M_wvalid = awsteria_system$ddr_D_M_wvalid ;

  // value method ddr_D_M_m_wdata
  assign ddr_D_M_wdata = awsteria_system$ddr_D_M_wdata ;

  // value method ddr_D_M_m_wstrb
  assign ddr_D_M_wstrb = awsteria_system$ddr_D_M_wstrb ;

  // value method ddr_D_M_m_wlast
  assign ddr_D_M_wlast = awsteria_system$ddr_D_M_wlast ;

  // action method ddr_D_M_m_wready
  assign CAN_FIRE_ddr_D_M_m_wready = 1'd1 ;
  assign WILL_FIRE_ddr_D_M_m_wready = 1'd1 ;

  // action method ddr_D_M_m_bvalid
  assign CAN_FIRE_ddr_D_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_ddr_D_M_m_bvalid = 1'd1 ;

  // value method ddr_D_M_m_bready
  assign ddr_D_M_bready = awsteria_system$ddr_D_M_bready ;

  // value method ddr_D_M_m_arvalid
  assign ddr_D_M_arvalid = awsteria_system$ddr_D_M_arvalid ;

  // value method ddr_D_M_m_arid
  assign ddr_D_M_arid = awsteria_system$ddr_D_M_arid ;

  // value method ddr_D_M_m_araddr
  assign ddr_D_M_araddr = awsteria_system$ddr_D_M_araddr ;

  // value method ddr_D_M_m_arlen
  assign ddr_D_M_arlen = awsteria_system$ddr_D_M_arlen ;

  // value method ddr_D_M_m_arsize
  assign ddr_D_M_arsize = awsteria_system$ddr_D_M_arsize ;

  // value method ddr_D_M_m_arburst
  assign ddr_D_M_arburst = awsteria_system$ddr_D_M_arburst ;

  // value method ddr_D_M_m_arlock
  assign ddr_D_M_arlock = awsteria_system$ddr_D_M_arlock ;

  // value method ddr_D_M_m_arcache
  assign ddr_D_M_arcache = awsteria_system$ddr_D_M_arcache ;

  // value method ddr_D_M_m_arprot
  assign ddr_D_M_arprot = awsteria_system$ddr_D_M_arprot ;

  // value method ddr_D_M_m_arqos
  assign ddr_D_M_arqos = awsteria_system$ddr_D_M_arqos ;

  // value method ddr_D_M_m_arregion
  assign ddr_D_M_arregion = awsteria_system$ddr_D_M_arregion ;

  // action method ddr_D_M_m_arready
  assign CAN_FIRE_ddr_D_M_m_arready = 1'd1 ;
  assign WILL_FIRE_ddr_D_M_m_arready = 1'd1 ;

  // action method ddr_D_M_m_rvalid
  assign CAN_FIRE_ddr_D_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_ddr_D_M_m_rvalid = 1'd1 ;

  // value method ddr_D_M_m_rready
  assign ddr_D_M_rready = awsteria_system$ddr_D_M_rready ;

  // action method m_env_ready
  assign CAN_FIRE_m_env_ready = 1'd1 ;
  assign WILL_FIRE_m_env_ready = 1'd1 ;

  // value method m_halted
  assign m_halted = awsteria_system$m_halted ;

  // action method m_glcount
  assign CAN_FIRE_m_glcount = 1'd1 ;
  assign WILL_FIRE_m_glcount = 1'd1 ;

  // submodule awsteria_system
  mkAWSteria_System awsteria_system(.CLK_clk1(CLK_clk1),
				    .CLK_clk2(CLK_clk2),
				    .CLK_clk3(CLK_clk3),
				    .CLK_clk4(CLK_clk4),
				    .CLK_clk5(CLK_clk5),
				    .CLK(CLK),
				    .RST_N(RST_N),
				    .ddr_A_M_arready(awsteria_system$ddr_A_M_arready),
				    .ddr_A_M_awready(awsteria_system$ddr_A_M_awready),
				    .ddr_A_M_bid(awsteria_system$ddr_A_M_bid),
				    .ddr_A_M_bresp(awsteria_system$ddr_A_M_bresp),
				    .ddr_A_M_bvalid(awsteria_system$ddr_A_M_bvalid),
				    .ddr_A_M_rdata(awsteria_system$ddr_A_M_rdata),
				    .ddr_A_M_rid(awsteria_system$ddr_A_M_rid),
				    .ddr_A_M_rlast(awsteria_system$ddr_A_M_rlast),
				    .ddr_A_M_rresp(awsteria_system$ddr_A_M_rresp),
				    .ddr_A_M_rvalid(awsteria_system$ddr_A_M_rvalid),
				    .ddr_A_M_wready(awsteria_system$ddr_A_M_wready),
				    .ddr_B_M_arready(awsteria_system$ddr_B_M_arready),
				    .ddr_B_M_awready(awsteria_system$ddr_B_M_awready),
				    .ddr_B_M_bid(awsteria_system$ddr_B_M_bid),
				    .ddr_B_M_bresp(awsteria_system$ddr_B_M_bresp),
				    .ddr_B_M_bvalid(awsteria_system$ddr_B_M_bvalid),
				    .ddr_B_M_rdata(awsteria_system$ddr_B_M_rdata),
				    .ddr_B_M_rid(awsteria_system$ddr_B_M_rid),
				    .ddr_B_M_rlast(awsteria_system$ddr_B_M_rlast),
				    .ddr_B_M_rresp(awsteria_system$ddr_B_M_rresp),
				    .ddr_B_M_rvalid(awsteria_system$ddr_B_M_rvalid),
				    .ddr_B_M_wready(awsteria_system$ddr_B_M_wready),
				    .ddr_C_M_arready(awsteria_system$ddr_C_M_arready),
				    .ddr_C_M_awready(awsteria_system$ddr_C_M_awready),
				    .ddr_C_M_bid(awsteria_system$ddr_C_M_bid),
				    .ddr_C_M_bresp(awsteria_system$ddr_C_M_bresp),
				    .ddr_C_M_bvalid(awsteria_system$ddr_C_M_bvalid),
				    .ddr_C_M_rdata(awsteria_system$ddr_C_M_rdata),
				    .ddr_C_M_rid(awsteria_system$ddr_C_M_rid),
				    .ddr_C_M_rlast(awsteria_system$ddr_C_M_rlast),
				    .ddr_C_M_rresp(awsteria_system$ddr_C_M_rresp),
				    .ddr_C_M_rvalid(awsteria_system$ddr_C_M_rvalid),
				    .ddr_C_M_wready(awsteria_system$ddr_C_M_wready),
				    .ddr_D_M_arready(awsteria_system$ddr_D_M_arready),
				    .ddr_D_M_awready(awsteria_system$ddr_D_M_awready),
				    .ddr_D_M_bid(awsteria_system$ddr_D_M_bid),
				    .ddr_D_M_bresp(awsteria_system$ddr_D_M_bresp),
				    .ddr_D_M_bvalid(awsteria_system$ddr_D_M_bvalid),
				    .ddr_D_M_rdata(awsteria_system$ddr_D_M_rdata),
				    .ddr_D_M_rid(awsteria_system$ddr_D_M_rid),
				    .ddr_D_M_rlast(awsteria_system$ddr_D_M_rlast),
				    .ddr_D_M_rresp(awsteria_system$ddr_D_M_rresp),
				    .ddr_D_M_rvalid(awsteria_system$ddr_D_M_rvalid),
				    .ddr_D_M_wready(awsteria_system$ddr_D_M_wready),
				    .host_AXI4L_S_araddr(awsteria_system$host_AXI4L_S_araddr),
				    .host_AXI4L_S_arprot(awsteria_system$host_AXI4L_S_arprot),
				    .host_AXI4L_S_arvalid(awsteria_system$host_AXI4L_S_arvalid),
				    .host_AXI4L_S_awaddr(awsteria_system$host_AXI4L_S_awaddr),
				    .host_AXI4L_S_awprot(awsteria_system$host_AXI4L_S_awprot),
				    .host_AXI4L_S_awvalid(awsteria_system$host_AXI4L_S_awvalid),
				    .host_AXI4L_S_bready(awsteria_system$host_AXI4L_S_bready),
				    .host_AXI4L_S_rready(awsteria_system$host_AXI4L_S_rready),
				    .host_AXI4L_S_wdata(awsteria_system$host_AXI4L_S_wdata),
				    .host_AXI4L_S_wstrb(awsteria_system$host_AXI4L_S_wstrb),
				    .host_AXI4L_S_wvalid(awsteria_system$host_AXI4L_S_wvalid),
				    .host_AXI4_S_araddr(awsteria_system$host_AXI4_S_araddr),
				    .host_AXI4_S_arburst(awsteria_system$host_AXI4_S_arburst),
				    .host_AXI4_S_arcache(awsteria_system$host_AXI4_S_arcache),
				    .host_AXI4_S_arid(awsteria_system$host_AXI4_S_arid),
				    .host_AXI4_S_arlen(awsteria_system$host_AXI4_S_arlen),
				    .host_AXI4_S_arlock(awsteria_system$host_AXI4_S_arlock),
				    .host_AXI4_S_arprot(awsteria_system$host_AXI4_S_arprot),
				    .host_AXI4_S_arqos(awsteria_system$host_AXI4_S_arqos),
				    .host_AXI4_S_arregion(awsteria_system$host_AXI4_S_arregion),
				    .host_AXI4_S_arsize(awsteria_system$host_AXI4_S_arsize),
				    .host_AXI4_S_arvalid(awsteria_system$host_AXI4_S_arvalid),
				    .host_AXI4_S_awaddr(awsteria_system$host_AXI4_S_awaddr),
				    .host_AXI4_S_awburst(awsteria_system$host_AXI4_S_awburst),
				    .host_AXI4_S_awcache(awsteria_system$host_AXI4_S_awcache),
				    .host_AXI4_S_awid(awsteria_system$host_AXI4_S_awid),
				    .host_AXI4_S_awlen(awsteria_system$host_AXI4_S_awlen),
				    .host_AXI4_S_awlock(awsteria_system$host_AXI4_S_awlock),
				    .host_AXI4_S_awprot(awsteria_system$host_AXI4_S_awprot),
				    .host_AXI4_S_awqos(awsteria_system$host_AXI4_S_awqos),
				    .host_AXI4_S_awregion(awsteria_system$host_AXI4_S_awregion),
				    .host_AXI4_S_awsize(awsteria_system$host_AXI4_S_awsize),
				    .host_AXI4_S_awvalid(awsteria_system$host_AXI4_S_awvalid),
				    .host_AXI4_S_bready(awsteria_system$host_AXI4_S_bready),
				    .host_AXI4_S_rready(awsteria_system$host_AXI4_S_rready),
				    .host_AXI4_S_wdata(awsteria_system$host_AXI4_S_wdata),
				    .host_AXI4_S_wlast(awsteria_system$host_AXI4_S_wlast),
				    .host_AXI4_S_wstrb(awsteria_system$host_AXI4_S_wstrb),
				    .host_AXI4_S_wvalid(awsteria_system$host_AXI4_S_wvalid),
				    .m_env_ready_env_ready(awsteria_system$m_env_ready_env_ready),
				    .m_glcount_glcount(awsteria_system$m_glcount_glcount),
				    .host_AXI4_S_awready(awsteria_system$host_AXI4_S_awready),
				    .host_AXI4_S_wready(awsteria_system$host_AXI4_S_wready),
				    .host_AXI4_S_bvalid(awsteria_system$host_AXI4_S_bvalid),
				    .host_AXI4_S_bid(awsteria_system$host_AXI4_S_bid),
				    .host_AXI4_S_bresp(awsteria_system$host_AXI4_S_bresp),
				    .host_AXI4_S_arready(awsteria_system$host_AXI4_S_arready),
				    .host_AXI4_S_rvalid(awsteria_system$host_AXI4_S_rvalid),
				    .host_AXI4_S_rid(awsteria_system$host_AXI4_S_rid),
				    .host_AXI4_S_rdata(awsteria_system$host_AXI4_S_rdata),
				    .host_AXI4_S_rresp(awsteria_system$host_AXI4_S_rresp),
				    .host_AXI4_S_rlast(awsteria_system$host_AXI4_S_rlast),
				    .host_AXI4L_S_awready(awsteria_system$host_AXI4L_S_awready),
				    .host_AXI4L_S_wready(awsteria_system$host_AXI4L_S_wready),
				    .host_AXI4L_S_bvalid(awsteria_system$host_AXI4L_S_bvalid),
				    .host_AXI4L_S_bresp(awsteria_system$host_AXI4L_S_bresp),
				    .host_AXI4L_S_arready(awsteria_system$host_AXI4L_S_arready),
				    .host_AXI4L_S_rvalid(awsteria_system$host_AXI4L_S_rvalid),
				    .host_AXI4L_S_rresp(awsteria_system$host_AXI4L_S_rresp),
				    .host_AXI4L_S_rdata(awsteria_system$host_AXI4L_S_rdata),
				    .ddr_A_M_awvalid(awsteria_system$ddr_A_M_awvalid),
				    .ddr_A_M_awid(awsteria_system$ddr_A_M_awid),
				    .ddr_A_M_awaddr(awsteria_system$ddr_A_M_awaddr),
				    .ddr_A_M_awlen(awsteria_system$ddr_A_M_awlen),
				    .ddr_A_M_awsize(awsteria_system$ddr_A_M_awsize),
				    .ddr_A_M_awburst(awsteria_system$ddr_A_M_awburst),
				    .ddr_A_M_awlock(awsteria_system$ddr_A_M_awlock),
				    .ddr_A_M_awcache(awsteria_system$ddr_A_M_awcache),
				    .ddr_A_M_awprot(awsteria_system$ddr_A_M_awprot),
				    .ddr_A_M_awqos(awsteria_system$ddr_A_M_awqos),
				    .ddr_A_M_awregion(awsteria_system$ddr_A_M_awregion),
				    .ddr_A_M_wvalid(awsteria_system$ddr_A_M_wvalid),
				    .ddr_A_M_wdata(awsteria_system$ddr_A_M_wdata),
				    .ddr_A_M_wstrb(awsteria_system$ddr_A_M_wstrb),
				    .ddr_A_M_wlast(awsteria_system$ddr_A_M_wlast),
				    .ddr_A_M_bready(awsteria_system$ddr_A_M_bready),
				    .ddr_A_M_arvalid(awsteria_system$ddr_A_M_arvalid),
				    .ddr_A_M_arid(awsteria_system$ddr_A_M_arid),
				    .ddr_A_M_araddr(awsteria_system$ddr_A_M_araddr),
				    .ddr_A_M_arlen(awsteria_system$ddr_A_M_arlen),
				    .ddr_A_M_arsize(awsteria_system$ddr_A_M_arsize),
				    .ddr_A_M_arburst(awsteria_system$ddr_A_M_arburst),
				    .ddr_A_M_arlock(awsteria_system$ddr_A_M_arlock),
				    .ddr_A_M_arcache(awsteria_system$ddr_A_M_arcache),
				    .ddr_A_M_arprot(awsteria_system$ddr_A_M_arprot),
				    .ddr_A_M_arqos(awsteria_system$ddr_A_M_arqos),
				    .ddr_A_M_arregion(awsteria_system$ddr_A_M_arregion),
				    .ddr_A_M_rready(awsteria_system$ddr_A_M_rready),
				    .ddr_B_M_awvalid(awsteria_system$ddr_B_M_awvalid),
				    .ddr_B_M_awid(awsteria_system$ddr_B_M_awid),
				    .ddr_B_M_awaddr(awsteria_system$ddr_B_M_awaddr),
				    .ddr_B_M_awlen(awsteria_system$ddr_B_M_awlen),
				    .ddr_B_M_awsize(awsteria_system$ddr_B_M_awsize),
				    .ddr_B_M_awburst(awsteria_system$ddr_B_M_awburst),
				    .ddr_B_M_awlock(awsteria_system$ddr_B_M_awlock),
				    .ddr_B_M_awcache(awsteria_system$ddr_B_M_awcache),
				    .ddr_B_M_awprot(awsteria_system$ddr_B_M_awprot),
				    .ddr_B_M_awqos(awsteria_system$ddr_B_M_awqos),
				    .ddr_B_M_awregion(awsteria_system$ddr_B_M_awregion),
				    .ddr_B_M_wvalid(awsteria_system$ddr_B_M_wvalid),
				    .ddr_B_M_wdata(awsteria_system$ddr_B_M_wdata),
				    .ddr_B_M_wstrb(awsteria_system$ddr_B_M_wstrb),
				    .ddr_B_M_wlast(awsteria_system$ddr_B_M_wlast),
				    .ddr_B_M_bready(awsteria_system$ddr_B_M_bready),
				    .ddr_B_M_arvalid(awsteria_system$ddr_B_M_arvalid),
				    .ddr_B_M_arid(awsteria_system$ddr_B_M_arid),
				    .ddr_B_M_araddr(awsteria_system$ddr_B_M_araddr),
				    .ddr_B_M_arlen(awsteria_system$ddr_B_M_arlen),
				    .ddr_B_M_arsize(awsteria_system$ddr_B_M_arsize),
				    .ddr_B_M_arburst(awsteria_system$ddr_B_M_arburst),
				    .ddr_B_M_arlock(awsteria_system$ddr_B_M_arlock),
				    .ddr_B_M_arcache(awsteria_system$ddr_B_M_arcache),
				    .ddr_B_M_arprot(awsteria_system$ddr_B_M_arprot),
				    .ddr_B_M_arqos(awsteria_system$ddr_B_M_arqos),
				    .ddr_B_M_arregion(awsteria_system$ddr_B_M_arregion),
				    .ddr_B_M_rready(awsteria_system$ddr_B_M_rready),
				    .ddr_C_M_awvalid(awsteria_system$ddr_C_M_awvalid),
				    .ddr_C_M_awid(awsteria_system$ddr_C_M_awid),
				    .ddr_C_M_awaddr(awsteria_system$ddr_C_M_awaddr),
				    .ddr_C_M_awlen(awsteria_system$ddr_C_M_awlen),
				    .ddr_C_M_awsize(awsteria_system$ddr_C_M_awsize),
				    .ddr_C_M_awburst(awsteria_system$ddr_C_M_awburst),
				    .ddr_C_M_awlock(awsteria_system$ddr_C_M_awlock),
				    .ddr_C_M_awcache(awsteria_system$ddr_C_M_awcache),
				    .ddr_C_M_awprot(awsteria_system$ddr_C_M_awprot),
				    .ddr_C_M_awqos(awsteria_system$ddr_C_M_awqos),
				    .ddr_C_M_awregion(awsteria_system$ddr_C_M_awregion),
				    .ddr_C_M_wvalid(awsteria_system$ddr_C_M_wvalid),
				    .ddr_C_M_wdata(awsteria_system$ddr_C_M_wdata),
				    .ddr_C_M_wstrb(awsteria_system$ddr_C_M_wstrb),
				    .ddr_C_M_wlast(awsteria_system$ddr_C_M_wlast),
				    .ddr_C_M_bready(awsteria_system$ddr_C_M_bready),
				    .ddr_C_M_arvalid(awsteria_system$ddr_C_M_arvalid),
				    .ddr_C_M_arid(awsteria_system$ddr_C_M_arid),
				    .ddr_C_M_araddr(awsteria_system$ddr_C_M_araddr),
				    .ddr_C_M_arlen(awsteria_system$ddr_C_M_arlen),
				    .ddr_C_M_arsize(awsteria_system$ddr_C_M_arsize),
				    .ddr_C_M_arburst(awsteria_system$ddr_C_M_arburst),
				    .ddr_C_M_arlock(awsteria_system$ddr_C_M_arlock),
				    .ddr_C_M_arcache(awsteria_system$ddr_C_M_arcache),
				    .ddr_C_M_arprot(awsteria_system$ddr_C_M_arprot),
				    .ddr_C_M_arqos(awsteria_system$ddr_C_M_arqos),
				    .ddr_C_M_arregion(awsteria_system$ddr_C_M_arregion),
				    .ddr_C_M_rready(awsteria_system$ddr_C_M_rready),
				    .ddr_D_M_awvalid(awsteria_system$ddr_D_M_awvalid),
				    .ddr_D_M_awid(awsteria_system$ddr_D_M_awid),
				    .ddr_D_M_awaddr(awsteria_system$ddr_D_M_awaddr),
				    .ddr_D_M_awlen(awsteria_system$ddr_D_M_awlen),
				    .ddr_D_M_awsize(awsteria_system$ddr_D_M_awsize),
				    .ddr_D_M_awburst(awsteria_system$ddr_D_M_awburst),
				    .ddr_D_M_awlock(awsteria_system$ddr_D_M_awlock),
				    .ddr_D_M_awcache(awsteria_system$ddr_D_M_awcache),
				    .ddr_D_M_awprot(awsteria_system$ddr_D_M_awprot),
				    .ddr_D_M_awqos(awsteria_system$ddr_D_M_awqos),
				    .ddr_D_M_awregion(awsteria_system$ddr_D_M_awregion),
				    .ddr_D_M_wvalid(awsteria_system$ddr_D_M_wvalid),
				    .ddr_D_M_wdata(awsteria_system$ddr_D_M_wdata),
				    .ddr_D_M_wstrb(awsteria_system$ddr_D_M_wstrb),
				    .ddr_D_M_wlast(awsteria_system$ddr_D_M_wlast),
				    .ddr_D_M_bready(awsteria_system$ddr_D_M_bready),
				    .ddr_D_M_arvalid(awsteria_system$ddr_D_M_arvalid),
				    .ddr_D_M_arid(awsteria_system$ddr_D_M_arid),
				    .ddr_D_M_araddr(awsteria_system$ddr_D_M_araddr),
				    .ddr_D_M_arlen(awsteria_system$ddr_D_M_arlen),
				    .ddr_D_M_arsize(awsteria_system$ddr_D_M_arsize),
				    .ddr_D_M_arburst(awsteria_system$ddr_D_M_arburst),
				    .ddr_D_M_arlock(awsteria_system$ddr_D_M_arlock),
				    .ddr_D_M_arcache(awsteria_system$ddr_D_M_arcache),
				    .ddr_D_M_arprot(awsteria_system$ddr_D_M_arprot),
				    .ddr_D_M_arqos(awsteria_system$ddr_D_M_arqos),
				    .ddr_D_M_arregion(awsteria_system$ddr_D_M_arregion),
				    .ddr_D_M_rready(awsteria_system$ddr_D_M_rready),
				    .m_halted(awsteria_system$m_halted));

  // submodule axi4L_gate
  mkAXI4L_Gate_A axi4L_gate(.CLK(CLK),
			    .RST_N(RST_N),
			    .axi4L_M_arready(axi4L_gate$axi4L_M_arready),
			    .axi4L_M_awready(axi4L_gate$axi4L_M_awready),
			    .axi4L_M_bresp(axi4L_gate$axi4L_M_bresp),
			    .axi4L_M_bvalid(axi4L_gate$axi4L_M_bvalid),
			    .axi4L_M_rdata(axi4L_gate$axi4L_M_rdata),
			    .axi4L_M_rresp(axi4L_gate$axi4L_M_rresp),
			    .axi4L_M_rvalid(axi4L_gate$axi4L_M_rvalid),
			    .axi4L_M_wready(axi4L_gate$axi4L_M_wready),
			    .axi4L_S_araddr(axi4L_gate$axi4L_S_araddr),
			    .axi4L_S_arprot(axi4L_gate$axi4L_S_arprot),
			    .axi4L_S_arvalid(axi4L_gate$axi4L_S_arvalid),
			    .axi4L_S_awaddr(axi4L_gate$axi4L_S_awaddr),
			    .axi4L_S_awprot(axi4L_gate$axi4L_S_awprot),
			    .axi4L_S_awvalid(axi4L_gate$axi4L_S_awvalid),
			    .axi4L_S_bready(axi4L_gate$axi4L_S_bready),
			    .axi4L_S_rready(axi4L_gate$axi4L_S_rready),
			    .axi4L_S_wdata(axi4L_gate$axi4L_S_wdata),
			    .axi4L_S_wstrb(axi4L_gate$axi4L_S_wstrb),
			    .axi4L_S_wvalid(axi4L_gate$axi4L_S_wvalid),
			    .m_enable_enabled(axi4L_gate$m_enable_enabled),
			    .axi4L_S_awready(axi4L_gate$axi4L_S_awready),
			    .axi4L_S_wready(axi4L_gate$axi4L_S_wready),
			    .axi4L_S_bvalid(axi4L_gate$axi4L_S_bvalid),
			    .axi4L_S_bresp(axi4L_gate$axi4L_S_bresp),
			    .axi4L_S_arready(axi4L_gate$axi4L_S_arready),
			    .axi4L_S_rvalid(axi4L_gate$axi4L_S_rvalid),
			    .axi4L_S_rresp(axi4L_gate$axi4L_S_rresp),
			    .axi4L_S_rdata(axi4L_gate$axi4L_S_rdata),
			    .axi4L_M_awvalid(axi4L_gate$axi4L_M_awvalid),
			    .axi4L_M_awaddr(axi4L_gate$axi4L_M_awaddr),
			    .axi4L_M_awprot(axi4L_gate$axi4L_M_awprot),
			    .axi4L_M_wvalid(axi4L_gate$axi4L_M_wvalid),
			    .axi4L_M_wdata(axi4L_gate$axi4L_M_wdata),
			    .axi4L_M_wstrb(axi4L_gate$axi4L_M_wstrb),
			    .axi4L_M_bready(axi4L_gate$axi4L_M_bready),
			    .axi4L_M_arvalid(axi4L_gate$axi4L_M_arvalid),
			    .axi4L_M_araddr(axi4L_gate$axi4L_M_araddr),
			    .axi4L_M_arprot(axi4L_gate$axi4L_M_arprot),
			    .axi4L_M_rready(axi4L_gate$axi4L_M_rready));

  // submodule axi4L_switch
  mkAXI4L_Fabric_1_2 axi4L_switch(.CLK(CLK),
				  .RST_N(RST_N),
				  .set_verbosity_verbosity(axi4L_switch$set_verbosity_verbosity),
				  .v_from_masters_0_araddr(axi4L_switch$v_from_masters_0_araddr),
				  .v_from_masters_0_arprot(axi4L_switch$v_from_masters_0_arprot),
				  .v_from_masters_0_arvalid(axi4L_switch$v_from_masters_0_arvalid),
				  .v_from_masters_0_awaddr(axi4L_switch$v_from_masters_0_awaddr),
				  .v_from_masters_0_awprot(axi4L_switch$v_from_masters_0_awprot),
				  .v_from_masters_0_awvalid(axi4L_switch$v_from_masters_0_awvalid),
				  .v_from_masters_0_bready(axi4L_switch$v_from_masters_0_bready),
				  .v_from_masters_0_rready(axi4L_switch$v_from_masters_0_rready),
				  .v_from_masters_0_wdata(axi4L_switch$v_from_masters_0_wdata),
				  .v_from_masters_0_wstrb(axi4L_switch$v_from_masters_0_wstrb),
				  .v_from_masters_0_wvalid(axi4L_switch$v_from_masters_0_wvalid),
				  .v_to_slaves_0_arready(axi4L_switch$v_to_slaves_0_arready),
				  .v_to_slaves_0_awready(axi4L_switch$v_to_slaves_0_awready),
				  .v_to_slaves_0_bresp(axi4L_switch$v_to_slaves_0_bresp),
				  .v_to_slaves_0_bvalid(axi4L_switch$v_to_slaves_0_bvalid),
				  .v_to_slaves_0_rdata(axi4L_switch$v_to_slaves_0_rdata),
				  .v_to_slaves_0_rresp(axi4L_switch$v_to_slaves_0_rresp),
				  .v_to_slaves_0_rvalid(axi4L_switch$v_to_slaves_0_rvalid),
				  .v_to_slaves_0_wready(axi4L_switch$v_to_slaves_0_wready),
				  .v_to_slaves_1_arready(axi4L_switch$v_to_slaves_1_arready),
				  .v_to_slaves_1_awready(axi4L_switch$v_to_slaves_1_awready),
				  .v_to_slaves_1_bresp(axi4L_switch$v_to_slaves_1_bresp),
				  .v_to_slaves_1_bvalid(axi4L_switch$v_to_slaves_1_bvalid),
				  .v_to_slaves_1_rdata(axi4L_switch$v_to_slaves_1_rdata),
				  .v_to_slaves_1_rresp(axi4L_switch$v_to_slaves_1_rresp),
				  .v_to_slaves_1_rvalid(axi4L_switch$v_to_slaves_1_rvalid),
				  .v_to_slaves_1_wready(axi4L_switch$v_to_slaves_1_wready),
				  .EN_reset(axi4L_switch$EN_reset),
				  .EN_set_verbosity(axi4L_switch$EN_set_verbosity),
				  .RDY_reset(),
				  .RDY_set_verbosity(),
				  .v_from_masters_0_awready(axi4L_switch$v_from_masters_0_awready),
				  .v_from_masters_0_wready(axi4L_switch$v_from_masters_0_wready),
				  .v_from_masters_0_bvalid(axi4L_switch$v_from_masters_0_bvalid),
				  .v_from_masters_0_bresp(axi4L_switch$v_from_masters_0_bresp),
				  .v_from_masters_0_arready(axi4L_switch$v_from_masters_0_arready),
				  .v_from_masters_0_rvalid(axi4L_switch$v_from_masters_0_rvalid),
				  .v_from_masters_0_rresp(axi4L_switch$v_from_masters_0_rresp),
				  .v_from_masters_0_rdata(axi4L_switch$v_from_masters_0_rdata),
				  .v_to_slaves_0_awvalid(axi4L_switch$v_to_slaves_0_awvalid),
				  .v_to_slaves_0_awaddr(axi4L_switch$v_to_slaves_0_awaddr),
				  .v_to_slaves_0_awprot(axi4L_switch$v_to_slaves_0_awprot),
				  .v_to_slaves_0_wvalid(axi4L_switch$v_to_slaves_0_wvalid),
				  .v_to_slaves_0_wdata(axi4L_switch$v_to_slaves_0_wdata),
				  .v_to_slaves_0_wstrb(axi4L_switch$v_to_slaves_0_wstrb),
				  .v_to_slaves_0_bready(axi4L_switch$v_to_slaves_0_bready),
				  .v_to_slaves_0_arvalid(axi4L_switch$v_to_slaves_0_arvalid),
				  .v_to_slaves_0_araddr(axi4L_switch$v_to_slaves_0_araddr),
				  .v_to_slaves_0_arprot(axi4L_switch$v_to_slaves_0_arprot),
				  .v_to_slaves_0_rready(axi4L_switch$v_to_slaves_0_rready),
				  .v_to_slaves_1_awvalid(axi4L_switch$v_to_slaves_1_awvalid),
				  .v_to_slaves_1_awaddr(axi4L_switch$v_to_slaves_1_awaddr),
				  .v_to_slaves_1_awprot(axi4L_switch$v_to_slaves_1_awprot),
				  .v_to_slaves_1_wvalid(axi4L_switch$v_to_slaves_1_wvalid),
				  .v_to_slaves_1_wdata(axi4L_switch$v_to_slaves_1_wdata),
				  .v_to_slaves_1_wstrb(axi4L_switch$v_to_slaves_1_wstrb),
				  .v_to_slaves_1_bready(axi4L_switch$v_to_slaves_1_bready),
				  .v_to_slaves_1_arvalid(axi4L_switch$v_to_slaves_1_arvalid),
				  .v_to_slaves_1_araddr(axi4L_switch$v_to_slaves_1_araddr),
				  .v_to_slaves_1_arprot(axi4L_switch$v_to_slaves_1_arprot),
				  .v_to_slaves_1_rready(axi4L_switch$v_to_slaves_1_rready));

  // submodule axi4_gate
  mkAXI4_Gate_A axi4_gate(.CLK(CLK),
			  .RST_N(RST_N),
			  .axi4_M_arready(axi4_gate$axi4_M_arready),
			  .axi4_M_awready(axi4_gate$axi4_M_awready),
			  .axi4_M_bid(axi4_gate$axi4_M_bid),
			  .axi4_M_bresp(axi4_gate$axi4_M_bresp),
			  .axi4_M_bvalid(axi4_gate$axi4_M_bvalid),
			  .axi4_M_rdata(axi4_gate$axi4_M_rdata),
			  .axi4_M_rid(axi4_gate$axi4_M_rid),
			  .axi4_M_rlast(axi4_gate$axi4_M_rlast),
			  .axi4_M_rresp(axi4_gate$axi4_M_rresp),
			  .axi4_M_rvalid(axi4_gate$axi4_M_rvalid),
			  .axi4_M_wready(axi4_gate$axi4_M_wready),
			  .axi4_S_araddr(axi4_gate$axi4_S_araddr),
			  .axi4_S_arburst(axi4_gate$axi4_S_arburst),
			  .axi4_S_arcache(axi4_gate$axi4_S_arcache),
			  .axi4_S_arid(axi4_gate$axi4_S_arid),
			  .axi4_S_arlen(axi4_gate$axi4_S_arlen),
			  .axi4_S_arlock(axi4_gate$axi4_S_arlock),
			  .axi4_S_arprot(axi4_gate$axi4_S_arprot),
			  .axi4_S_arqos(axi4_gate$axi4_S_arqos),
			  .axi4_S_arregion(axi4_gate$axi4_S_arregion),
			  .axi4_S_arsize(axi4_gate$axi4_S_arsize),
			  .axi4_S_arvalid(axi4_gate$axi4_S_arvalid),
			  .axi4_S_awaddr(axi4_gate$axi4_S_awaddr),
			  .axi4_S_awburst(axi4_gate$axi4_S_awburst),
			  .axi4_S_awcache(axi4_gate$axi4_S_awcache),
			  .axi4_S_awid(axi4_gate$axi4_S_awid),
			  .axi4_S_awlen(axi4_gate$axi4_S_awlen),
			  .axi4_S_awlock(axi4_gate$axi4_S_awlock),
			  .axi4_S_awprot(axi4_gate$axi4_S_awprot),
			  .axi4_S_awqos(axi4_gate$axi4_S_awqos),
			  .axi4_S_awregion(axi4_gate$axi4_S_awregion),
			  .axi4_S_awsize(axi4_gate$axi4_S_awsize),
			  .axi4_S_awvalid(axi4_gate$axi4_S_awvalid),
			  .axi4_S_bready(axi4_gate$axi4_S_bready),
			  .axi4_S_rready(axi4_gate$axi4_S_rready),
			  .axi4_S_wdata(axi4_gate$axi4_S_wdata),
			  .axi4_S_wlast(axi4_gate$axi4_S_wlast),
			  .axi4_S_wstrb(axi4_gate$axi4_S_wstrb),
			  .axi4_S_wvalid(axi4_gate$axi4_S_wvalid),
			  .m_enable_enabled(axi4_gate$m_enable_enabled),
			  .axi4_S_awready(axi4_gate$axi4_S_awready),
			  .axi4_S_wready(axi4_gate$axi4_S_wready),
			  .axi4_S_bvalid(axi4_gate$axi4_S_bvalid),
			  .axi4_S_bid(axi4_gate$axi4_S_bid),
			  .axi4_S_bresp(axi4_gate$axi4_S_bresp),
			  .axi4_S_arready(axi4_gate$axi4_S_arready),
			  .axi4_S_rvalid(axi4_gate$axi4_S_rvalid),
			  .axi4_S_rid(axi4_gate$axi4_S_rid),
			  .axi4_S_rdata(axi4_gate$axi4_S_rdata),
			  .axi4_S_rresp(axi4_gate$axi4_S_rresp),
			  .axi4_S_rlast(axi4_gate$axi4_S_rlast),
			  .axi4_M_awvalid(axi4_gate$axi4_M_awvalid),
			  .axi4_M_awid(axi4_gate$axi4_M_awid),
			  .axi4_M_awaddr(axi4_gate$axi4_M_awaddr),
			  .axi4_M_awlen(axi4_gate$axi4_M_awlen),
			  .axi4_M_awsize(axi4_gate$axi4_M_awsize),
			  .axi4_M_awburst(axi4_gate$axi4_M_awburst),
			  .axi4_M_awlock(axi4_gate$axi4_M_awlock),
			  .axi4_M_awcache(axi4_gate$axi4_M_awcache),
			  .axi4_M_awprot(axi4_gate$axi4_M_awprot),
			  .axi4_M_awqos(axi4_gate$axi4_M_awqos),
			  .axi4_M_awregion(axi4_gate$axi4_M_awregion),
			  .axi4_M_wvalid(axi4_gate$axi4_M_wvalid),
			  .axi4_M_wdata(axi4_gate$axi4_M_wdata),
			  .axi4_M_wstrb(axi4_gate$axi4_M_wstrb),
			  .axi4_M_wlast(axi4_gate$axi4_M_wlast),
			  .axi4_M_bready(axi4_gate$axi4_M_bready),
			  .axi4_M_arvalid(axi4_gate$axi4_M_arvalid),
			  .axi4_M_arid(axi4_gate$axi4_M_arid),
			  .axi4_M_araddr(axi4_gate$axi4_M_araddr),
			  .axi4_M_arlen(axi4_gate$axi4_M_arlen),
			  .axi4_M_arsize(axi4_gate$axi4_M_arsize),
			  .axi4_M_arburst(axi4_gate$axi4_M_arburst),
			  .axi4_M_arlock(axi4_gate$axi4_M_arlock),
			  .axi4_M_arcache(axi4_gate$axi4_M_arcache),
			  .axi4_M_arprot(axi4_gate$axi4_M_arprot),
			  .axi4_M_arqos(axi4_gate$axi4_M_arqos),
			  .axi4_M_arregion(axi4_gate$axi4_M_arregion),
			  .axi4_M_rready(axi4_gate$axi4_M_rready));

  // submodule drm
  mkDRM drm(.CLK(CLK),
	    .RST_N(RST_N),
	    .axi4L_S_araddr(drm$axi4L_S_araddr),
	    .axi4L_S_arprot(drm$axi4L_S_arprot),
	    .axi4L_S_arvalid(drm$axi4L_S_arvalid),
	    .axi4L_S_awaddr(drm$axi4L_S_awaddr),
	    .axi4L_S_awprot(drm$axi4L_S_awprot),
	    .axi4L_S_awvalid(drm$axi4L_S_awvalid),
	    .axi4L_S_bready(drm$axi4L_S_bready),
	    .axi4L_S_rready(drm$axi4L_S_rready),
	    .axi4L_S_wdata(drm$axi4L_S_wdata),
	    .axi4L_S_wstrb(drm$axi4L_S_wstrb),
	    .axi4L_S_wvalid(drm$axi4L_S_wvalid),
	    .axi4L_S_awready(drm$axi4L_S_awready),
	    .axi4L_S_wready(drm$axi4L_S_wready),
	    .axi4L_S_bvalid(drm$axi4L_S_bvalid),
	    .axi4L_S_bresp(drm$axi4L_S_bresp),
	    .axi4L_S_arready(drm$axi4L_S_arready),
	    .axi4L_S_rvalid(drm$axi4L_S_rvalid),
	    .axi4L_S_rresp(drm$axi4L_S_rresp),
	    .axi4L_S_rdata(drm$axi4L_S_rdata),
	    .ip_enable(drm$ip_enable));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_2
  assign CAN_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;

  // rule RL_rl_wr_data_channel_2
  assign CAN_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_response_channel_2
  assign CAN_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_2
  assign CAN_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;

  // rule RL_rl_rd_data_channel_2
  assign CAN_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_3
  assign CAN_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;

  // rule RL_rl_wr_data_channel_3
  assign CAN_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_response_channel_3
  assign CAN_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_3
  assign CAN_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;

  // rule RL_rl_rd_data_channel_3
  assign CAN_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;

  // rule RL_rl_drm_control
  assign CAN_FIRE_RL_rl_drm_control = 1'd1 ;
  assign WILL_FIRE_RL_rl_drm_control = 1'd1 ;

  // register rg_env_ready
  assign rg_env_ready$D_IN = m_env_ready_env_ready ;
  assign rg_env_ready$EN = 1'd1 ;

  // submodule awsteria_system
  assign awsteria_system$ddr_A_M_arready = ddr_A_M_arready ;
  assign awsteria_system$ddr_A_M_awready = ddr_A_M_awready ;
  assign awsteria_system$ddr_A_M_bid = ddr_A_M_bid ;
  assign awsteria_system$ddr_A_M_bresp = ddr_A_M_bresp ;
  assign awsteria_system$ddr_A_M_bvalid = ddr_A_M_bvalid ;
  assign awsteria_system$ddr_A_M_rdata = ddr_A_M_rdata ;
  assign awsteria_system$ddr_A_M_rid = ddr_A_M_rid ;
  assign awsteria_system$ddr_A_M_rlast = ddr_A_M_rlast ;
  assign awsteria_system$ddr_A_M_rresp = ddr_A_M_rresp ;
  assign awsteria_system$ddr_A_M_rvalid = ddr_A_M_rvalid ;
  assign awsteria_system$ddr_A_M_wready = ddr_A_M_wready ;
  assign awsteria_system$ddr_B_M_arready = ddr_B_M_arready ;
  assign awsteria_system$ddr_B_M_awready = ddr_B_M_awready ;
  assign awsteria_system$ddr_B_M_bid = ddr_B_M_bid ;
  assign awsteria_system$ddr_B_M_bresp = ddr_B_M_bresp ;
  assign awsteria_system$ddr_B_M_bvalid = ddr_B_M_bvalid ;
  assign awsteria_system$ddr_B_M_rdata = ddr_B_M_rdata ;
  assign awsteria_system$ddr_B_M_rid = ddr_B_M_rid ;
  assign awsteria_system$ddr_B_M_rlast = ddr_B_M_rlast ;
  assign awsteria_system$ddr_B_M_rresp = ddr_B_M_rresp ;
  assign awsteria_system$ddr_B_M_rvalid = ddr_B_M_rvalid ;
  assign awsteria_system$ddr_B_M_wready = ddr_B_M_wready ;
  assign awsteria_system$ddr_C_M_arready = ddr_C_M_arready ;
  assign awsteria_system$ddr_C_M_awready = ddr_C_M_awready ;
  assign awsteria_system$ddr_C_M_bid = ddr_C_M_bid ;
  assign awsteria_system$ddr_C_M_bresp = ddr_C_M_bresp ;
  assign awsteria_system$ddr_C_M_bvalid = ddr_C_M_bvalid ;
  assign awsteria_system$ddr_C_M_rdata = ddr_C_M_rdata ;
  assign awsteria_system$ddr_C_M_rid = ddr_C_M_rid ;
  assign awsteria_system$ddr_C_M_rlast = ddr_C_M_rlast ;
  assign awsteria_system$ddr_C_M_rresp = ddr_C_M_rresp ;
  assign awsteria_system$ddr_C_M_rvalid = ddr_C_M_rvalid ;
  assign awsteria_system$ddr_C_M_wready = ddr_C_M_wready ;
  assign awsteria_system$ddr_D_M_arready = ddr_D_M_arready ;
  assign awsteria_system$ddr_D_M_awready = ddr_D_M_awready ;
  assign awsteria_system$ddr_D_M_bid = ddr_D_M_bid ;
  assign awsteria_system$ddr_D_M_bresp = ddr_D_M_bresp ;
  assign awsteria_system$ddr_D_M_bvalid = ddr_D_M_bvalid ;
  assign awsteria_system$ddr_D_M_rdata = ddr_D_M_rdata ;
  assign awsteria_system$ddr_D_M_rid = ddr_D_M_rid ;
  assign awsteria_system$ddr_D_M_rlast = ddr_D_M_rlast ;
  assign awsteria_system$ddr_D_M_rresp = ddr_D_M_rresp ;
  assign awsteria_system$ddr_D_M_rvalid = ddr_D_M_rvalid ;
  assign awsteria_system$ddr_D_M_wready = ddr_D_M_wready ;
  assign awsteria_system$host_AXI4L_S_araddr = axi4L_gate$axi4L_M_araddr ;
  assign awsteria_system$host_AXI4L_S_arprot = axi4L_gate$axi4L_M_arprot ;
  assign awsteria_system$host_AXI4L_S_arvalid = axi4L_gate$axi4L_M_arvalid ;
  assign awsteria_system$host_AXI4L_S_awaddr = axi4L_gate$axi4L_M_awaddr ;
  assign awsteria_system$host_AXI4L_S_awprot = axi4L_gate$axi4L_M_awprot ;
  assign awsteria_system$host_AXI4L_S_awvalid = axi4L_gate$axi4L_M_awvalid ;
  assign awsteria_system$host_AXI4L_S_bready = axi4L_gate$axi4L_M_bready ;
  assign awsteria_system$host_AXI4L_S_rready = axi4L_gate$axi4L_M_rready ;
  assign awsteria_system$host_AXI4L_S_wdata = axi4L_gate$axi4L_M_wdata ;
  assign awsteria_system$host_AXI4L_S_wstrb = axi4L_gate$axi4L_M_wstrb ;
  assign awsteria_system$host_AXI4L_S_wvalid = axi4L_gate$axi4L_M_wvalid ;
  assign awsteria_system$host_AXI4_S_araddr = axi4_gate$axi4_M_araddr ;
  assign awsteria_system$host_AXI4_S_arburst = axi4_gate$axi4_M_arburst ;
  assign awsteria_system$host_AXI4_S_arcache = axi4_gate$axi4_M_arcache ;
  assign awsteria_system$host_AXI4_S_arid = axi4_gate$axi4_M_arid ;
  assign awsteria_system$host_AXI4_S_arlen = axi4_gate$axi4_M_arlen ;
  assign awsteria_system$host_AXI4_S_arlock = axi4_gate$axi4_M_arlock ;
  assign awsteria_system$host_AXI4_S_arprot = axi4_gate$axi4_M_arprot ;
  assign awsteria_system$host_AXI4_S_arqos = axi4_gate$axi4_M_arqos ;
  assign awsteria_system$host_AXI4_S_arregion = axi4_gate$axi4_M_arregion ;
  assign awsteria_system$host_AXI4_S_arsize = axi4_gate$axi4_M_arsize ;
  assign awsteria_system$host_AXI4_S_arvalid = axi4_gate$axi4_M_arvalid ;
  assign awsteria_system$host_AXI4_S_awaddr = axi4_gate$axi4_M_awaddr ;
  assign awsteria_system$host_AXI4_S_awburst = axi4_gate$axi4_M_awburst ;
  assign awsteria_system$host_AXI4_S_awcache = axi4_gate$axi4_M_awcache ;
  assign awsteria_system$host_AXI4_S_awid = axi4_gate$axi4_M_awid ;
  assign awsteria_system$host_AXI4_S_awlen = axi4_gate$axi4_M_awlen ;
  assign awsteria_system$host_AXI4_S_awlock = axi4_gate$axi4_M_awlock ;
  assign awsteria_system$host_AXI4_S_awprot = axi4_gate$axi4_M_awprot ;
  assign awsteria_system$host_AXI4_S_awqos = axi4_gate$axi4_M_awqos ;
  assign awsteria_system$host_AXI4_S_awregion = axi4_gate$axi4_M_awregion ;
  assign awsteria_system$host_AXI4_S_awsize = axi4_gate$axi4_M_awsize ;
  assign awsteria_system$host_AXI4_S_awvalid = axi4_gate$axi4_M_awvalid ;
  assign awsteria_system$host_AXI4_S_bready = axi4_gate$axi4_M_bready ;
  assign awsteria_system$host_AXI4_S_rready = axi4_gate$axi4_M_rready ;
  assign awsteria_system$host_AXI4_S_wdata = axi4_gate$axi4_M_wdata ;
  assign awsteria_system$host_AXI4_S_wlast = axi4_gate$axi4_M_wlast ;
  assign awsteria_system$host_AXI4_S_wstrb = axi4_gate$axi4_M_wstrb ;
  assign awsteria_system$host_AXI4_S_wvalid = axi4_gate$axi4_M_wvalid ;
  assign awsteria_system$m_env_ready_env_ready = m_env_ready_env_ready ;
  assign awsteria_system$m_glcount_glcount = m_glcount_glcount ;

  // submodule axi4L_gate
  assign axi4L_gate$axi4L_M_arready = awsteria_system$host_AXI4L_S_arready ;
  assign axi4L_gate$axi4L_M_awready = awsteria_system$host_AXI4L_S_awready ;
  assign axi4L_gate$axi4L_M_bresp = awsteria_system$host_AXI4L_S_bresp ;
  assign axi4L_gate$axi4L_M_bvalid = awsteria_system$host_AXI4L_S_bvalid ;
  assign axi4L_gate$axi4L_M_rdata = awsteria_system$host_AXI4L_S_rdata ;
  assign axi4L_gate$axi4L_M_rresp = awsteria_system$host_AXI4L_S_rresp ;
  assign axi4L_gate$axi4L_M_rvalid = awsteria_system$host_AXI4L_S_rvalid ;
  assign axi4L_gate$axi4L_M_wready = awsteria_system$host_AXI4L_S_wready ;
  assign axi4L_gate$axi4L_S_araddr = axi4L_switch$v_to_slaves_1_araddr ;
  assign axi4L_gate$axi4L_S_arprot = axi4L_switch$v_to_slaves_1_arprot ;
  assign axi4L_gate$axi4L_S_arvalid = axi4L_switch$v_to_slaves_1_arvalid ;
  assign axi4L_gate$axi4L_S_awaddr = axi4L_switch$v_to_slaves_1_awaddr ;
  assign axi4L_gate$axi4L_S_awprot = axi4L_switch$v_to_slaves_1_awprot ;
  assign axi4L_gate$axi4L_S_awvalid = axi4L_switch$v_to_slaves_1_awvalid ;
  assign axi4L_gate$axi4L_S_bready = axi4L_switch$v_to_slaves_1_bready ;
  assign axi4L_gate$axi4L_S_rready = axi4L_switch$v_to_slaves_1_rready ;
  assign axi4L_gate$axi4L_S_wdata = axi4L_switch$v_to_slaves_1_wdata ;
  assign axi4L_gate$axi4L_S_wstrb = axi4L_switch$v_to_slaves_1_wstrb ;
  assign axi4L_gate$axi4L_S_wvalid = axi4L_switch$v_to_slaves_1_wvalid ;
  assign axi4L_gate$m_enable_enabled = drm$ip_enable ;

  // submodule axi4L_switch
  assign axi4L_switch$set_verbosity_verbosity = 4'h0 ;
  assign axi4L_switch$v_from_masters_0_araddr = host_AXI4L_S_araddr ;
  assign axi4L_switch$v_from_masters_0_arprot = host_AXI4L_S_arprot ;
  assign axi4L_switch$v_from_masters_0_arvalid = host_AXI4L_S_arvalid ;
  assign axi4L_switch$v_from_masters_0_awaddr = host_AXI4L_S_awaddr ;
  assign axi4L_switch$v_from_masters_0_awprot = host_AXI4L_S_awprot ;
  assign axi4L_switch$v_from_masters_0_awvalid = host_AXI4L_S_awvalid ;
  assign axi4L_switch$v_from_masters_0_bready = host_AXI4L_S_bready ;
  assign axi4L_switch$v_from_masters_0_rready = host_AXI4L_S_rready ;
  assign axi4L_switch$v_from_masters_0_wdata = host_AXI4L_S_wdata ;
  assign axi4L_switch$v_from_masters_0_wstrb = host_AXI4L_S_wstrb ;
  assign axi4L_switch$v_from_masters_0_wvalid = host_AXI4L_S_wvalid ;
  assign axi4L_switch$v_to_slaves_0_arready = drm$axi4L_S_arready ;
  assign axi4L_switch$v_to_slaves_0_awready = drm$axi4L_S_awready ;
  assign axi4L_switch$v_to_slaves_0_bresp = drm$axi4L_S_bresp ;
  assign axi4L_switch$v_to_slaves_0_bvalid = drm$axi4L_S_bvalid ;
  assign axi4L_switch$v_to_slaves_0_rdata = drm$axi4L_S_rdata ;
  assign axi4L_switch$v_to_slaves_0_rresp = drm$axi4L_S_rresp ;
  assign axi4L_switch$v_to_slaves_0_rvalid = drm$axi4L_S_rvalid ;
  assign axi4L_switch$v_to_slaves_0_wready = drm$axi4L_S_wready ;
  assign axi4L_switch$v_to_slaves_1_arready = axi4L_gate$axi4L_S_arready ;
  assign axi4L_switch$v_to_slaves_1_awready = axi4L_gate$axi4L_S_awready ;
  assign axi4L_switch$v_to_slaves_1_bresp = axi4L_gate$axi4L_S_bresp ;
  assign axi4L_switch$v_to_slaves_1_bvalid = axi4L_gate$axi4L_S_bvalid ;
  assign axi4L_switch$v_to_slaves_1_rdata = axi4L_gate$axi4L_S_rdata ;
  assign axi4L_switch$v_to_slaves_1_rresp = axi4L_gate$axi4L_S_rresp ;
  assign axi4L_switch$v_to_slaves_1_rvalid = axi4L_gate$axi4L_S_rvalid ;
  assign axi4L_switch$v_to_slaves_1_wready = axi4L_gate$axi4L_S_wready ;
  assign axi4L_switch$EN_reset = 1'b0 ;
  assign axi4L_switch$EN_set_verbosity = 1'b0 ;

  // submodule axi4_gate
  assign axi4_gate$axi4_M_arready = awsteria_system$host_AXI4_S_arready ;
  assign axi4_gate$axi4_M_awready = awsteria_system$host_AXI4_S_awready ;
  assign axi4_gate$axi4_M_bid = awsteria_system$host_AXI4_S_bid ;
  assign axi4_gate$axi4_M_bresp = awsteria_system$host_AXI4_S_bresp ;
  assign axi4_gate$axi4_M_bvalid = awsteria_system$host_AXI4_S_bvalid ;
  assign axi4_gate$axi4_M_rdata = awsteria_system$host_AXI4_S_rdata ;
  assign axi4_gate$axi4_M_rid = awsteria_system$host_AXI4_S_rid ;
  assign axi4_gate$axi4_M_rlast = awsteria_system$host_AXI4_S_rlast ;
  assign axi4_gate$axi4_M_rresp = awsteria_system$host_AXI4_S_rresp ;
  assign axi4_gate$axi4_M_rvalid = awsteria_system$host_AXI4_S_rvalid ;
  assign axi4_gate$axi4_M_wready = awsteria_system$host_AXI4_S_wready ;
  assign axi4_gate$axi4_S_araddr = host_AXI4_S_araddr ;
  assign axi4_gate$axi4_S_arburst = host_AXI4_S_arburst ;
  assign axi4_gate$axi4_S_arcache = host_AXI4_S_arcache ;
  assign axi4_gate$axi4_S_arid = host_AXI4_S_arid ;
  assign axi4_gate$axi4_S_arlen = host_AXI4_S_arlen ;
  assign axi4_gate$axi4_S_arlock = host_AXI4_S_arlock ;
  assign axi4_gate$axi4_S_arprot = host_AXI4_S_arprot ;
  assign axi4_gate$axi4_S_arqos = host_AXI4_S_arqos ;
  assign axi4_gate$axi4_S_arregion = host_AXI4_S_arregion ;
  assign axi4_gate$axi4_S_arsize = host_AXI4_S_arsize ;
  assign axi4_gate$axi4_S_arvalid = host_AXI4_S_arvalid ;
  assign axi4_gate$axi4_S_awaddr = host_AXI4_S_awaddr ;
  assign axi4_gate$axi4_S_awburst = host_AXI4_S_awburst ;
  assign axi4_gate$axi4_S_awcache = host_AXI4_S_awcache ;
  assign axi4_gate$axi4_S_awid = host_AXI4_S_awid ;
  assign axi4_gate$axi4_S_awlen = host_AXI4_S_awlen ;
  assign axi4_gate$axi4_S_awlock = host_AXI4_S_awlock ;
  assign axi4_gate$axi4_S_awprot = host_AXI4_S_awprot ;
  assign axi4_gate$axi4_S_awqos = host_AXI4_S_awqos ;
  assign axi4_gate$axi4_S_awregion = host_AXI4_S_awregion ;
  assign axi4_gate$axi4_S_awsize = host_AXI4_S_awsize ;
  assign axi4_gate$axi4_S_awvalid = host_AXI4_S_awvalid ;
  assign axi4_gate$axi4_S_bready = host_AXI4_S_bready ;
  assign axi4_gate$axi4_S_rready = host_AXI4_S_rready ;
  assign axi4_gate$axi4_S_wdata = host_AXI4_S_wdata ;
  assign axi4_gate$axi4_S_wlast = host_AXI4_S_wlast ;
  assign axi4_gate$axi4_S_wstrb = host_AXI4_S_wstrb ;
  assign axi4_gate$axi4_S_wvalid = host_AXI4_S_wvalid ;
  assign axi4_gate$m_enable_enabled = drm$ip_enable ;

  // submodule drm
  assign drm$axi4L_S_araddr = axi4L_switch$v_to_slaves_0_araddr ;
  assign drm$axi4L_S_arprot = axi4L_switch$v_to_slaves_0_arprot ;
  assign drm$axi4L_S_arvalid = axi4L_switch$v_to_slaves_0_arvalid ;
  assign drm$axi4L_S_awaddr = axi4L_switch$v_to_slaves_0_awaddr ;
  assign drm$axi4L_S_awprot = axi4L_switch$v_to_slaves_0_awprot ;
  assign drm$axi4L_S_awvalid = axi4L_switch$v_to_slaves_0_awvalid ;
  assign drm$axi4L_S_bready = axi4L_switch$v_to_slaves_0_bready ;
  assign drm$axi4L_S_rready = axi4L_switch$v_to_slaves_0_rready ;
  assign drm$axi4L_S_wdata = axi4L_switch$v_to_slaves_0_wdata ;
  assign drm$axi4L_S_wstrb = axi4L_switch$v_to_slaves_0_wstrb ;
  assign drm$axi4L_S_wvalid = axi4L_switch$v_to_slaves_0_wvalid ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_env_ready <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (rg_env_ready$EN)
	  rg_env_ready <= `BSV_ASSIGNMENT_DELAY rg_env_ready$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_env_ready = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkAWSteria_HW

