//
// Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
//
//
// Ports:
// Name                         I/O  size props
// axi4_S_awready                 O     1 reg
// axi4_S_wready                  O     1 reg
// axi4_S_bvalid                  O     1 reg
// axi4_S_bid                     O    16 reg
// axi4_S_bresp                   O     2 reg
// axi4_S_arready                 O     1 reg
// axi4_S_rvalid                  O     1 reg
// axi4_S_rid                     O    16 reg
// axi4_S_rdata                   O   512 reg
// axi4_S_rresp                   O     2 reg
// axi4_S_rlast                   O     1 reg
// axi4_M_awvalid                 O     1 reg
// axi4_M_awid                    O    16 reg
// axi4_M_awaddr                  O    64 reg
// axi4_M_awlen                   O     8 reg
// axi4_M_awsize                  O     3 reg
// axi4_M_awburst                 O     2 reg
// axi4_M_awlock                  O     1 reg
// axi4_M_awcache                 O     4 reg
// axi4_M_awprot                  O     3 reg
// axi4_M_awqos                   O     4 reg
// axi4_M_awregion                O     4 reg
// axi4_M_wvalid                  O     1 reg
// axi4_M_wdata                   O   512 reg
// axi4_M_wstrb                   O    64 reg
// axi4_M_wlast                   O     1 reg
// axi4_M_bready                  O     1 reg
// axi4_M_arvalid                 O     1 reg
// axi4_M_arid                    O    16 reg
// axi4_M_araddr                  O    64 reg
// axi4_M_arlen                   O     8 reg
// axi4_M_arsize                  O     3 reg
// axi4_M_arburst                 O     2 reg
// axi4_M_arlock                  O     1 reg
// axi4_M_arcache                 O     4 reg
// axi4_M_arprot                  O     3 reg
// axi4_M_arqos                   O     4 reg
// axi4_M_arregion                O     4 reg
// axi4_M_rready                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// axi4_S_awvalid                 I     1
// axi4_S_awid                    I    16 reg
// axi4_S_awaddr                  I    64 reg
// axi4_S_awlen                   I     8 reg
// axi4_S_awsize                  I     3 reg
// axi4_S_awburst                 I     2 reg
// axi4_S_awlock                  I     1 reg
// axi4_S_awcache                 I     4 reg
// axi4_S_awprot                  I     3 reg
// axi4_S_awqos                   I     4 reg
// axi4_S_awregion                I     4 reg
// axi4_S_wvalid                  I     1
// axi4_S_wdata                   I   512 reg
// axi4_S_wstrb                   I    64 reg
// axi4_S_wlast                   I     1 reg
// axi4_S_bready                  I     1
// axi4_S_arvalid                 I     1
// axi4_S_arid                    I    16 reg
// axi4_S_araddr                  I    64 reg
// axi4_S_arlen                   I     8 reg
// axi4_S_arsize                  I     3 reg
// axi4_S_arburst                 I     2 reg
// axi4_S_arlock                  I     1 reg
// axi4_S_arcache                 I     4 reg
// axi4_S_arprot                  I     3 reg
// axi4_S_arqos                   I     4 reg
// axi4_S_arregion                I     4 reg
// axi4_S_rready                  I     1
// axi4_M_awready                 I     1
// axi4_M_wready                  I     1
// axi4_M_bvalid                  I     1
// axi4_M_bid                     I    16 reg
// axi4_M_bresp                   I     2 reg
// axi4_M_arready                 I     1
// axi4_M_rvalid                  I     1
// axi4_M_rid                     I    16 reg
// axi4_M_rdata                   I   512 reg
// axi4_M_rresp                   I     2 reg
// axi4_M_rlast                   I     1 reg
// m_enable_enabled               I     1 reg
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkAXI4_Gate_A(CLK,
		     RST_N,

		     axi4_S_awvalid,
		     axi4_S_awid,
		     axi4_S_awaddr,
		     axi4_S_awlen,
		     axi4_S_awsize,
		     axi4_S_awburst,
		     axi4_S_awlock,
		     axi4_S_awcache,
		     axi4_S_awprot,
		     axi4_S_awqos,
		     axi4_S_awregion,

		     axi4_S_awready,

		     axi4_S_wvalid,
		     axi4_S_wdata,
		     axi4_S_wstrb,
		     axi4_S_wlast,

		     axi4_S_wready,

		     axi4_S_bvalid,

		     axi4_S_bid,

		     axi4_S_bresp,

		     axi4_S_bready,

		     axi4_S_arvalid,
		     axi4_S_arid,
		     axi4_S_araddr,
		     axi4_S_arlen,
		     axi4_S_arsize,
		     axi4_S_arburst,
		     axi4_S_arlock,
		     axi4_S_arcache,
		     axi4_S_arprot,
		     axi4_S_arqos,
		     axi4_S_arregion,

		     axi4_S_arready,

		     axi4_S_rvalid,

		     axi4_S_rid,

		     axi4_S_rdata,

		     axi4_S_rresp,

		     axi4_S_rlast,

		     axi4_S_rready,

		     axi4_M_awvalid,

		     axi4_M_awid,

		     axi4_M_awaddr,

		     axi4_M_awlen,

		     axi4_M_awsize,

		     axi4_M_awburst,

		     axi4_M_awlock,

		     axi4_M_awcache,

		     axi4_M_awprot,

		     axi4_M_awqos,

		     axi4_M_awregion,

		     axi4_M_awready,

		     axi4_M_wvalid,

		     axi4_M_wdata,

		     axi4_M_wstrb,

		     axi4_M_wlast,

		     axi4_M_wready,

		     axi4_M_bvalid,
		     axi4_M_bid,
		     axi4_M_bresp,

		     axi4_M_bready,

		     axi4_M_arvalid,

		     axi4_M_arid,

		     axi4_M_araddr,

		     axi4_M_arlen,

		     axi4_M_arsize,

		     axi4_M_arburst,

		     axi4_M_arlock,

		     axi4_M_arcache,

		     axi4_M_arprot,

		     axi4_M_arqos,

		     axi4_M_arregion,

		     axi4_M_arready,

		     axi4_M_rvalid,
		     axi4_M_rid,
		     axi4_M_rdata,
		     axi4_M_rresp,
		     axi4_M_rlast,

		     axi4_M_rready,

		     m_enable_enabled);
  input  CLK;
  input  RST_N;

  // action method axi4_S_m_awvalid
  input  axi4_S_awvalid;
  input  [15 : 0] axi4_S_awid;
  input  [63 : 0] axi4_S_awaddr;
  input  [7 : 0] axi4_S_awlen;
  input  [2 : 0] axi4_S_awsize;
  input  [1 : 0] axi4_S_awburst;
  input  axi4_S_awlock;
  input  [3 : 0] axi4_S_awcache;
  input  [2 : 0] axi4_S_awprot;
  input  [3 : 0] axi4_S_awqos;
  input  [3 : 0] axi4_S_awregion;

  // value method axi4_S_m_awready
  output axi4_S_awready;

  // action method axi4_S_m_wvalid
  input  axi4_S_wvalid;
  input  [511 : 0] axi4_S_wdata;
  input  [63 : 0] axi4_S_wstrb;
  input  axi4_S_wlast;

  // value method axi4_S_m_wready
  output axi4_S_wready;

  // value method axi4_S_m_bvalid
  output axi4_S_bvalid;

  // value method axi4_S_m_bid
  output [15 : 0] axi4_S_bid;

  // value method axi4_S_m_bresp
  output [1 : 0] axi4_S_bresp;

  // value method axi4_S_m_buser

  // action method axi4_S_m_bready
  input  axi4_S_bready;

  // action method axi4_S_m_arvalid
  input  axi4_S_arvalid;
  input  [15 : 0] axi4_S_arid;
  input  [63 : 0] axi4_S_araddr;
  input  [7 : 0] axi4_S_arlen;
  input  [2 : 0] axi4_S_arsize;
  input  [1 : 0] axi4_S_arburst;
  input  axi4_S_arlock;
  input  [3 : 0] axi4_S_arcache;
  input  [2 : 0] axi4_S_arprot;
  input  [3 : 0] axi4_S_arqos;
  input  [3 : 0] axi4_S_arregion;

  // value method axi4_S_m_arready
  output axi4_S_arready;

  // value method axi4_S_m_rvalid
  output axi4_S_rvalid;

  // value method axi4_S_m_rid
  output [15 : 0] axi4_S_rid;

  // value method axi4_S_m_rdata
  output [511 : 0] axi4_S_rdata;

  // value method axi4_S_m_rresp
  output [1 : 0] axi4_S_rresp;

  // value method axi4_S_m_rlast
  output axi4_S_rlast;

  // value method axi4_S_m_ruser

  // action method axi4_S_m_rready
  input  axi4_S_rready;

  // value method axi4_M_m_awvalid
  output axi4_M_awvalid;

  // value method axi4_M_m_awid
  output [15 : 0] axi4_M_awid;

  // value method axi4_M_m_awaddr
  output [63 : 0] axi4_M_awaddr;

  // value method axi4_M_m_awlen
  output [7 : 0] axi4_M_awlen;

  // value method axi4_M_m_awsize
  output [2 : 0] axi4_M_awsize;

  // value method axi4_M_m_awburst
  output [1 : 0] axi4_M_awburst;

  // value method axi4_M_m_awlock
  output axi4_M_awlock;

  // value method axi4_M_m_awcache
  output [3 : 0] axi4_M_awcache;

  // value method axi4_M_m_awprot
  output [2 : 0] axi4_M_awprot;

  // value method axi4_M_m_awqos
  output [3 : 0] axi4_M_awqos;

  // value method axi4_M_m_awregion
  output [3 : 0] axi4_M_awregion;

  // value method axi4_M_m_awuser

  // action method axi4_M_m_awready
  input  axi4_M_awready;

  // value method axi4_M_m_wvalid
  output axi4_M_wvalid;

  // value method axi4_M_m_wdata
  output [511 : 0] axi4_M_wdata;

  // value method axi4_M_m_wstrb
  output [63 : 0] axi4_M_wstrb;

  // value method axi4_M_m_wlast
  output axi4_M_wlast;

  // value method axi4_M_m_wuser

  // action method axi4_M_m_wready
  input  axi4_M_wready;

  // action method axi4_M_m_bvalid
  input  axi4_M_bvalid;
  input  [15 : 0] axi4_M_bid;
  input  [1 : 0] axi4_M_bresp;

  // value method axi4_M_m_bready
  output axi4_M_bready;

  // value method axi4_M_m_arvalid
  output axi4_M_arvalid;

  // value method axi4_M_m_arid
  output [15 : 0] axi4_M_arid;

  // value method axi4_M_m_araddr
  output [63 : 0] axi4_M_araddr;

  // value method axi4_M_m_arlen
  output [7 : 0] axi4_M_arlen;

  // value method axi4_M_m_arsize
  output [2 : 0] axi4_M_arsize;

  // value method axi4_M_m_arburst
  output [1 : 0] axi4_M_arburst;

  // value method axi4_M_m_arlock
  output axi4_M_arlock;

  // value method axi4_M_m_arcache
  output [3 : 0] axi4_M_arcache;

  // value method axi4_M_m_arprot
  output [2 : 0] axi4_M_arprot;

  // value method axi4_M_m_arqos
  output [3 : 0] axi4_M_arqos;

  // value method axi4_M_m_arregion
  output [3 : 0] axi4_M_arregion;

  // value method axi4_M_m_aruser

  // action method axi4_M_m_arready
  input  axi4_M_arready;

  // action method axi4_M_m_rvalid
  input  axi4_M_rvalid;
  input  [15 : 0] axi4_M_rid;
  input  [511 : 0] axi4_M_rdata;
  input  [1 : 0] axi4_M_rresp;
  input  axi4_M_rlast;

  // value method axi4_M_m_rready
  output axi4_M_rready;

  // action method m_enable
  input  m_enable_enabled;

  // signals for module outputs
  wire [511 : 0] axi4_M_wdata, axi4_S_rdata;
  wire [63 : 0] axi4_M_araddr, axi4_M_awaddr, axi4_M_wstrb;
  wire [15 : 0] axi4_M_arid, axi4_M_awid, axi4_S_bid, axi4_S_rid;
  wire [7 : 0] axi4_M_arlen, axi4_M_awlen;
  wire [3 : 0] axi4_M_arcache,
	       axi4_M_arqos,
	       axi4_M_arregion,
	       axi4_M_awcache,
	       axi4_M_awqos,
	       axi4_M_awregion;
  wire [2 : 0] axi4_M_arprot, axi4_M_arsize, axi4_M_awprot, axi4_M_awsize;
  wire [1 : 0] axi4_M_arburst, axi4_M_awburst, axi4_S_bresp, axi4_S_rresp;
  wire axi4_M_arlock,
       axi4_M_arvalid,
       axi4_M_awlock,
       axi4_M_awvalid,
       axi4_M_bready,
       axi4_M_rready,
       axi4_M_wlast,
       axi4_M_wvalid,
       axi4_S_arready,
       axi4_S_awready,
       axi4_S_bvalid,
       axi4_S_rlast,
       axi4_S_rvalid,
       axi4_S_wready;

  // register m_rg_enabled
  reg m_rg_enabled;
  wire m_rg_enabled$D_IN, m_rg_enabled$EN;

  // register m_rg_enabled_prev
  reg m_rg_enabled_prev;
  wire m_rg_enabled_prev$D_IN, m_rg_enabled_prev$EN;

  // register m_rg_rd_burst_len
  reg [8 : 0] m_rg_rd_burst_len;
  wire [8 : 0] m_rg_rd_burst_len$D_IN;
  wire m_rg_rd_burst_len$EN;

  // ports of submodule m_xactor_from_M_f_rd_addr
  wire [108 : 0] m_xactor_from_M_f_rd_addr$D_IN,
		 m_xactor_from_M_f_rd_addr$D_OUT;
  wire m_xactor_from_M_f_rd_addr$CLR,
       m_xactor_from_M_f_rd_addr$DEQ,
       m_xactor_from_M_f_rd_addr$EMPTY_N,
       m_xactor_from_M_f_rd_addr$ENQ,
       m_xactor_from_M_f_rd_addr$FULL_N;

  // ports of submodule m_xactor_from_M_f_rd_data
  wire [530 : 0] m_xactor_from_M_f_rd_data$D_IN,
		 m_xactor_from_M_f_rd_data$D_OUT;
  wire m_xactor_from_M_f_rd_data$CLR,
       m_xactor_from_M_f_rd_data$DEQ,
       m_xactor_from_M_f_rd_data$EMPTY_N,
       m_xactor_from_M_f_rd_data$ENQ,
       m_xactor_from_M_f_rd_data$FULL_N;

  // ports of submodule m_xactor_from_M_f_wr_addr
  wire [108 : 0] m_xactor_from_M_f_wr_addr$D_IN,
		 m_xactor_from_M_f_wr_addr$D_OUT;
  wire m_xactor_from_M_f_wr_addr$CLR,
       m_xactor_from_M_f_wr_addr$DEQ,
       m_xactor_from_M_f_wr_addr$EMPTY_N,
       m_xactor_from_M_f_wr_addr$ENQ,
       m_xactor_from_M_f_wr_addr$FULL_N;

  // ports of submodule m_xactor_from_M_f_wr_data
  wire [576 : 0] m_xactor_from_M_f_wr_data$D_IN,
		 m_xactor_from_M_f_wr_data$D_OUT;
  wire m_xactor_from_M_f_wr_data$CLR,
       m_xactor_from_M_f_wr_data$DEQ,
       m_xactor_from_M_f_wr_data$EMPTY_N,
       m_xactor_from_M_f_wr_data$ENQ,
       m_xactor_from_M_f_wr_data$FULL_N;

  // ports of submodule m_xactor_from_M_f_wr_resp
  wire [17 : 0] m_xactor_from_M_f_wr_resp$D_IN,
		m_xactor_from_M_f_wr_resp$D_OUT;
  wire m_xactor_from_M_f_wr_resp$CLR,
       m_xactor_from_M_f_wr_resp$DEQ,
       m_xactor_from_M_f_wr_resp$EMPTY_N,
       m_xactor_from_M_f_wr_resp$ENQ,
       m_xactor_from_M_f_wr_resp$FULL_N;

  // ports of submodule m_xactor_to_S_f_rd_addr
  wire [108 : 0] m_xactor_to_S_f_rd_addr$D_IN, m_xactor_to_S_f_rd_addr$D_OUT;
  wire m_xactor_to_S_f_rd_addr$CLR,
       m_xactor_to_S_f_rd_addr$DEQ,
       m_xactor_to_S_f_rd_addr$EMPTY_N,
       m_xactor_to_S_f_rd_addr$ENQ,
       m_xactor_to_S_f_rd_addr$FULL_N;

  // ports of submodule m_xactor_to_S_f_rd_data
  wire [530 : 0] m_xactor_to_S_f_rd_data$D_IN, m_xactor_to_S_f_rd_data$D_OUT;
  wire m_xactor_to_S_f_rd_data$CLR,
       m_xactor_to_S_f_rd_data$DEQ,
       m_xactor_to_S_f_rd_data$EMPTY_N,
       m_xactor_to_S_f_rd_data$ENQ,
       m_xactor_to_S_f_rd_data$FULL_N;

  // ports of submodule m_xactor_to_S_f_wr_addr
  wire [108 : 0] m_xactor_to_S_f_wr_addr$D_IN, m_xactor_to_S_f_wr_addr$D_OUT;
  wire m_xactor_to_S_f_wr_addr$CLR,
       m_xactor_to_S_f_wr_addr$DEQ,
       m_xactor_to_S_f_wr_addr$EMPTY_N,
       m_xactor_to_S_f_wr_addr$ENQ,
       m_xactor_to_S_f_wr_addr$FULL_N;

  // ports of submodule m_xactor_to_S_f_wr_data
  wire [576 : 0] m_xactor_to_S_f_wr_data$D_IN, m_xactor_to_S_f_wr_data$D_OUT;
  wire m_xactor_to_S_f_wr_data$CLR,
       m_xactor_to_S_f_wr_data$DEQ,
       m_xactor_to_S_f_wr_data$EMPTY_N,
       m_xactor_to_S_f_wr_data$ENQ,
       m_xactor_to_S_f_wr_data$FULL_N;

  // ports of submodule m_xactor_to_S_f_wr_resp
  wire [17 : 0] m_xactor_to_S_f_wr_resp$D_IN, m_xactor_to_S_f_wr_resp$D_OUT;
  wire m_xactor_to_S_f_wr_resp$CLR,
       m_xactor_to_S_f_wr_resp$DEQ,
       m_xactor_to_S_f_wr_resp$EMPTY_N,
       m_xactor_to_S_f_wr_resp$ENQ,
       m_xactor_to_S_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_m_rl_rd_addr,
       CAN_FIRE_RL_m_rl_rd_addr_disabled,
       CAN_FIRE_RL_m_rl_rd_data,
       CAN_FIRE_RL_m_rl_rd_data_disabled_burst_resps,
       CAN_FIRE_RL_m_rl_rd_data_disabled_drain_S,
       CAN_FIRE_RL_m_rl_wr_addr,
       CAN_FIRE_RL_m_rl_wr_addr_disabled,
       CAN_FIRE_RL_m_rl_wr_data,
       CAN_FIRE_RL_m_rl_wr_data_disabled,
       CAN_FIRE_RL_m_rl_wr_resp,
       CAN_FIRE_RL_m_rl_wr_resp_disabled_drain_S,
       CAN_FIRE_axi4_M_m_arready,
       CAN_FIRE_axi4_M_m_awready,
       CAN_FIRE_axi4_M_m_bvalid,
       CAN_FIRE_axi4_M_m_rvalid,
       CAN_FIRE_axi4_M_m_wready,
       CAN_FIRE_axi4_S_m_arvalid,
       CAN_FIRE_axi4_S_m_awvalid,
       CAN_FIRE_axi4_S_m_bready,
       CAN_FIRE_axi4_S_m_rready,
       CAN_FIRE_axi4_S_m_wvalid,
       CAN_FIRE_m_enable,
       WILL_FIRE_RL_m_rl_rd_addr,
       WILL_FIRE_RL_m_rl_rd_addr_disabled,
       WILL_FIRE_RL_m_rl_rd_data,
       WILL_FIRE_RL_m_rl_rd_data_disabled_burst_resps,
       WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S,
       WILL_FIRE_RL_m_rl_wr_addr,
       WILL_FIRE_RL_m_rl_wr_addr_disabled,
       WILL_FIRE_RL_m_rl_wr_data,
       WILL_FIRE_RL_m_rl_wr_data_disabled,
       WILL_FIRE_RL_m_rl_wr_resp,
       WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S,
       WILL_FIRE_axi4_M_m_arready,
       WILL_FIRE_axi4_M_m_awready,
       WILL_FIRE_axi4_M_m_bvalid,
       WILL_FIRE_axi4_M_m_rvalid,
       WILL_FIRE_axi4_M_m_wready,
       WILL_FIRE_axi4_S_m_arvalid,
       WILL_FIRE_axi4_S_m_awvalid,
       WILL_FIRE_axi4_S_m_bready,
       WILL_FIRE_axi4_S_m_rready,
       WILL_FIRE_axi4_S_m_wvalid,
       WILL_FIRE_m_enable;

  // inputs to muxes for submodule ports
  wire [530 : 0] MUX_m_xactor_from_M_f_rd_data$enq_1__VAL_2;
  wire [17 : 0] MUX_m_xactor_from_M_f_wr_resp$enq_1__VAL_2;
  wire [8 : 0] MUX_m_rg_rd_burst_len$write_1__VAL_1,
	       MUX_m_rg_rd_burst_len$write_1__VAL_2;
  wire MUX_m_rg_rd_burst_len$write_1__SEL_1,
       MUX_m_xactor_from_M_f_rd_data$enq_1__SEL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h1832;
  reg [31 : 0] v__h1994;
  reg [31 : 0] v__h2246;
  reg [31 : 0] v__h2431;
  reg [31 : 0] v__h1826;
  reg [31 : 0] v__h1988;
  reg [31 : 0] v__h2240;
  reg [31 : 0] v__h2425;
  // synopsys translate_on

  // remaining internal signals
  wire [8 : 0] x__h2108;

  // action method axi4_S_m_awvalid
  assign CAN_FIRE_axi4_S_m_awvalid = 1'd1 ;
  assign WILL_FIRE_axi4_S_m_awvalid = 1'd1 ;

  // value method axi4_S_m_awready
  assign axi4_S_awready = m_xactor_from_M_f_wr_addr$FULL_N ;

  // action method axi4_S_m_wvalid
  assign CAN_FIRE_axi4_S_m_wvalid = 1'd1 ;
  assign WILL_FIRE_axi4_S_m_wvalid = 1'd1 ;

  // value method axi4_S_m_wready
  assign axi4_S_wready = m_xactor_from_M_f_wr_data$FULL_N ;

  // value method axi4_S_m_bvalid
  assign axi4_S_bvalid = m_xactor_from_M_f_wr_resp$EMPTY_N ;

  // value method axi4_S_m_bid
  assign axi4_S_bid = m_xactor_from_M_f_wr_resp$D_OUT[17:2] ;

  // value method axi4_S_m_bresp
  assign axi4_S_bresp = m_xactor_from_M_f_wr_resp$D_OUT[1:0] ;

  // action method axi4_S_m_bready
  assign CAN_FIRE_axi4_S_m_bready = 1'd1 ;
  assign WILL_FIRE_axi4_S_m_bready = 1'd1 ;

  // action method axi4_S_m_arvalid
  assign CAN_FIRE_axi4_S_m_arvalid = 1'd1 ;
  assign WILL_FIRE_axi4_S_m_arvalid = 1'd1 ;

  // value method axi4_S_m_arready
  assign axi4_S_arready = m_xactor_from_M_f_rd_addr$FULL_N ;

  // value method axi4_S_m_rvalid
  assign axi4_S_rvalid = m_xactor_from_M_f_rd_data$EMPTY_N ;

  // value method axi4_S_m_rid
  assign axi4_S_rid = m_xactor_from_M_f_rd_data$D_OUT[530:515] ;

  // value method axi4_S_m_rdata
  assign axi4_S_rdata = m_xactor_from_M_f_rd_data$D_OUT[514:3] ;

  // value method axi4_S_m_rresp
  assign axi4_S_rresp = m_xactor_from_M_f_rd_data$D_OUT[2:1] ;

  // value method axi4_S_m_rlast
  assign axi4_S_rlast = m_xactor_from_M_f_rd_data$D_OUT[0] ;

  // action method axi4_S_m_rready
  assign CAN_FIRE_axi4_S_m_rready = 1'd1 ;
  assign WILL_FIRE_axi4_S_m_rready = 1'd1 ;

  // value method axi4_M_m_awvalid
  assign axi4_M_awvalid = m_xactor_to_S_f_wr_addr$EMPTY_N ;

  // value method axi4_M_m_awid
  assign axi4_M_awid = m_xactor_to_S_f_wr_addr$D_OUT[108:93] ;

  // value method axi4_M_m_awaddr
  assign axi4_M_awaddr = m_xactor_to_S_f_wr_addr$D_OUT[92:29] ;

  // value method axi4_M_m_awlen
  assign axi4_M_awlen = m_xactor_to_S_f_wr_addr$D_OUT[28:21] ;

  // value method axi4_M_m_awsize
  assign axi4_M_awsize = m_xactor_to_S_f_wr_addr$D_OUT[20:18] ;

  // value method axi4_M_m_awburst
  assign axi4_M_awburst = m_xactor_to_S_f_wr_addr$D_OUT[17:16] ;

  // value method axi4_M_m_awlock
  assign axi4_M_awlock = m_xactor_to_S_f_wr_addr$D_OUT[15] ;

  // value method axi4_M_m_awcache
  assign axi4_M_awcache = m_xactor_to_S_f_wr_addr$D_OUT[14:11] ;

  // value method axi4_M_m_awprot
  assign axi4_M_awprot = m_xactor_to_S_f_wr_addr$D_OUT[10:8] ;

  // value method axi4_M_m_awqos
  assign axi4_M_awqos = m_xactor_to_S_f_wr_addr$D_OUT[7:4] ;

  // value method axi4_M_m_awregion
  assign axi4_M_awregion = m_xactor_to_S_f_wr_addr$D_OUT[3:0] ;

  // action method axi4_M_m_awready
  assign CAN_FIRE_axi4_M_m_awready = 1'd1 ;
  assign WILL_FIRE_axi4_M_m_awready = 1'd1 ;

  // value method axi4_M_m_wvalid
  assign axi4_M_wvalid = m_xactor_to_S_f_wr_data$EMPTY_N ;

  // value method axi4_M_m_wdata
  assign axi4_M_wdata = m_xactor_to_S_f_wr_data$D_OUT[576:65] ;

  // value method axi4_M_m_wstrb
  assign axi4_M_wstrb = m_xactor_to_S_f_wr_data$D_OUT[64:1] ;

  // value method axi4_M_m_wlast
  assign axi4_M_wlast = m_xactor_to_S_f_wr_data$D_OUT[0] ;

  // action method axi4_M_m_wready
  assign CAN_FIRE_axi4_M_m_wready = 1'd1 ;
  assign WILL_FIRE_axi4_M_m_wready = 1'd1 ;

  // action method axi4_M_m_bvalid
  assign CAN_FIRE_axi4_M_m_bvalid = 1'd1 ;
  assign WILL_FIRE_axi4_M_m_bvalid = 1'd1 ;

  // value method axi4_M_m_bready
  assign axi4_M_bready = m_xactor_to_S_f_wr_resp$FULL_N ;

  // value method axi4_M_m_arvalid
  assign axi4_M_arvalid = m_xactor_to_S_f_rd_addr$EMPTY_N ;

  // value method axi4_M_m_arid
  assign axi4_M_arid = m_xactor_to_S_f_rd_addr$D_OUT[108:93] ;

  // value method axi4_M_m_araddr
  assign axi4_M_araddr = m_xactor_to_S_f_rd_addr$D_OUT[92:29] ;

  // value method axi4_M_m_arlen
  assign axi4_M_arlen = m_xactor_to_S_f_rd_addr$D_OUT[28:21] ;

  // value method axi4_M_m_arsize
  assign axi4_M_arsize = m_xactor_to_S_f_rd_addr$D_OUT[20:18] ;

  // value method axi4_M_m_arburst
  assign axi4_M_arburst = m_xactor_to_S_f_rd_addr$D_OUT[17:16] ;

  // value method axi4_M_m_arlock
  assign axi4_M_arlock = m_xactor_to_S_f_rd_addr$D_OUT[15] ;

  // value method axi4_M_m_arcache
  assign axi4_M_arcache = m_xactor_to_S_f_rd_addr$D_OUT[14:11] ;

  // value method axi4_M_m_arprot
  assign axi4_M_arprot = m_xactor_to_S_f_rd_addr$D_OUT[10:8] ;

  // value method axi4_M_m_arqos
  assign axi4_M_arqos = m_xactor_to_S_f_rd_addr$D_OUT[7:4] ;

  // value method axi4_M_m_arregion
  assign axi4_M_arregion = m_xactor_to_S_f_rd_addr$D_OUT[3:0] ;

  // action method axi4_M_m_arready
  assign CAN_FIRE_axi4_M_m_arready = 1'd1 ;
  assign WILL_FIRE_axi4_M_m_arready = 1'd1 ;

  // action method axi4_M_m_rvalid
  assign CAN_FIRE_axi4_M_m_rvalid = 1'd1 ;
  assign WILL_FIRE_axi4_M_m_rvalid = 1'd1 ;

  // value method axi4_M_m_rready
  assign axi4_M_rready = m_xactor_to_S_f_rd_data$FULL_N ;

  // action method m_enable
  assign CAN_FIRE_m_enable = 1'd1 ;
  assign WILL_FIRE_m_enable = 1'd1 ;

  // submodule m_xactor_from_M_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) m_xactor_from_M_f_rd_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(m_xactor_from_M_f_rd_addr$D_IN),
						    .ENQ(m_xactor_from_M_f_rd_addr$ENQ),
						    .DEQ(m_xactor_from_M_f_rd_addr$DEQ),
						    .CLR(m_xactor_from_M_f_rd_addr$CLR),
						    .D_OUT(m_xactor_from_M_f_rd_addr$D_OUT),
						    .FULL_N(m_xactor_from_M_f_rd_addr$FULL_N),
						    .EMPTY_N(m_xactor_from_M_f_rd_addr$EMPTY_N));

  // submodule m_xactor_from_M_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) m_xactor_from_M_f_rd_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(m_xactor_from_M_f_rd_data$D_IN),
						    .ENQ(m_xactor_from_M_f_rd_data$ENQ),
						    .DEQ(m_xactor_from_M_f_rd_data$DEQ),
						    .CLR(m_xactor_from_M_f_rd_data$CLR),
						    .D_OUT(m_xactor_from_M_f_rd_data$D_OUT),
						    .FULL_N(m_xactor_from_M_f_rd_data$FULL_N),
						    .EMPTY_N(m_xactor_from_M_f_rd_data$EMPTY_N));

  // submodule m_xactor_from_M_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) m_xactor_from_M_f_wr_addr(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(m_xactor_from_M_f_wr_addr$D_IN),
						    .ENQ(m_xactor_from_M_f_wr_addr$ENQ),
						    .DEQ(m_xactor_from_M_f_wr_addr$DEQ),
						    .CLR(m_xactor_from_M_f_wr_addr$CLR),
						    .D_OUT(m_xactor_from_M_f_wr_addr$D_OUT),
						    .FULL_N(m_xactor_from_M_f_wr_addr$FULL_N),
						    .EMPTY_N(m_xactor_from_M_f_wr_addr$EMPTY_N));

  // submodule m_xactor_from_M_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(1'd1)) m_xactor_from_M_f_wr_data(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(m_xactor_from_M_f_wr_data$D_IN),
						    .ENQ(m_xactor_from_M_f_wr_data$ENQ),
						    .DEQ(m_xactor_from_M_f_wr_data$DEQ),
						    .CLR(m_xactor_from_M_f_wr_data$CLR),
						    .D_OUT(m_xactor_from_M_f_wr_data$D_OUT),
						    .FULL_N(m_xactor_from_M_f_wr_data$FULL_N),
						    .EMPTY_N(m_xactor_from_M_f_wr_data$EMPTY_N));

  // submodule m_xactor_from_M_f_wr_resp
  FIFO2 #(.width(32'd18),
	  .guarded(1'd1)) m_xactor_from_M_f_wr_resp(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(m_xactor_from_M_f_wr_resp$D_IN),
						    .ENQ(m_xactor_from_M_f_wr_resp$ENQ),
						    .DEQ(m_xactor_from_M_f_wr_resp$DEQ),
						    .CLR(m_xactor_from_M_f_wr_resp$CLR),
						    .D_OUT(m_xactor_from_M_f_wr_resp$D_OUT),
						    .FULL_N(m_xactor_from_M_f_wr_resp$FULL_N),
						    .EMPTY_N(m_xactor_from_M_f_wr_resp$EMPTY_N));

  // submodule m_xactor_to_S_f_rd_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) m_xactor_to_S_f_rd_addr(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(m_xactor_to_S_f_rd_addr$D_IN),
						  .ENQ(m_xactor_to_S_f_rd_addr$ENQ),
						  .DEQ(m_xactor_to_S_f_rd_addr$DEQ),
						  .CLR(m_xactor_to_S_f_rd_addr$CLR),
						  .D_OUT(m_xactor_to_S_f_rd_addr$D_OUT),
						  .FULL_N(m_xactor_to_S_f_rd_addr$FULL_N),
						  .EMPTY_N(m_xactor_to_S_f_rd_addr$EMPTY_N));

  // submodule m_xactor_to_S_f_rd_data
  FIFO2 #(.width(32'd531),
	  .guarded(1'd1)) m_xactor_to_S_f_rd_data(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(m_xactor_to_S_f_rd_data$D_IN),
						  .ENQ(m_xactor_to_S_f_rd_data$ENQ),
						  .DEQ(m_xactor_to_S_f_rd_data$DEQ),
						  .CLR(m_xactor_to_S_f_rd_data$CLR),
						  .D_OUT(m_xactor_to_S_f_rd_data$D_OUT),
						  .FULL_N(m_xactor_to_S_f_rd_data$FULL_N),
						  .EMPTY_N(m_xactor_to_S_f_rd_data$EMPTY_N));

  // submodule m_xactor_to_S_f_wr_addr
  FIFO2 #(.width(32'd109),
	  .guarded(1'd1)) m_xactor_to_S_f_wr_addr(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(m_xactor_to_S_f_wr_addr$D_IN),
						  .ENQ(m_xactor_to_S_f_wr_addr$ENQ),
						  .DEQ(m_xactor_to_S_f_wr_addr$DEQ),
						  .CLR(m_xactor_to_S_f_wr_addr$CLR),
						  .D_OUT(m_xactor_to_S_f_wr_addr$D_OUT),
						  .FULL_N(m_xactor_to_S_f_wr_addr$FULL_N),
						  .EMPTY_N(m_xactor_to_S_f_wr_addr$EMPTY_N));

  // submodule m_xactor_to_S_f_wr_data
  FIFO2 #(.width(32'd577),
	  .guarded(1'd1)) m_xactor_to_S_f_wr_data(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(m_xactor_to_S_f_wr_data$D_IN),
						  .ENQ(m_xactor_to_S_f_wr_data$ENQ),
						  .DEQ(m_xactor_to_S_f_wr_data$DEQ),
						  .CLR(m_xactor_to_S_f_wr_data$CLR),
						  .D_OUT(m_xactor_to_S_f_wr_data$D_OUT),
						  .FULL_N(m_xactor_to_S_f_wr_data$FULL_N),
						  .EMPTY_N(m_xactor_to_S_f_wr_data$EMPTY_N));

  // submodule m_xactor_to_S_f_wr_resp
  FIFO2 #(.width(32'd18), .guarded(1'd1)) m_xactor_to_S_f_wr_resp(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(m_xactor_to_S_f_wr_resp$D_IN),
								  .ENQ(m_xactor_to_S_f_wr_resp$ENQ),
								  .DEQ(m_xactor_to_S_f_wr_resp$DEQ),
								  .CLR(m_xactor_to_S_f_wr_resp$CLR),
								  .D_OUT(m_xactor_to_S_f_wr_resp$D_OUT),
								  .FULL_N(m_xactor_to_S_f_wr_resp$FULL_N),
								  .EMPTY_N(m_xactor_to_S_f_wr_resp$EMPTY_N));

  // rule RL_m_rl_wr_addr
  assign CAN_FIRE_RL_m_rl_wr_addr =
	     m_xactor_from_M_f_wr_addr$EMPTY_N &&
	     m_xactor_to_S_f_wr_addr$FULL_N &&
	     m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_wr_addr = CAN_FIRE_RL_m_rl_wr_addr ;

  // rule RL_m_rl_wr_data
  assign CAN_FIRE_RL_m_rl_wr_data =
	     m_xactor_from_M_f_wr_data$EMPTY_N &&
	     m_xactor_to_S_f_wr_data$FULL_N &&
	     m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_wr_data = CAN_FIRE_RL_m_rl_wr_data ;

  // rule RL_m_rl_wr_resp
  assign CAN_FIRE_RL_m_rl_wr_resp =
	     m_xactor_to_S_f_wr_resp$EMPTY_N &&
	     m_xactor_from_M_f_wr_resp$FULL_N &&
	     m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_wr_resp = CAN_FIRE_RL_m_rl_wr_resp ;

  // rule RL_m_rl_rd_addr
  assign CAN_FIRE_RL_m_rl_rd_addr =
	     m_xactor_from_M_f_rd_addr$EMPTY_N &&
	     m_xactor_to_S_f_rd_addr$FULL_N &&
	     m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_rd_addr = CAN_FIRE_RL_m_rl_rd_addr ;

  // rule RL_m_rl_rd_data
  assign CAN_FIRE_RL_m_rl_rd_data =
	     m_xactor_to_S_f_rd_data$EMPTY_N &&
	     m_xactor_from_M_f_rd_data$FULL_N &&
	     m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_rd_data = CAN_FIRE_RL_m_rl_rd_data ;

  // rule RL_m_rl_wr_addr_disabled
  assign CAN_FIRE_RL_m_rl_wr_addr_disabled =
	     m_xactor_from_M_f_wr_addr$EMPTY_N &&
	     m_xactor_from_M_f_wr_resp$FULL_N &&
	     !m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_wr_addr_disabled =
	     CAN_FIRE_RL_m_rl_wr_addr_disabled ;

  // rule RL_m_rl_wr_data_disabled
  assign CAN_FIRE_RL_m_rl_wr_data_disabled =
	     m_xactor_from_M_f_wr_data$EMPTY_N && !m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_wr_data_disabled =
	     CAN_FIRE_RL_m_rl_wr_data_disabled ;

  // rule RL_m_rl_wr_resp_disabled_drain_S
  assign CAN_FIRE_RL_m_rl_wr_resp_disabled_drain_S =
	     m_xactor_to_S_f_wr_resp$EMPTY_N && !m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S =
	     CAN_FIRE_RL_m_rl_wr_resp_disabled_drain_S ;

  // rule RL_m_rl_rd_addr_disabled
  assign CAN_FIRE_RL_m_rl_rd_addr_disabled =
	     m_xactor_from_M_f_rd_addr$EMPTY_N && !m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_rd_addr_disabled =
	     CAN_FIRE_RL_m_rl_rd_addr_disabled ;

  // rule RL_m_rl_rd_data_disabled_burst_resps
  assign CAN_FIRE_RL_m_rl_rd_data_disabled_burst_resps =
	     m_xactor_from_M_f_rd_addr$EMPTY_N &&
	     m_xactor_from_M_f_rd_data$FULL_N &&
	     !m_rg_enabled &&
	     m_rg_rd_burst_len != 9'd0 ;
  assign WILL_FIRE_RL_m_rl_rd_data_disabled_burst_resps =
	     MUX_m_xactor_from_M_f_rd_data$enq_1__SEL_2 ;

  // rule RL_m_rl_rd_data_disabled_drain_S
  assign CAN_FIRE_RL_m_rl_rd_data_disabled_drain_S =
	     m_xactor_to_S_f_rd_data$EMPTY_N && !m_rg_enabled ;
  assign WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S =
	     CAN_FIRE_RL_m_rl_rd_data_disabled_drain_S ;

  // inputs to muxes for submodule ports
  assign MUX_m_rg_rd_burst_len$write_1__SEL_1 =
	     WILL_FIRE_RL_m_rl_rd_data_disabled_burst_resps &&
	     m_rg_rd_burst_len != 9'd1 ;
  assign MUX_m_xactor_from_M_f_rd_data$enq_1__SEL_2 =
	     CAN_FIRE_RL_m_rl_rd_data_disabled_burst_resps &&
	     !WILL_FIRE_RL_m_rl_rd_addr_disabled ;
  assign MUX_m_rg_rd_burst_len$write_1__VAL_1 = m_rg_rd_burst_len - 9'd1 ;
  assign MUX_m_rg_rd_burst_len$write_1__VAL_2 = x__h2108 + 9'd1 ;
  assign MUX_m_xactor_from_M_f_rd_data$enq_1__VAL_2 =
	     { m_xactor_from_M_f_rd_addr$D_OUT[108:93],
	       514'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA,
	       m_rg_rd_burst_len == 9'd1 } ;
  assign MUX_m_xactor_from_M_f_wr_resp$enq_1__VAL_2 =
	     { m_xactor_from_M_f_wr_addr$D_OUT[108:93], 2'd2 } ;

  // register m_rg_enabled
  assign m_rg_enabled$D_IN = m_enable_enabled ;
  assign m_rg_enabled$EN = 1'd1 ;

  // register m_rg_enabled_prev
  assign m_rg_enabled_prev$D_IN = 1'b0 ;
  assign m_rg_enabled_prev$EN = 1'b0 ;

  // register m_rg_rd_burst_len
  assign m_rg_rd_burst_len$D_IN =
	     MUX_m_rg_rd_burst_len$write_1__SEL_1 ?
	       MUX_m_rg_rd_burst_len$write_1__VAL_1 :
	       MUX_m_rg_rd_burst_len$write_1__VAL_2 ;
  assign m_rg_rd_burst_len$EN =
	     WILL_FIRE_RL_m_rl_rd_data_disabled_burst_resps &&
	     m_rg_rd_burst_len != 9'd1 ||
	     WILL_FIRE_RL_m_rl_rd_addr_disabled ;

  // submodule m_xactor_from_M_f_rd_addr
  assign m_xactor_from_M_f_rd_addr$D_IN =
	     { axi4_S_arid,
	       axi4_S_araddr,
	       axi4_S_arlen,
	       axi4_S_arsize,
	       axi4_S_arburst,
	       axi4_S_arlock,
	       axi4_S_arcache,
	       axi4_S_arprot,
	       axi4_S_arqos,
	       axi4_S_arregion } ;
  assign m_xactor_from_M_f_rd_addr$ENQ =
	     axi4_S_arvalid && m_xactor_from_M_f_rd_addr$FULL_N ;
  assign m_xactor_from_M_f_rd_addr$DEQ =
	     WILL_FIRE_RL_m_rl_rd_data_disabled_burst_resps &&
	     m_rg_rd_burst_len == 9'd1 ||
	     WILL_FIRE_RL_m_rl_rd_addr ;
  assign m_xactor_from_M_f_rd_addr$CLR = 1'b0 ;

  // submodule m_xactor_from_M_f_rd_data
  assign m_xactor_from_M_f_rd_data$D_IN =
	     WILL_FIRE_RL_m_rl_rd_data ?
	       m_xactor_to_S_f_rd_data$D_OUT :
	       MUX_m_xactor_from_M_f_rd_data$enq_1__VAL_2 ;
  assign m_xactor_from_M_f_rd_data$ENQ =
	     WILL_FIRE_RL_m_rl_rd_data ||
	     WILL_FIRE_RL_m_rl_rd_data_disabled_burst_resps ;
  assign m_xactor_from_M_f_rd_data$DEQ =
	     axi4_S_rready && m_xactor_from_M_f_rd_data$EMPTY_N ;
  assign m_xactor_from_M_f_rd_data$CLR = 1'b0 ;

  // submodule m_xactor_from_M_f_wr_addr
  assign m_xactor_from_M_f_wr_addr$D_IN =
	     { axi4_S_awid,
	       axi4_S_awaddr,
	       axi4_S_awlen,
	       axi4_S_awsize,
	       axi4_S_awburst,
	       axi4_S_awlock,
	       axi4_S_awcache,
	       axi4_S_awprot,
	       axi4_S_awqos,
	       axi4_S_awregion } ;
  assign m_xactor_from_M_f_wr_addr$ENQ =
	     axi4_S_awvalid && m_xactor_from_M_f_wr_addr$FULL_N ;
  assign m_xactor_from_M_f_wr_addr$DEQ =
	     WILL_FIRE_RL_m_rl_wr_addr_disabled || WILL_FIRE_RL_m_rl_wr_addr ;
  assign m_xactor_from_M_f_wr_addr$CLR = 1'b0 ;

  // submodule m_xactor_from_M_f_wr_data
  assign m_xactor_from_M_f_wr_data$D_IN =
	     { axi4_S_wdata, axi4_S_wstrb, axi4_S_wlast } ;
  assign m_xactor_from_M_f_wr_data$ENQ =
	     axi4_S_wvalid && m_xactor_from_M_f_wr_data$FULL_N ;
  assign m_xactor_from_M_f_wr_data$DEQ =
	     WILL_FIRE_RL_m_rl_wr_data_disabled || WILL_FIRE_RL_m_rl_wr_data ;
  assign m_xactor_from_M_f_wr_data$CLR = 1'b0 ;

  // submodule m_xactor_from_M_f_wr_resp
  assign m_xactor_from_M_f_wr_resp$D_IN =
	     WILL_FIRE_RL_m_rl_wr_resp ?
	       m_xactor_to_S_f_wr_resp$D_OUT :
	       MUX_m_xactor_from_M_f_wr_resp$enq_1__VAL_2 ;
  assign m_xactor_from_M_f_wr_resp$ENQ =
	     WILL_FIRE_RL_m_rl_wr_resp || WILL_FIRE_RL_m_rl_wr_addr_disabled ;
  assign m_xactor_from_M_f_wr_resp$DEQ =
	     axi4_S_bready && m_xactor_from_M_f_wr_resp$EMPTY_N ;
  assign m_xactor_from_M_f_wr_resp$CLR = 1'b0 ;

  // submodule m_xactor_to_S_f_rd_addr
  assign m_xactor_to_S_f_rd_addr$D_IN = m_xactor_from_M_f_rd_addr$D_OUT ;
  assign m_xactor_to_S_f_rd_addr$ENQ = CAN_FIRE_RL_m_rl_rd_addr ;
  assign m_xactor_to_S_f_rd_addr$DEQ =
	     m_xactor_to_S_f_rd_addr$EMPTY_N && axi4_M_arready ;
  assign m_xactor_to_S_f_rd_addr$CLR = 1'b0 ;

  // submodule m_xactor_to_S_f_rd_data
  assign m_xactor_to_S_f_rd_data$D_IN =
	     { axi4_M_rid, axi4_M_rdata, axi4_M_rresp, axi4_M_rlast } ;
  assign m_xactor_to_S_f_rd_data$ENQ =
	     axi4_M_rvalid && m_xactor_to_S_f_rd_data$FULL_N ;
  assign m_xactor_to_S_f_rd_data$DEQ =
	     WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S ||
	     WILL_FIRE_RL_m_rl_rd_data ;
  assign m_xactor_to_S_f_rd_data$CLR = 1'b0 ;

  // submodule m_xactor_to_S_f_wr_addr
  assign m_xactor_to_S_f_wr_addr$D_IN = m_xactor_from_M_f_wr_addr$D_OUT ;
  assign m_xactor_to_S_f_wr_addr$ENQ = CAN_FIRE_RL_m_rl_wr_addr ;
  assign m_xactor_to_S_f_wr_addr$DEQ =
	     m_xactor_to_S_f_wr_addr$EMPTY_N && axi4_M_awready ;
  assign m_xactor_to_S_f_wr_addr$CLR = 1'b0 ;

  // submodule m_xactor_to_S_f_wr_data
  assign m_xactor_to_S_f_wr_data$D_IN = m_xactor_from_M_f_wr_data$D_OUT ;
  assign m_xactor_to_S_f_wr_data$ENQ = CAN_FIRE_RL_m_rl_wr_data ;
  assign m_xactor_to_S_f_wr_data$DEQ =
	     m_xactor_to_S_f_wr_data$EMPTY_N && axi4_M_wready ;
  assign m_xactor_to_S_f_wr_data$CLR = 1'b0 ;

  // submodule m_xactor_to_S_f_wr_resp
  assign m_xactor_to_S_f_wr_resp$D_IN = { axi4_M_bid, axi4_M_bresp } ;
  assign m_xactor_to_S_f_wr_resp$ENQ =
	     axi4_M_bvalid && m_xactor_to_S_f_wr_resp$FULL_N ;
  assign m_xactor_to_S_f_wr_resp$DEQ =
	     WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S ||
	     WILL_FIRE_RL_m_rl_wr_resp ;
  assign m_xactor_to_S_f_wr_resp$CLR = 1'b0 ;

  // remaining internal signals
  assign x__h2108 = { 1'd0, m_xactor_from_M_f_rd_addr$D_OUT[28:21] } ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_rg_enabled <= `BSV_ASSIGNMENT_DELAY 1'd0;
	m_rg_enabled_prev <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (m_rg_enabled$EN)
	  m_rg_enabled <= `BSV_ASSIGNMENT_DELAY m_rg_enabled$D_IN;
	if (m_rg_enabled_prev$EN)
	  m_rg_enabled_prev <= `BSV_ASSIGNMENT_DELAY m_rg_enabled_prev$D_IN;
      end
    if (m_rg_rd_burst_len$EN)
      m_rg_rd_burst_len <= `BSV_ASSIGNMENT_DELAY m_rg_rd_burst_len$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_rg_enabled = 1'h0;
    m_rg_enabled_prev = 1'h0;
    m_rg_rd_burst_len = 9'h0AA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$display("WARNING: rl_wr_addr_disabled: rec'd wr request from M when gate disabled.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("AXI4_Wr_Addr { ", "awid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[108:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_wr_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$display("    Returning error response.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	begin
	  v__h1832 = $stime;
	  #0;
	end
    v__h1826 = v__h1832 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_addr_disabled)
	$display("    %0d: %m", v__h1826);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S)
	$display("WARNING: rl_wr_resp_disabled: rec'd wr resp from S when gate disabled; ignoring");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S)
	$display("    (there couldn't have been a request)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S)
	begin
	  v__h1994 = $stime;
	  #0;
	end
    v__h1988 = v__h1994 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_wr_resp_disabled_drain_S)
	$display("    %0d: %m", v__h1988);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$display("WARNING: rl_rd_addr_disabled: rec'd rd request from M when gate disabled.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("AXI4_Rd_Addr { ", "arid: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[108:93]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[92:29]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arlen: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[28:21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arsize: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[20:18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arburst: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[17:16]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arlock: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arcache: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[14:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[10:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arqos: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[7:4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "arregion: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$write("'h%h", m_xactor_from_M_f_rd_addr$D_OUT[3:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$display("    Returning error response.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	begin
	  v__h2246 = $stime;
	  #0;
	end
    v__h2240 = v__h2246 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_addr_disabled)
	$display("    %0d: %m", v__h2240);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S)
	$display("WARNING: rl_rd_data_disabled: rec'd rd resp from S when gate disabled; ignoring");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S)
	$display("    (there couldn't have been a request)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S)
	begin
	  v__h2431 = $stime;
	  #0;
	end
    v__h2425 = v__h2431 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_m_rl_rd_data_disabled_drain_S)
	$display("    %0d: %m", v__h2425);
  end
  // synopsys translate_on
endmodule  // mkAXI4_Gate_A

